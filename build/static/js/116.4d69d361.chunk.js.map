{"version":3,"file":"static/js/116.4d69d361.chunk.js","mappings":"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","sources":["components/CustomButton/index.tsx","components/CustomValidateModal/index.tsx","components/SelectInput/index.tsx","components/TextInput/index.tsx","components/CustomSnackbar/index.tsx","hooks/useEnqueueSnackbar.tsx","pages/BotTradeMethod/BotTradeMethodType.tsx","components/Tile/index.tsx","pages/BotTradeMethod/BotTradeMethodBuySell.tsx","components/Bubble/index.tsx","pages/BotTradeMethod/BotTradeMethodBubble.tsx","pages/BotTradeMethod/index.tsx","pages/BotTradeSetting/BotTradeSettingButton.tsx","utils/ConvertToThreeDecimalPlaces.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\ninterface CustomButtonProps {\n  children: React.ReactNode;\n  className?: string;\n  background?: string;\n  textClassName?: string;\n  textColor?: string;\n  icon?: string;\n  iconClassName?: string;\n  type?: 'button' | 'submit' | 'reset' | undefined;\n  onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;\n}\n\nconst CustomButton: FC<CustomButtonProps> = ({\n  children,\n  className = '',\n  background = 'bg-primary-100',\n  textClassName = '',\n  textColor = 'bg-background-100',\n  icon,\n  iconClassName = '',\n  type = 'button',\n  onClick,\n}) => {\n  return (\n    <button\n      className={`flex justify-center items-center gap-x-[0.625rem] px-4 py-2 rounded-xl ${background} ${className}`}\n      type={type}\n      onClick={onClick}\n    >\n      {icon && <img src={icon} className={iconClassName} alt=\"BotLambotrade\" />}\n      <p\n        className={`${textClassName} ${textColor} bg-clip-text text-transparent font-bold`}\n      >\n        {children}\n      </p>\n    </button>\n  );\n};\n\nexport default CustomButton;\n","import CustomButton from 'components/CustomButton';\nimport CustomModal from 'components/CustomModal';\nimport React, { FC } from 'react';\nimport CustomValidateModelProps from 'types/CustomValidateProps';\n\nconst CustomValidateModel: FC<CustomValidateModelProps> = ({\n  isOpen,\n  headingMessage,\n  message,\n  icon,\n  buttonMessage,\n  handleOpen,\n  handleClose,\n}) => {\n  return (\n    <CustomModal\n      zIndex={2000}\n      isOpen={isOpen}\n      handleOpen={handleOpen}\n      handleClose={handleClose}\n    >\n      <div className=\"absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] p-6 w-[calc(100vw-2rem)] md:min-w-[31.25rem] md:max-w-[31.25rem] bg-background-80 rounded-3xl text-center\">\n        <img\n          className=\"mb-4 w-[5.5rem] mx-auto\"\n          src={icon}\n          alt=\"BotLambotrade\"\n        />\n        <p className=\"mb-2 mx-auto max-w-[18.75rem] text-xl text-ink-100 font-bold\">\n          {headingMessage}\n        </p>\n        <p className=\"mb-12\">{message}</p>\n        <div className=\"w-full\">\n          <CustomButton\n            className=\"w-full py-4\"\n            textClassName=\"font-bold\"\n            onClick={() => {\n              handleClose();\n            }}\n          >\n            {buttonMessage}\n          </CustomButton>\n        </div>\n      </div>\n    </CustomModal>\n  );\n};\n\nexport default CustomValidateModel;\n","import { Cancel } from '@mui/icons-material';\nimport { TextField } from '@mui/material';\nimport React, { FC, forwardRef, useRef, useState } from 'react';\nimport { boolean } from 'yup';\nimport { isDisabled } from '@testing-library/user-event/dist/utils';\nimport CurrencyInput, { CurrencyInputProps } from 'react-currency-input-field';\nimport { CurrencyInputOnChangeValues } from 'react-currency-input-field/dist/components/CurrencyInputProps';\nimport Select, {\n  components,\n  ActionMeta,\n  GroupBase,\n  OptionsOrGroups,\n  SingleValue,\n  StylesConfig,\n  ContainerProps,\n  InputProps,\n  Props,\n  IndicatorSeparatorProps,\n  IndicatorsContainerProps,\n  MenuListProps,\n  OptionProps,\n  SingleValueProps,\n} from 'react-select';\nimport Control, {\n  ControlProps,\n} from 'react-select/dist/declarations/src/components/Control';\nimport images from 'assets';\nimport TextInput from 'components/TextInput';\nimport InputSelectOption from 'types/InputSelectOption';\n\ninterface SelectInputProps {\n  id?: string;\n  name: string;\n  label?: React.ReactNode;\n  isLabelOutside?: boolean;\n  placeholder?: string;\n  value: InputSelectOption | null;\n  options:\n    | OptionsOrGroups<InputSelectOption, GroupBase<InputSelectOption>>\n    | undefined;\n  defaultValue?: InputSelectOption;\n  isSelectDisabled?: boolean;\n  error?: boolean;\n  helperText?: React.ReactNode;\n  helperTextEnd?: React.ReactNode;\n  fullWidth?: boolean;\n  searchIcon?: string;\n  symbol?: string;\n  icon?: string | undefined;\n  button?: React.ReactNode;\n  containerClassName?: string;\n  selectContainerClassName?: string;\n  inputClassName?: string;\n  indicatorContainerClassName?: string;\n  indicatorContainerIconClassName?: string;\n  symbolClassName?: string;\n  helperClassName?: string;\n  helperTextClassName?: string;\n  helperTextEndClassName?: string;\n  menuPortalClassName?: string;\n  resetValue?: () => void;\n  onChange?:\n    | ((\n        newValue: SingleValue<InputSelectOption>,\n        actionMeta: ActionMeta<InputSelectOption>\n      ) => void)\n    | undefined;\n  onBlur?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  onFocus?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  onKeyDown?: React.KeyboardEventHandler<\n    HTMLTextAreaElement | HTMLInputElement\n  >;\n  onKeyUp?: React.KeyboardEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onMouseOver?: React.MouseEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onMouseLeave?: React.MouseEventHandler<\n    HTMLTextAreaElement | HTMLInputElement\n  >;\n  // REF\n  menuRef?: React.RefObject<HTMLDivElement>;\n}\n\nconst selectStyles: StylesConfig<InputSelectOption> = {\n  control: (styles) => ({\n    ...styles,\n  }),\n};\n\nexport interface ColourOption {\n  readonly value: string;\n  readonly label: string;\n}\n\nexport const IndicatorsContainer = (\n  props: IndicatorsContainerProps<InputSelectOption, false>\n) => {\n  // @ts-ignore\n  const { indicatorContainerClassName, indicatorContainerIconClassName } =\n    props.selectProps;\n  return (\n    <components.IndicatorsContainer\n      className={`absolute right-3 top-[50%] translate-y-[-50%] ${indicatorContainerClassName}`}\n      {...props}\n    >\n      <img\n        className={`w-[1.5rem] ${indicatorContainerIconClassName}`}\n        src={images.input.dropdown}\n        alt=\"Legend Ground\"\n      />\n    </components.IndicatorsContainer>\n  );\n};\n\nconst IndicatorSeparator = ({\n  innerProps,\n}: IndicatorSeparatorProps<InputSelectOption, false>) => {\n  // return <span style={indicatorSeparatorStyle} {...innerProps} />;\n  return <></>;\n};\n\nconst MenuList = (props: MenuListProps<InputSelectOption, false>) => {\n  // @ts-ignore\n  // prettier-ignore\n  const { searchInputIcon, searchInput, searchInputName, searchInputPlaceHolder, \n    // @ts-ignore\n    searchInputSymbol, searchInputResetValue, searchInputError, searchInputHelperText } = props.selectProps;\n\n  return (\n    <components.MenuList {...props}>\n      {searchInput && (\n        <TextInput\n          searchIcon={searchInputIcon}\n          name={searchInputName}\n          value={searchInput}\n          placeholder={searchInputPlaceHolder}\n          symbol={searchInputSymbol}\n          resetValue={searchInputResetValue}\n          error={searchInputError}\n          helperText={searchInputHelperText}\n          type=\"search\"\n        />\n      )}\n      {props.children}\n      {/* <div className=\"max-h-[39.5rem] overflow-y-auto\"></div> */}\n    </components.MenuList>\n  );\n};\n\nconst Option = (props: OptionProps<InputSelectOption>) => {\n  // const { value, options, isOptionSelected } = props.selectProps;\n  const { isSelected, data, selectOption } = props;\n  const optionRef = useRef<HTMLDivElement | null>(null);\n  // console.log('isSelected', isSelected);\n  // console.log('data', data);\n  return (\n    <components.Option\n      {...props}\n      className={`!px-4 w-fit border-select-input-two select-input-hover ${\n        isSelected ? 'bg-primary-05 !bg-inherit' : ''\n      } !cursor-pointer`}\n    >\n      <div\n        className=\"py-4 flex items-center justify-between\"\n      >\n        <p\n          className={`${\n            isSelected\n              ? 'bg-primary-100 !bg-clip-text !text-transparent'\n              : 'text-ink-100'\n          }`}\n        >\n          {props.children}\n        </p>\n        {isSelected && (\n          <img\n            className=\"w-[1.5rem]\"\n            src={images.input.gold_checkbox}\n            alt=\"BotLambotrade\"\n          />\n        )}\n      </div>\n    </components.Option>\n  );\n};\n\nconst SelectInput: FC<SelectInputProps> = forwardRef(\n  (\n    {\n      id,\n      name,\n      label,\n      isLabelOutside = false,\n      placeholder,\n      value,\n      error,\n      helperText,\n      helperTextEnd,\n      fullWidth,\n      options,\n      defaultValue,\n      searchIcon,\n      symbol,\n      icon,\n      button,\n      isSelectDisabled,\n      containerClassName = '',\n      selectContainerClassName = '',\n      inputClassName = '',\n      indicatorContainerClassName = '',\n      indicatorContainerIconClassName = '',\n      symbolClassName = '',\n      helperClassName = '',\n      helperTextClassName = '',\n      helperTextEndClassName = '',\n      menuPortalClassName = '',\n      resetValue,\n      onChange,\n      onBlur,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      onMouseOver,\n      onMouseLeave,\n      menuRef,\n    },\n    ref\n  ) => {\n    const [isSelectFocus, setIsSelectFocus] = useState(false);\n    const [isSelectHover, setIsSelectHover] = useState(false);\n    const [isPasswordShowing, setIsPasswordShowing] = useState(false);\n    const inputRef = useRef<HTMLInputElement>(null);\n    // const [isClickingInside, setIsClickingInside] = useState(false);\n\n    const passwordType = isPasswordShowing ? 'text' : 'password';\n    const handlePasswordShown = () => {\n      // @ts-ignore\n      inputRef.current?.focus();\n      setIsPasswordShowing((prev) => !prev);\n    };\n\n    const inputSpacingWithLabel = label\n      ? 'pt-[1.625rem] pb-[0.375rem]'\n      : 'py-3';\n\n    return (\n      <div\n        className={`relative ${\n          fullWidth ? 'w-full' : ''\n        } ${containerClassName} ${\n          isSelectDisabled ? 'cursor-not-allowed' : ''\n        }`}\n      >\n        {!!label && !isLabelOutside && (\n          <label\n            className={`cubic-bezier absolute left-0 top-0  ${\n              icon || button ? 'w-[85%]' : 'w-[70%]'\n            } overflow-hidden text-ellipsis whitespace-nowrap ${\n              !isSelectFocus && !value && value !== 0\n                ? 'pl-3 pr-3 py-4 text-base text-ink-40'\n                : 'pl-3 pr-3 py-[0.375rem] text-xs text-ink-60'\n            }`}\n            onClick={() => {\n              inputRef.current?.focus();\n            }}\n          >\n            {label}\n          </label>\n        )}\n        <div\n          onMouseOver={() => {\n            setIsSelectHover(true);\n          }}\n          onMouseLeave={() => {\n            setIsSelectHover(false);\n          }}\n          onClick={(e) => {\n            e.stopPropagation();\n          }}\n        >\n          <Select\n            // defaultValue={value}\n            value={value}\n            id={id}\n            name={name}\n            options={options}\n            // @ts-ignore\n            ref={inputRef}\n            menuPortalTarget={document.body}\n            indicatorContainerClassName={indicatorContainerClassName}\n            indicatorContainerIconClassName={indicatorContainerIconClassName}\n            menuPlacement=\"auto\"\n            // menuPosition=\"fixed\"\n            // menuIsOpen={true}\n            classNames={{\n              container: (state) => {\n                return `relative ${selectContainerClassName}`;\n              },\n              control: (state) => {\n                return `${inputSpacingWithLabel} relative w-full !overflow-hidden !text-ellipsis !whitespace-nowrap !bg-transparent !caret-yellow-500 !focus:outline-none ${\n                  !searchIcon ? '!pl-3 !pr-[2.875rem]' : '!pl-8 !pr-[2.875rem]'\n                } !rounded-xl ${\n                  isSelectDisabled\n                    ? 'border-input-ink !bg-ink-10'\n                    : error\n                    ? 'border-input-red'\n                    : isSelectFocus || isSelectHover\n                    ? 'border-primary'\n                    : 'border-input-ink'\n                } !border-0 !shadow-none ${inputClassName} !cursor-pointer`;\n                // return `${inputSpacingWithLabel} w-full overflow-hidden text-ellipsis whitespace-nowrap !bg-transparent caret-input focus:outline-none ${\n                //   !isSelectDisabled && !value && label\n                //     ? 'placeholder-transparent'\n                //     : 'placeholder-ink-20'\n                // } ${inputClassName}`;\n              },\n              valueContainer: (state) => {\n                return `!p-0`;\n              },\n              singleValue: (state) => {\n                return `!m-0 !text-ink-100`;\n              },\n              placeholder: (state) => {\n                return `!m-0 ${\n                  !isSelectFocus && !value && label && !isLabelOutside\n                    ? '!text-transparent'\n                    : '!text-ink-20'\n                }`;\n              },\n              menu: (state) => {\n                return `my-2 py-4 !overflow-hidden !rounded-2xl !bg-dropdown shadow-popup `;\n              },\n              menuList: (state) => {\n                return `!p-0`;\n              },\n              menuPortal: (state) => {\n                return `!z-[20000] ${menuPortalClassName}`;\n              },\n            }}\n            unstyled\n            isOptionSelected={(option, options) => {\n              return options[0]?.value === option?.value;\n            }}\n            components={{\n              IndicatorSeparator,\n              IndicatorsContainer,\n              MenuList,\n              Option,\n            }}\n            openMenuOnFocus={true}\n            onChange={(option, actionMeta) => {\n              if (onChange) {\n                onChange(option, actionMeta);\n              }\n              setIsSelectFocus(false);\n              setIsSelectHover(false);\n            }}\n            onBlur={(e) => {\n              if (onBlur) {\n                onBlur(e);\n              }\n              setIsSelectFocus(false);\n            }}\n            onFocus={(e) => {\n              if (onFocus) {\n                onFocus(e);\n              }\n              setIsSelectFocus(true);\n            }}\n            isSearchable={false}\n            isDisabled={isSelectDisabled}\n          />\n        </div>\n        {/* <div\n        className={`relative ${\n          fullWidth ? 'w-full' : ''\n        } ${containerClassName}`}\n      >\n        {!!label && (\n          <label\n            className={`cubic-bezier -z-10 absolute left-0 top-0 w-[70%] overflow-hidden text-ellipsis whitespace-nowrap ${\n              !isInputFocus && !value && value !== 0\n                ? 'px-3 py-4 text-base text-ink-40'\n                : 'px-3 py-[0.375rem] text-xs text-ink-60'\n            }`}\n          >\n            {label}\n          </label>\n        )}\n\n        <div\n          className={`px-3 flex justify-between items-center gap-x-3 rounded-xl ${\n            isSelectDisabled\n              ? 'border-input-ink bg-ink-10'\n              : error\n              ? 'border-input-red'\n              : isInputFocus\n              ? 'border-primary'\n              : 'border-input-ink'\n          } `}\n        ></div>\n      </div> */}\n        {(!!helperText || !!helperTextEnd) && (\n          <div className={`px-3 pt-2 flex justify-between ${helperClassName}`}>\n            <p\n              className={`${\n                isSelectDisabled\n                  ? 'text-ink-80'\n                  : error\n                  ? 'text-red-100'\n                  : 'text-ink-80'\n              } text-sm ${helperTextClassName}`}\n            >\n              {helperText}\n            </p>\n            <p className={`text-ink-100 text-sm ${helperTextEndClassName}`}>\n              {helperTextEnd}\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default SelectInput;\n","import { Cancel } from '@mui/icons-material';\nimport { TextField } from '@mui/material';\nimport React, { FC, useRef, useState } from 'react';\nimport { boolean } from 'yup';\nimport { isDisabled } from '@testing-library/user-event/dist/utils';\nimport CurrencyInput, { CurrencyInputProps } from 'react-currency-input-field';\nimport { CurrencyInputOnChangeValues } from 'react-currency-input-field/dist/components/CurrencyInputProps';\n\ninterface TextInputProps {\n  id?: string;\n  name: string;\n  label?: React.ReactNode;\n  isLabelOutside?: boolean;\n  type: React.InputHTMLAttributes<unknown>['type'];\n  placeholder?: string;\n  prefix?: string;\n  value: string | number | readonly string[] | undefined;\n  error?: boolean;\n  isInputDisabled?: boolean;\n  helperText?: React.ReactNode;\n  helperTextEnd?: React.ReactNode;\n  decimalsLimit?: number;\n  decimalScale?: number;\n  fixedDecimalLength?: number;\n  fullWidth?: boolean;\n  searchIcon?: string;\n  symbol?: string;\n  autoComplete?: boolean;\n  icon?: string | undefined;\n  button?: React.ReactNode;\n  searchIconClassName?: string;\n  containerClassName?: string;\n  inputClassName?: string;\n  symbolClassName?: string;\n  helperClassName?: string;\n  helperTextClassName?: string;\n  helperTextEndClassName?: string;\n  resetValue?: () => void;\n  onChange?: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onValueChange?:\n  | ((\n    value: string | undefined,\n    name?: string | undefined,\n    values?: CurrencyInputOnChangeValues | undefined\n  ) => void)\n  | undefined;\n  onBlur?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  onFocus?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  onKeyDown?: React.KeyboardEventHandler<\n    HTMLTextAreaElement | HTMLInputElement\n  >;\n  onKeyUp?: React.KeyboardEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onMouseOver?: React.MouseEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onMouseLeave?: React.MouseEventHandler<\n    HTMLTextAreaElement | HTMLInputElement\n  >;\n}\n\nconst TextInput: FC<TextInputProps> = ({\n  id,\n  name,\n  label,\n  isLabelOutside = false,\n  placeholder,\n  prefix,\n  type = 'text',\n  value,\n  error,\n  helperText,\n  helperTextEnd,\n  decimalsLimit = 3,\n  decimalScale,\n  fixedDecimalLength,\n  fullWidth,\n  searchIcon,\n  symbol,\n  icon,\n  autoComplete,\n  button,\n  isInputDisabled,\n  searchIconClassName = '',\n  containerClassName = '',\n  inputClassName = '',\n  symbolClassName = '',\n  helperClassName = '',\n  helperTextClassName = '',\n  helperTextEndClassName = '',\n  resetValue,\n  onChange,\n  onValueChange,\n  onBlur,\n  onFocus,\n  onKeyDown,\n  onKeyUp,\n  onMouseOver,\n  onMouseLeave,\n}) => {\n  const [isInputFocus, setInputFocus] = useState(false);\n  const [isInputHover, setIsInputHover] = useState(false);\n  const [isPasswordShowing, setIsPasswordShowing] = useState(false);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  // const [isClickingInside, setIsClickingInside] = useState(false);\n\n  const passwordType = isPasswordShowing ? 'text' : 'password';\n  const handlePasswordShown = () => {\n    inputRef.current?.focus();\n    setIsPasswordShowing((prev) => !prev);\n  };\n\n  const inputSpacingWithLabel =\n    label && !isLabelOutside ? 'pt-[1.625rem] pb-[0.375rem]' : 'py-4';\n\n  return (\n    <div\n      className={`relative ${fullWidth ? 'w-full' : ''} ${containerClassName}`}\n    >\n      {!!label && isLabelOutside && (\n        <div className={`mb-2 cubic-bezier ssss`}>\n          <label\n            className={`overflow-hidden text-ellipsis whitespace-nowrap small-caps`}\n            onClick={() => {\n              inputRef.current?.focus();\n            }}\n          >\n            {label}\n          </label>\n        </div>\n      )}\n      {!!label && !isLabelOutside && (\n        <label\n          className={`cubic-bezier absolute left-0 top-0  ${icon || button ? 'w-[85%]' : 'w-[70%]'\n            } overflow-hidden text-ellipsis whitespace-nowrap ${!isInputFocus && !value\n              ? 'pl-3 pr-3 py-4 text-base text-ink-40'\n              : 'pl-3 pr-3 py-[0.375rem] text-xs text-ink-60'\n            }`}\n          onClick={() => {\n            inputRef.current?.focus();\n          }}\n        >\n          {label}\n        </label>\n      )}\n      {!!searchIcon && (\n        <div className=\"absolute left-3 top-[50%] translate-y-[-50%]\">\n          <img className={`w-[1.5rem] ${searchIconClassName}`} src={searchIcon} alt=\"BotLambotrade\" />\n        </div>\n      )}\n\n      <div\n        className={`${!searchIcon ? 'pl-3 pr-3' : 'pl-10 pr-3'\n          } flex justify-between items-center gap-x-3 rounded-xl ${isInputDisabled\n            ? 'border-input-ink bg-ink-10'\n            : error\n              ? 'border-input-red'\n              : isInputFocus || isInputHover\n                ? 'border-primary'\n                : 'border-input-ink'\n          }`}\n      >\n        <div className=\"relative z-10 flex-grow flex justify-between items-center\">\n          {type === 'number' && (\n            <CurrencyInput\n              id={id}\n              name={name}\n              autoComplete={autoComplete === true ? 'new-password' : ''}\n              className={`${inputSpacingWithLabel} w-full overflow-hidden text-ellipsis whitespace-nowrap bg-transparent caret-yellow-500 focus:outline-none ${!isInputFocus && !value && label && !isLabelOutside\n                  ? 'placeholder-transparent'\n                  : 'placeholder-ink-20'\n                } ${inputClassName}`}\n              value={value}\n              placeholder={placeholder}\n              onChange={onChange}\n              onValueChange={(value, _, values) => {\n                if (onValueChange) {\n                  onValueChange(value, _, values);\n                }\n              }}\n              onBlur={(e) => {\n                if (onBlur) {\n                  onBlur(e);\n                }\n                setInputFocus(false);\n              }}\n              onFocus={(e) => {\n                if (onFocus) {\n                  onFocus(e);\n                }\n                setInputFocus(true);\n              }}\n              onKeyDown={onKeyDown}\n              onKeyUp={onKeyUp}\n              onMouseOver={(e) => {\n                if (onMouseOver) {\n                  onMouseOver(e);\n                }\n                setIsInputHover(true);\n              }}\n              onMouseLeave={(e) => {\n                if (onMouseLeave) {\n                  onMouseLeave(e);\n                }\n                setIsInputHover(false);\n              }}\n              prefix={prefix}\n              disabled={isInputDisabled}\n              allowNegativeValue={false}\n              decimalsLimit={decimalsLimit}\n              decimalScale={decimalScale}\n              fixedDecimalLength={fixedDecimalLength}\n              disableAbbreviations={true}\n              decimalSeparator=\".\"\n              groupSeparator=\",\"\n              maxLength={13}\n              // intlConfig={{ locale: 'en-US', currency: 'USD' }}\n              ref={inputRef}\n            />\n          )}\n          {type !== 'number' && (\n            <input\n              id={id}\n              name={name}\n              autoComplete={autoComplete === true ? 'new-password' : ''}\n              className={`${inputSpacingWithLabel} w-full overflow-hidden text-ellipsis whitespace-nowrap bg-transparent caret-input focus:outline-none ${!isInputFocus && !value && label && !isLabelOutside\n                  ? 'placeholder-transparent'\n                  : 'placeholder-ink-20'\n                } ${inputClassName}`}\n              type={type === 'password' ? passwordType : type}\n              value={value}\n              placeholder={placeholder}\n              onChange={onChange}\n              onBlur={(e) => {\n                if (onBlur) {\n                  onBlur(e);\n                }\n                setInputFocus(false);\n              }}\n              onFocus={(e) => {\n                if (onFocus) {\n                  onFocus(e);\n                }\n                setInputFocus(true);\n              }}\n              onKeyDown={onKeyDown}\n              onKeyUp={onKeyUp}\n              onMouseOver={(e) => {\n                if (onMouseOver) {\n                  onMouseOver(e);\n                }\n                setIsInputHover(true);\n              }}\n              onMouseLeave={(e) => {\n                if (onMouseLeave) {\n                  onMouseLeave(e);\n                }\n                setIsInputHover(false);\n              }}\n              disabled={isInputDisabled}\n              ref={inputRef}\n            />\n          )}\n\n          {symbol && (\n            <span className={`${inputSpacingWithLabel} ${symbolClassName}`}>\n              {symbol}\n            </span>\n          )}\n        </div>\n\n        {((!!value && resetValue) || !!icon || !!button) && (\n          <div className=\"z-10 flex justify-end items-center gap-x-[1.25rem]\">\n            {!!value && resetValue && (\n              <div\n                className={`${button || icon ? 'input-icon-seperator' : ''} ${isInputFocus || isInputHover ? 'opacity-100' : 'opacity-50'\n                  }`}\n                onClick={(e) => {\n                  if (resetValue) {\n                    resetValue();\n                    inputRef.current?.focus();\n                  }\n                }}\n              >\n                <Cancel className=\"w-[1.5rem] !fill-ink-60 cursor-pointer\" />\n              </div>\n            )}\n            {!!icon && (\n              <div className={`${button ? 'input-icon-seperator' : ''}`}>\n                <img\n                  className={`w-[1.5rem] cursor-pointer`}\n                  src={icon}\n                  alt=\"BotLambotrade\"\n                  onClick={handlePasswordShown}\n                />\n              </div>\n            )}\n            {!!button && <div className=\"py-[0.375rem]\">{button}</div>}\n          </div>\n        )}\n      </div>\n      {(!!helperText || !!helperTextEnd) && (\n        <div className={`px-3 pt-2 flex justify-between ${helperClassName}`}>\n          <p\n            className={`${isInputDisabled\n                ? 'text-ink-80'\n                : error\n                  ? 'text-red-100'\n                  : 'text-ink-80'\n              } text-sm ${helperTextClassName}`}\n          >\n            {helperText}\n          </p>\n          <p className={`text-ink-100 text-sm ${helperTextEndClassName}`}>\n            {helperTextEnd}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextInput;\n","import React, { FC } from 'react';\nimport { SnackbarContent, SnackbarKey, SnackbarMessage } from 'notistack';\nimport images from 'assets';\nimport { Cancel } from '@mui/icons-material';\n\nconst ICONS = {\n  success: images.toast.check,\n  warning: images.toast.warning,\n  error: images.toast.error,\n};\n\nconst TEXT_COLORS = {\n  success: 'text-green-100',\n  warning: 'text-yellow-100',\n  error: 'text-red-100',\n};\n\nconst TITLES = {\n  success: 'Thành công',\n  warning: 'Cảnh báo',\n  error: 'Thất bại',\n};\n\ninterface CustomSnackbarProps {\n  id: SnackbarKey;\n  message: SnackbarMessage;\n  variant?: 'success' | 'error' | 'warning';\n  closeSnackBar: () => void;\n}\n\nconst CustomSnackbar = React.forwardRef<HTMLDivElement, CustomSnackbarProps>(\n  ({ id, message, variant, closeSnackBar }, ref) => {\n    return (\n      <>\n        <div\n          className={`flex items-center justify-between gap-x-3 p-4 rounded-3xl w-[full] md:w-[25rem] transition-all bg-dropdown toast-in-right`}\n          key={id}\n          ref={ref}\n        >\n          <div className=\"flex items-center justify-between gap-x-3\">\n            <div className=\"flex-shrink-0 p-[0.625rem] rounded-2xl bg-ink-05\">\n              <img\n                className=\"w-8\"\n                src={variant && ICONS[variant]}\n                alt=\"BotLambotrade\"\n              />\n            </div>\n            <div>\n              <p\n                className={`mb-1 font-bold ${variant && TEXT_COLORS[variant]}`}\n              >\n                {variant && TITLES[variant]}\n              </p>\n              <p className=\"text-ink-80 text-sm\">{message}</p>\n            </div>\n          </div>\n          <button onClick={closeSnackBar}>\n            <Cancel className=\"fill-ink-100\" />\n          </button>\n        </div>\n      </>\n    );\n  }\n);\n\nexport default CustomSnackbar;\n","import CustomSnackbar from 'components/CustomSnackbar';\nimport { OptionsObject, useSnackbar } from 'notistack';\nimport { useCallback } from 'react';\n\nexport const useEnqueueSnackbar = () => {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const pushSnackbar = useCallback(\n    (\n      message: string,\n      // extend the default options object\n      options?: OptionsObject &\n        Partial<{ variant: 'success' | 'error' | 'warning' }>\n    ) => {\n      enqueueSnackbar(message, {\n        ...options,\n        content: (key) => {\n          // destructure the options we need from the extended options\n          // object, and provide a default case if we didn't provide any\n          const { variant } = options || { variant: undefined };\n          const handleCloseSnackbar = () => {\n            closeSnackbar(key);\n          };\n          return (\n            <CustomSnackbar\n              id={`${key}`}\n              message={message}\n              variant={variant || 'success'}\n              closeSnackBar={handleCloseSnackbar}\n            />\n          );\n        },\n      });\n    },\n    [closeSnackbar, enqueueSnackbar]\n  );\n\n  return pushSnackbar;\n};\n","import React, { FC, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\n\ntype BotTradeMethodTypeProps = {\n  isBotTradeBuySell: boolean;\n  setIsBotTradeBuySell: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst BotTradeMethodType: FC<BotTradeMethodTypeProps> = ({\n  isBotTradeBuySell,\n  setIsBotTradeBuySell,\n}) => {\n  // RESPONSIVE\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1224px)',\n  });\n  const isTablet = useMediaQuery({\n    query: '(min-width: 768px)',\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 767px)',\n  });\n\n  return (\n    <div\n      className={`flex items-center gap-4 mb-6 ${\n        isMobile && !isBotTradeBuySell\n          ? 'translate-x-[-4.8rem]'\n          : 'translate-x-[0]'\n      } transition-all`}\n    >\n      <div\n        className={`rounded-xl px-6 py-3 cursor-pointer ${\n          isBotTradeBuySell ? 'border-primary bg-primary-10' : 'bg-primary-05'\n        } whitespace-nowrap`}\n        onClick={() => {\n          setIsBotTradeBuySell(true);\n        }}\n      >\n        <p\n          className={`${\n            isBotTradeBuySell\n              ? 'bg-primary-100 bg-clip-text text-transparent font-semibold'\n              : 'text-ink-60 font-medium'\n          }`}\n        >\n          Xbot - Buy/Sell\n        </p>\n      </div>\n      <div\n        className={`px-6 py-3 rounded-xl cursor-pointer ${\n          !isBotTradeBuySell ? 'border-primary bg-primary-10' : 'bg-primary-05'\n        } whitespace-nowrap`}\n        onClick={() => {\n          setIsBotTradeBuySell(false);\n        }}\n      >\n        <p\n          className={`${\n            !isBotTradeBuySell\n              ? 'bg-primary-100 bg-clip-text text-transparent font-semibold'\n              : 'text-ink-60 font-medium'\n          }`}\n        >\n          Xbot - Bóng nước\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default BotTradeMethodType;\n","import React, { FC } from 'react';\n\ninterface TileProps {\n  isGold?: boolean;\n  isLast?: boolean;\n  className?: string;\n  textClassName?: string;\n  text: string;\n  rightIcon?: string;\n  rightIconAction?: () => void;\n}\n\nconst Tile: FC<TileProps> = ({\n  isGold = false,\n  isLast = false,\n  className = '',\n  textClassName = '',\n  text,\n  rightIcon,\n  rightIconAction,\n}) => {\n  return (\n    <div\n      className={`p-4 flex items-center justify-between rounded-tl-xl rounded-tr-xl ${\n        isGold ? 'bg-background-60' : ''\n      } ${className} ${!isLast ? 'border-b border-ink-10' : ''}`}\n    >\n      <p className={`text-ink-100 text-sm ${textClassName}`}>{text}</p>\n      {rightIcon && (\n        <img\n          className=\"w-[1.5rem] cursor-pointer\"\n          src={rightIcon}\n          alt=\"BotLambotrade\"\n          onClick={rightIconAction}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Tile;\n","import { CloseOutlined } from '@mui/icons-material';\nimport { ClickAwayListener, Tooltip } from '@mui/material';\nimport APIs from 'apis';\nimport images from 'assets';\nimport axios from 'axios';\nimport CustomModal from 'components/CustomModal';\nimport CustomNumberInput from 'components/CustomNumberInput';\nimport CustomSwitch from 'components/CustomSwitch';\nimport CustomValidateModel from 'components/CustomValidateModal';\nimport GoldButton from 'components/GoldButton';\nimport GreyButton from 'components/GreyButton';\nimport TextInput from 'components/TextInput';\nimport { useFormik } from 'formik';\nimport { useEnqueueSnackbar } from 'hooks/useEnqueueSnackbar';\nimport moment from 'moment';\nimport CopyTradeZoomSelectInput from 'pages/CopyTradeZoom/CopyTradeZoomSelectInput';\nimport React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport CurrencyInput from 'react-currency-input-field';\nimport { CurrencyInputOnChangeValues } from 'react-currency-input-field/dist/components/CurrencyInputProps';\nimport { useNavigate } from 'react-router-dom';\nimport ReactSwitch from 'react-switch';\nimport { Column, usePagination, useTable } from 'react-table';\nimport { useAppDispatch, useAppSelector } from 'stores/hooks';\nimport { userActions } from 'stores/userSlice';\nimport { BotAllData } from 'types/BotAllData';\nimport { BotBalance } from 'types/BotBalance';\nimport BotData from 'types/BotData';\nimport BotSettingUpdate from 'types/BotSettingUpdate';\nimport CustomValidateModelProps from 'types/CustomValidateProps';\nimport InputSelectOption from 'types/InputSelectOption';\nimport * as Yup from 'yup';\nimport { BotCopyTrade } from '../../types/BotCopyTrade';\nimport { ActionMeta, SingleValue } from 'react-select';\nimport SelectInput from 'components/SelectInput';\nimport ReactPaginate from 'react-paginate';\nimport convertToThreeDecimalPlaces from 'utils/ConvertToThreeDecimalPlaces';\nimport { useMediaQuery } from 'react-responsive';\nimport { animated, useSpring } from 'react-spring';\nimport BotTradeSettingButton from 'pages/BotTradeSetting/BotTradeSettingButton';\nimport { uiActions } from 'stores/uiSlice';\nimport { faker } from '@faker-js/faker';\nimport CustomButton from 'components/CustomButton';\nimport CustomRadio from 'components/CustomRadio';\nimport Tile from 'components/Tile';\nimport BotSignalPersonal, {\n  BotSignalPersonalResult,\n} from 'types/BotSignalPersonal';\nimport BotSignalPersonalUpsert from 'types/BotSignalPersonalUpsert';\n\ntype BotTradeMethodBuySellProps = {};\n\ninterface ListMasterCopyTradeSetting {\n  master?: string | number;\n}\n\ninterface ListFollowerCopyTradeSetting {\n  follower?: string | number;\n}\n\ninterface FormikValueType {\n  configName: string | undefined;\n  ownerType: string | undefined;\n  condition?: string;\n  conditions: Conditions;\n  isOnlyTrade: boolean | undefined;\n}\n\ntype Conditions = {\n  [key: string]: BubbleOptions;\n};\n\ntype BubbleOptions = {\n  [key: string]: any;\n};\n\ntype SelectedIdsType = {\n  [key: string]: boolean;\n};\n\ninterface TooltipToggle {\n  [x: string | number]: boolean;\n}\n\nconst PAGE_SIZE_OPTIONS: InputSelectOption[] = [\n  { value: 10, label: '10/page' },\n  { value: 20, label: '20/page' },\n  { value: 30, label: '30/page' },\n  { value: 40, label: '40/page' },\n];\n\nconst METHOD_OWN_TYPES: InputSelectOption[] = [\n  { value: 'all', label: 'Tất cả' },\n  { value: 'own', label: 'Phương pháp của tôi' },\n  { value: 'gifted', label: 'Phương pháp được tặng' },\n];\n\nconst PLUS_VALUES = [5, 10, 20, 50, 100, 'All'];\nconst MULTIPLY_VALUES = [2, 5, 10, 20, 40, 100];\nconst OPTIONS = [\n  {\n    value: 10,\n    name: 'Ten',\n  },\n  {\n    value: 15,\n    name: 'Fifteen',\n  },\n  {\n    value: 20,\n    name: 'Twenty',\n  },\n  {\n    value: 25,\n    name: 'Twenty-five',\n  },\n];\n\nconst INITIAL_BOT_BALANCE = {\n  balance: 1,\n  demo_balance: 1,\n  usdt_balance: 1,\n};\n\nconst INITIAL_SELECT_OPTIONS: InputSelectOption[] = [\n  {\n    value: '',\n    label: '',\n  },\n];\n\nconst INITIAL_SELECTED_OPTION: InputSelectOption = {\n  value: '',\n  label: '',\n};\n\nconst INITIAL_SELECTED_ACCOUNT_TYPE: InputSelectOption = {\n  value: 'LIVE',\n  label: 'Tài khoản LIVE',\n};\n\nconst INITIAL_FORMIK_VALUES: FormikValueType = {\n  configName: '',\n  ownerType: '',\n  condition: '',\n  conditions: {\n    '1': {\n      '1': [],\n    },\n  },\n  isOnlyTrade: false,\n};\n\nconst ACCOUNT_TYPES = [\n  {\n    value: 'DEMO',\n    label: 'Tài khoản DEMO',\n  },\n  {\n    value: 'LIVE',\n    label: 'Tài khoản LIVE',\n  },\n];\n\nexport interface ICopyTradeSettingFormik {\n  accountType: string;\n  email: string;\n  balance: number;\n  masterName: string;\n  amountPerOrder: number;\n  multiply: number;\n  takeProfit: number;\n  stopLoss: number;\n}\n\nconst INITIAL_BOT_PERSONAL_SIGNAL_RESULT: BotSignalPersonalResult = {\n  id: 0,\n  config_name: '',\n  owner_type: '',\n  config_type: '',\n  conditions: {\n    '1': {\n      '1': [],\n    },\n  },\n  fconditions: []\n};\n\nconst options: Intl.NumberFormatOptions = {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 3,\n  style: 'decimal',\n};\n\n// const generateFakeData = (): BotPersonalSignalResult[] => {\n//   return Array(5)\n//     .fill(0)\n//     .map((_, index) => ({\n//       id: faker.datatype.uuid(),\n//       type: index % 2 === 0 ? 'self' : 'gifted',\n//       number_of_conditions: Math.floor(1 + Math.random() * 5),\n//     }));\n// };\n\nconst DEFAULT_INDEX_OF_CONDITIONS = '1';\n\nconst BotTradeMethodBuySell: FC<BotTradeMethodBuySellProps> = () => {\n  const [currentTimer, setCurrentTimer] = useState(moment());\n  const [selectedIds, setSelectedIds] = useState<SelectedIdsType>({});\n  const [selectAll, setSelectAll] = useState(0);\n  const [isMasterNameFocus, setIsMasterNameFocus] = useState(false);\n  const [isTakeProfitFocus, setIsTakeProfitFocus] = useState(false);\n  const [isStopLossFocus, setIsStopLossFocus] = useState(false);\n  const [totalRecords, setTotalRecords] = useState(100);\n\n  // BOT\n  const [allBotDatas, setAllBotDatas] = useState<BotAllData[]>([]);\n  const [partnerBotDatas, setPartnerBotDatas] = useState<BotData[]>([]);\n  const [botBalance, setBotBalance] = useState<BotBalance>(INITIAL_BOT_BALANCE);\n  const [selectedAccountType, setSelectedAccountType] =\n    useState<InputSelectOption>(INITIAL_SELECTED_ACCOUNT_TYPE);\n  const [selectedBotAccount, setSelectedBotAccount] =\n    useState<InputSelectOption>(INITIAL_SELECTED_OPTION);\n  const [selectedMasterAccount, setSelectedMasterAccount] =\n    useState<InputSelectOption>(INITIAL_SELECTED_OPTION);\n  const [isMasterAccountValid, setIsMasterAccountValid] = useState(false);\n  const [accountOptions, setAccountOptions] = useState<InputSelectOption[]>([]);\n  const [allBotAccountOptions, setAllBotAccountOptions] = useState<\n    InputSelectOption[]\n  >([]);\n\n  // SETTINGS\n  const [botPersonalSignalData, setBotPersonalSignalData] =\n    useState<BotSignalPersonal>({\n      count: 0,\n      next: null,\n      previous: null,\n      results: [],\n    });\n  const [allBotPersonalSignalResults, setAllBotPersonalSignalResults] =\n    useState<BotSignalPersonalResult[]>([]);\n  const userData = useAppSelector((state) => state.user.user);\n  const [isDeletingByList, setIsDeletingByList] = useState(false);\n\n  // MODAL\n  const [isUpsertModalOpen, setIsUpsertModalOpen] = useState(false);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [isConditionPopupOpen, setIsConditionPopupOpen] = useState(false);\n  const [isGiftPopupOpen, setIsGiftPopupOpen] = useState(false);\n  const [isValidAmountPopupOpen, setIsValidAmountPopupOpen] = useState(false);\n\n  // SEARCH AND FILTER\n  const [searchInput, setSearchInput] = useState('');\n  const [selectedMethodOwnType, setSelectedMethodOwnType] =\n    useState<InputSelectOption>(METHOD_OWN_TYPES[0]);\n\n  // PAGINATION\n  const [selectedPageSizeOption, setSelectedPageSizeOption] =\n    useState<InputSelectOption>(PAGE_SIZE_OPTIONS[0]);\n  const [page, setPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(10);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const [isPrevHover, setIsPrevHover] = useState(false);\n  const [isNextHover, setIsNextHover] = useState(false);\n\n  const [modalAttributes, setModalAttributes] =\n    useState<CustomValidateModelProps>({\n      isOpen: false,\n      icon: '',\n      headingMessage: '',\n      message: '',\n      buttonMessage: '',\n      handleOpen: () => {},\n      handleClose: () => {},\n    });\n\n  // ! FORMIK RELATED STATES AND BUY SELL\n  const [formikValues, setFormikValues] = useState<FormikValueType>(\n    INITIAL_FORMIK_VALUES\n  );\n  const [selectedBotPersonalSignalResult, setSelectedBotPersonalSignalResult] =\n    useState<BotSignalPersonalResult>(INITIAL_BOT_PERSONAL_SIGNAL_RESULT);\n  const [isEditing, setIsEditing] = useState(false);\n  const [giftUsername, setGiftUsername] = useState({\n    value: '',\n    error: null,\n    touched: false,\n  });\n  const [conditionError, setConditionError] = useState('');\n\n  // ! INITIAL PARTNER BOT USEFFECT\n  const [isPartnerBotInitialized, setIsPartnerBotInitialized] = useState(false);\n  const animationUpsertModalMobile = useSpring({\n    to: {\n      opacity: isUpsertModalOpen ? 1 : 0,\n      transform: isUpsertModalOpen ? 'translateX(0%)' : 'translateX(-100%)',\n    },\n  });\n\n  // ! RESPONSIVE\n  const isLargeDesktop = useMediaQuery({\n    query: '(min-width: 1368px)',\n  });\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1224px)',\n  });\n  const isTablet = useMediaQuery({\n    query: '(min-width: 768px)',\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 767px)',\n  });\n\n  const dispatch = useAppDispatch();\n  const enqueueSnackbar = useEnqueueSnackbar();\n  const navigate = useNavigate();\n  const scrollElement = useRef<HTMLDivElement>(null);\n\n  const data = React.useMemo<BotSignalPersonalResult[]>(\n    () => allBotPersonalSignalResults,\n    [allBotPersonalSignalResults]\n  );\n\n  // Tooltips\n  const [isTooltipOpen, setIsTooltipOpen] = useState<TooltipToggle>({});\n\n  const handleTooltipOpen = useCallback((rowIndex: string | number) => {\n    console.log('handleTooltipOpen');\n    if (!isTooltipOpen[rowIndex]) {\n      setIsTooltipOpen((prevState) => ({\n        [rowIndex]: true,\n      }));\n    }\n  }, []);\n\n  const handleTooltipClose = (rowIndex: string | number) => {\n    console.log('handleTooltipClose');\n    if (isTooltipOpen[rowIndex]) {\n      setIsTooltipOpen((prevState) => ({\n        [rowIndex]: false,\n      }));\n    }\n  };\n\n  const handleTooltipToggle = (rowIndex: string | number) => {\n    setIsTooltipOpen((prevState) => ({\n      [rowIndex]: !prevState[rowIndex],\n    }));\n  };\n\n  const onSelectedAccountTypeChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => {\n    setSelectedAccountType(option);\n    dispatch(userActions.updateSelectedAccountType(option));\n  };\n\n  const onSelectedBotAccountChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => {\n    setSelectedBotAccount(option);\n    dispatch(userActions.updateSelectedBotAccount(option));\n  };\n\n  const onSelectedMasterChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => {\n    setSelectedMasterAccount(option);\n  };\n\n  // FUNCTIONS FOR MODAL\n  const showIsDevelopingModal = () => {\n    dispatch(uiActions.updateIsModalOpen(true));\n  };\n\n  const handleOpenUpsertModal = () => {\n    setIsUpsertModalOpen(true);\n  };\n\n  const handleCloseUpsertModal = () => {\n    setIsUpsertModalOpen(false);\n    formikUpsert.resetForm();\n    setIsMasterAccountValid(false);\n    setFormikValues(INITIAL_FORMIK_VALUES);\n    setSelectedAccountType(INITIAL_SELECTED_ACCOUNT_TYPE);\n    setSelectedBotAccount(INITIAL_SELECTED_OPTION);\n    setConditionError('');\n    // setSelectedMasterAccount(INITIAL_SELECTED_OPTION);\n  };\n\n  const handleOpenPopupModal = () => {\n    setIsPopupOpen(true);\n  };\n\n  const handleClosePopupModal = () => {\n    setIsPopupOpen(false);\n  };\n\n  const handleOpenGiftPopupModal = () => {\n    setIsGiftPopupOpen(true);\n  };\n\n  const handleCloseGiftPopupModal = () => {\n    setIsGiftPopupOpen(false);\n  };\n\n  const handleOpenConditionPopupModal = () => {\n    setIsConditionPopupOpen(true);\n  };\n\n  const handleCloseConditionPopupModal = () => {\n    setIsConditionPopupOpen(false);\n  };\n\n  const handleOpenAccountTradePopupModal = () => {\n    setModalAttributes((prev) => ({\n      ...prev,\n      isOpen: true,\n    }));\n  };\n\n  const handleCloseAccountTradePopupModal = () => {\n    setModalAttributes((prev) => ({\n      ...prev,\n      isOpen: false,\n    }));\n    navigate('/account_trade');\n  };\n\n  // FUNCTIONS FOR INPUT AMOUNT\n  const handleAmount = (\n    value: string | undefined,\n    fieldName: string,\n    values: CurrencyInputOnChangeValues | undefined\n  ): void => {\n    // const valueToSet = value === undefined || +value <= 0 ? 0 : value || ' ';\n    const valueToSet = value === undefined ? '' : value;\n    const convertedValue = convertToThreeDecimalPlaces(valueToSet);\n    formikUpsert.setFieldValue(fieldName, convertedValue);\n  };\n\n  const handleAmountMinusOne = (value: number, fieldName: string) => {\n    if (value - 1 <= 1) return;\n    const convertedValue = convertToThreeDecimalPlaces(+value - 1);\n    formikUpsert.setFieldValue(fieldName, convertedValue);\n  };\n\n  const handleOrderAmountPlusOne = (value: number, fieldName: string) => {\n    const convertedValue = convertToThreeDecimalPlaces(+value + 1);\n    formikUpsert.setFieldValue(fieldName, convertedValue);\n  };\n\n  // FUNCTIONS FOR CHECKBOX\n  const toggleRow = useCallback(\n    (id: string | number) => {\n      const newSelected = { ...selectedIds };\n      newSelected[id] = !newSelected[id];\n      console.log(newSelected);\n      setSelectedIds(newSelected);\n      const totalSelected = Object.entries(newSelected).reduce(\n        (prev, value) => {\n          if (value[1]) return prev + 1;\n          return prev;\n        },\n        0\n      );\n      if (totalSelected >= data.length) {\n        setSelectAll(1);\n      } else {\n        setSelectAll(0);\n      }\n    },\n    [data.length, selectedIds]\n  );\n\n  const toggleAllRow = useCallback(() => {\n    let newSelected: SelectedIdsType = {};\n\n    if (selectAll === 0) {\n      data.forEach((x) => {\n        newSelected[x.id] = true;\n      });\n    }\n    setSelectedIds(newSelected);\n    setSelectAll((prev) => (prev === 0 ? 1 : 0));\n  }, [data, selectAll]);\n\n  // COMMON FUNCTIONS\n  const getAllBotSignalBuySellSettings = useCallback(\n    (page: number) => {\n      if (partnerBotDatas.length > 0) {\n        axios\n          .get(`${APIs.botSignalBuySellList}`, {\n            params: {\n              page,\n              page_size: selectedPageSizeOption.value,\n            },\n          })\n          .then((res) => {\n            const data: BotSignalPersonal = res.data;\n            setBotPersonalSignalData(data);\n            setAllBotPersonalSignalResults(data.results);\n            if (data.count != null && selectedPageSizeOption.value != null) {\n              setTotalPages(\n                Math.ceil(data.count / +selectedPageSizeOption.value)\n              );\n            }\n          })\n          .catch(() => {\n            enqueueSnackbar('Không thể lấy bot settings!', {\n              variant: 'error',\n            });\n          });\n      }\n    },\n    [enqueueSnackbar, partnerBotDatas, selectedPageSizeOption]\n  );\n\n  const deleteSettingById = () => {\n    axios\n      .delete(\n        `${APIs.deleteBotSignalPersonal}${selectedBotPersonalSignalResult.id}`\n      )\n      .then((res) => {\n        getAllBotSignalBuySellSettings(page + 1);\n        setSelectedIds({});\n        setSelectAll(0);\n        enqueueSnackbar('Xoá cấu hình thành công!', { variant: 'success' });\n      })\n      .catch(() => {\n        enqueueSnackbar('Không thể xoá cấu hình!', { variant: 'error' });\n      });\n  };\n\n  const deleteSettingByListIds = () => {\n    // ENTRY: string: boolean\n    const selectedListIds = Object.entries(selectedIds)\n      .filter((selected) => selected[1])\n      .map((selected) => selected[0]);\n    axios\n      .delete(`${APIs.deleteBotSignalPersonal}${selectedListIds}`)\n      .then((res) => {\n        getAllBotSignalBuySellSettings(page + 1);\n        setSelectedIds({});\n        setSelectAll(0);\n        enqueueSnackbar('Xoá cấu hình thành công!', { variant: 'success' });\n      })\n      .catch(() => {\n        enqueueSnackbar('Xoá cấu hình thất bại!', { variant: 'error' });\n      });\n  };\n\n  const updateModelData = useCallback(\n    (botPersonalSignalResult: BotSignalPersonalResult) => {\n      // UPDATE FORM MODAL\n      const updatedFormikValues: FormikValueType = {\n        configName: botPersonalSignalResult.config_name,\n        ownerType: botPersonalSignalResult.owner_type,\n        conditions: botPersonalSignalResult.conditions,\n        isOnlyTrade: botPersonalSignalResult.is_onlytrade,\n      };\n\n      console.log(updatedFormikValues);\n      setFormikValues(updatedFormikValues);\n    },\n    []\n  );\n\n  // SEARCH AND FILTER\n  const handleSelectMethodOwnType = (\n    option: SingleValue<InputSelectOption>,\n    actionMeta: ActionMeta<InputSelectOption>\n  ) => {\n    if (option != null) {\n      setSelectedMethodOwnType(option);\n    }\n  };\n\n  // PAGINATION FUNCTION\n  const handleSelectPageSize = (\n    option: SingleValue<InputSelectOption>,\n    actionMeta: ActionMeta<InputSelectOption>\n  ) => {\n    if (option != null) {\n      setSelectedPageSizeOption(option);\n      setPage(0);\n      getAllBotSignalBuySellSettings(1);\n    }\n  };\n\n  const handlePageChange = useCallback(\n    ({ selected }: { selected: number }) => {\n      console.log(selected);\n      const page = selected + 1;\n      setPage(selected);\n      getAllBotSignalBuySellSettings(page);\n    },\n    [getAllBotSignalBuySellSettings]\n  );\n\n  // TABLE\n  const columns = React.useMemo<Column<BotSignalPersonalResult>[]>(\n    () => [\n      {\n        id: 'checkbox',\n        accessor: 'checkbox',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex justify-center items-center\">\n              <input\n                type=\"checkbox\"\n                className=\"checkbox\"\n                checked={selectedIds[original.id] === true}\n                onChange={(e) => toggleRow(original.id)}\n              />\n            </div>\n          );\n        },\n        Header: () => {\n          return (\n            <div className=\"flex justify-center items-center\">\n              <input\n                type=\"checkbox\"\n                className=\"checkbox text-center\"\n                checked={selectAll === 1}\n                ref={(input) => {\n                  if (input) {\n                    input.indeterminate = selectAll === 2;\n                  }\n                }}\n                onChange={() => toggleAllRow()}\n              />\n            </div>\n          );\n        },\n        sortable: false,\n        width: 45,\n      },\n      {\n        Header: () => {\n          return <div className=\"text-left\">Tên phương pháp</div>;\n        },\n        accessor: 'config_name',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex items-center gap-x-1\">\n              <p className=\"text-sm text-ink-100\">{original.config_name}</p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => {\n          return <div className=\"text-center\">Sở hữu phương pháp</div>;\n        },\n        accessor: 'owner_type',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          const isPersonal = original.owner_type === 'personal';\n          return (\n            <div className=\"flex justify-center gap-x-1\">\n              <p\n                className={`px-2 ${\n                  isPersonal\n                    ? 'bg-primary-100 text-background-80'\n                    : 'bg-green-100 text-ink-100'\n                } rounded-3xl text-ink-100 text-xs`}\n              >\n                {isPersonal ? 'Cá nhân' : 'Được tặng'}\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => {\n          return <div className=\"text-left\">Điều kiện</div>;\n        },\n        accessor: 'conditions',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex gap-x-1\">\n              <p\n                className=\"underline-primary bg-primary-100 bg-clip-text text-transparent text-sm cursor-pointer\"\n                onClick={() => {\n                  handleOpenConditionPopupModal();\n                  setSelectedBotPersonalSignalResult(original);\n                }}\n              >\n                {\n                  original.conditions[DEFAULT_INDEX_OF_CONDITIONS][\n                    DEFAULT_INDEX_OF_CONDITIONS\n                  ].length\n                }{' '}\n                điều kiện\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        accessor: 'actions',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex justify-center gap-x-1 w-[1.5rem]\">\n              <Tooltip\n                componentsProps={{\n                  tooltip: {\n                    className: '!px-0 !py-3 !bg-dropdown !rounded-xl',\n                  },\n                  arrow: {\n                    className:\n                      '!w-[1rem] !translate-x-[9.6875rem] !before:bg-dropdown',\n                    sx: {\n                      '&::before': {\n                        background: 'var(--bg-dropdown)',\n                      },\n                    },\n                  },\n                }}\n                title={\n                  <>\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={(e) => {\n                        console.log(original);\n                        e.stopPropagation();\n                        handleOpenGiftPopupModal();\n                        handleTooltipClose(original.id);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={images.table.gift_gold}\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">Tặng</p>\n                    </div>\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={(e) => {\n                        console.log(original);\n                        e.stopPropagation();\n                        handleOpenUpsertModal();\n                        setIsEditing(true);\n                        updateModelData(original);\n                        setSelectedBotPersonalSignalResult(original);\n                        handleTooltipClose(original.id);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={images.table.edit}\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">Chỉnh sửa</p>\n                    </div>\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={() => {\n                        handleOpenPopupModal();\n                        setIsDeletingByList(false);\n                        setSelectedBotPersonalSignalResult(original);\n                        handleTooltipClose(original.id);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={images.table.delete}\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">Xoá cấu hình</p>\n                    </div>\n                  </>\n                }\n                arrow\n                open={isTooltipOpen[original.id]}\n                onOpen={() => {\n                  handleTooltipOpen(original.id);\n                }}\n                onClose={() => {\n                  handleTooltipClose(original.id);\n                }}\n                disableHoverListener={!isDesktop}\n                disableFocusListener={!isDesktop}\n                disableTouchListener={!isDesktop}\n                // onClick={() => {\n                //   handleTooltipToggle(original.id);\n                // }}\n                placement=\"bottom-end\"\n                enterTouchDelay={0}\n                leaveTouchDelay={20000}\n              >\n                <img\n                  className=\"cursor-pointer\"\n                  src={images.table.actions}\n                  alt=\"BotLambotrade\"\n                  onClick={(e) => {\n                    handleTooltipToggle(original.id);\n                  }}\n                />\n              </Tooltip>\n            </div>\n          );\n        },\n      },\n    ],\n    [\n      handleTooltipOpen,\n      isDesktop,\n      isTooltipOpen,\n      selectAll,\n      selectedIds,\n      toggleAllRow,\n      toggleRow,\n    ]\n  );\n\n  const tableInstance = useTable({ columns, data }, usePagination);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    tableInstance;\n\n  // FORMIK\n  const formikUpsert = useFormik({\n    initialValues: formikValues,\n    validateOnChange: false,\n    enableReinitialize: true,\n    validationSchema: Yup.object({\n      configName: Yup.string()\n        .required('Vui lòng nhập tên phương pháp')\n        .max(50, 'Vui lòng nhập tên cấu hình bot dưới 50 ký tự')\n        .matches(\n          /^[a-zA-ZàáãạảăắằẳẵặâấầẩẫậèéẹẻẽêềếểễệđìíĩỉịòóõọỏôốồổỗộơớờởỡợùúũụủưứừửữựỳỵỷỹýÀÁÃẠẢĂẮẰẲẴẶÂẤẦẨẪẬÈÉẸẺẼÊỀẾỂỄỆĐÌÍĨỈỊÒÓÕỌỎÔỐỒỔỖỘƠỚỜỞỠỢÙÚŨỤỦƯỨỪỬỮỰỲỴỶỸÝ][_-a-zA-Z0-9àáãạảăắằẳẵặâấầẩẫậèéẹẻẽêềếểễệđìíĩỉịòóõọỏôốồổỗộơớờởỡợùúũụủưứừửữựỳỵỷỹýÀÁÃẠẢĂẮẰẲẴẶÂẤẦẨẪẬÈÉẸẺẼÊỀẾỂỄỆĐÌÍĨỈỊÒÓÕỌỎÔỐỒỔỖỘƠỚỜỞỠỢÙÚŨỤỦƯỨỪỬỮỰỲỴỶỸÝ ]*$/gi,\n          'Cấu hình bot phải bắt đầu bằng chữ và không chứa ký tự đặc biệt'\n        ),\n    }),\n    onSubmit: async (values, helpers) => {\n      console.log(values);\n      if (\n        values.conditions[DEFAULT_INDEX_OF_CONDITIONS][\n          DEFAULT_INDEX_OF_CONDITIONS\n        ].length === 0\n      ) {\n        setConditionError('Vui lòng nhập ít nhất một điều kiện');\n        return;\n      }\n\n      if (isEditing) {\n        // UPDATE\n        const updateSignalPersonalData: BotSignalPersonalUpsert = {\n          config_name: values.configName,\n          owner_type: selectedBotPersonalSignalResult.owner_type,\n          config_type: selectedBotPersonalSignalResult.config_type,\n          conditions: values.conditions,\n          is_onlytrade: values.isOnlyTrade,\n        };\n        axios\n          .patch(\n            `${APIs.updateBotSignalPersonal}${selectedBotPersonalSignalResult.id}/`,\n            updateSignalPersonalData\n          )\n          .then(() => {\n            getAllBotSignalBuySellSettings(page + 1);\n            enqueueSnackbar('Cập nhập cấu hình thành công!', {\n              variant: 'success',\n            });\n            handleCloseUpsertModal();\n          })\n          .catch((err) => {\n            enqueueSnackbar(\n              `${\n                err.data\n                  ? JSON.stringify(err.data)\n                  : 'Cập nhập cấu hình thất bại!'\n              }`,\n              { variant: 'error' }\n            );\n          });\n      } else {\n        // INSERT\n        const createSignalPersonalData: BotSignalPersonalUpsert = {\n          config_name: values.configName,\n          owner_type: 'personal',\n          config_type: 'buysell',\n          conditions: values.conditions,\n          is_onlytrade: values.isOnlyTrade,\n        };\n        axios\n          .post(APIs.createBotSignalPersonal, createSignalPersonalData)\n          .then(() => {\n            getAllBotSignalBuySellSettings(page + 1);\n            enqueueSnackbar('Tạo cấu hình thành công!', {\n              variant: 'success',\n            });\n            handleCloseUpsertModal();\n          })\n          .catch((err) => {\n            enqueueSnackbar(\n              `${\n                err.data ? JSON.stringify(err.data) : 'Tạo cấu hình thất bại!'\n              }`,\n              { variant: 'error' }\n            );\n          });\n      }\n    },\n  });\n\n  // BOT SELECT\n  const getAllAccounts = useCallback(() => {\n    axios\n      .get(APIs.allAccounts)\n      .then((res) => {\n        const data = res.data;\n        setAllBotDatas(data);\n      })\n      .catch(() => {\n        // const notification = {\n        //   id: Math.floor(Math.random() * 101 + 1),\n        //   title: 'Thất bại',\n        //   description: 'Không thể lấy tài khoản master',\n        //   backgroundColor: 'text-red-100',\n        //   icon: images.toast.error,\n        // };\n        // dispatch(uiActions.showNotifications(notification));\n        enqueueSnackbar('Không thể lấy tài khoản master', { variant: 'error' });\n      });\n  }, [enqueueSnackbar]);\n\n  const getAllPartnerBots = useCallback(() => {\n    axios\n      .get(APIs.partnerAccount)\n      .then((res) => {\n        const datas: BotData[] = res.data;\n        const partnerBotDatas = datas.filter(\n          (data) => data.status === 'active'\n        );\n        setPartnerBotDatas(partnerBotDatas);\n      })\n      .catch((err) => {\n        // const notification = {\n        //   id: Math.floor(Math.random() * 101 + 1),\n        //   title: 'Thất bại',\n        //   description: 'Không thể lấy bot datas',\n        //   backgroundColor: 'text-red-100',\n        //   icon: images.toast.error,\n        // };\n        // dispatch(uiActions.showNotifications(notification));\n        enqueueSnackbar('Không thể lấy bot datas', { variant: 'error' });\n      });\n  }, [enqueueSnackbar]);\n\n  const getBalance = useCallback(\n    (id: number | string) => {\n      axios\n        .get(`${APIs.balanceById}${id}/`)\n        .then((res) => {\n          const data: BotBalance = res.data;\n          setBotBalance(data);\n        })\n        .catch(() => {\n          enqueueSnackbar('Không thể lấy được số dư ví', { variant: 'error' });\n        });\n    },\n    [enqueueSnackbar]\n  );\n\n  const reloadDemoBalance = useCallback(\n    (id: number | string) => {\n      axios\n        .get(`${APIs.reloadDemoBalance}${id}/`)\n        .then((res) => {\n          enqueueSnackbar('Đặt lại số dư ví DEMO thành công!', {\n            variant: 'success',\n          });\n          getBalance(selectedBotAccount.value);\n        })\n        .catch(() => {\n          enqueueSnackbar('Đặt lại số dư ví DEMO thất bại!', {\n            variant: 'error',\n          });\n        });\n    },\n    [enqueueSnackbar, getBalance, selectedBotAccount.value]\n  );\n\n  const convertPartnerBotsToPartnerAccountOptions = useCallback(() => {\n    if (partnerBotDatas && partnerBotDatas.length > 0) {\n      const accountOptions = partnerBotDatas.map((botData) => ({\n        value: botData.id,\n        label: botData.botname,\n      }));\n      setAccountOptions(accountOptions);\n    }\n  }, [partnerBotDatas]);\n\n  const convertAllPartnerBotsToPartnerAccountOptions = useCallback(() => {\n    if (allBotDatas && allBotDatas.length > 0) {\n      const allBotAccountOptions = allBotDatas.map((botData) => ({\n        value: botData.id,\n        label: botData.username,\n      }));\n      setAllBotAccountOptions(allBotAccountOptions);\n    }\n  }, [allBotDatas]);\n\n  useEffect(() => {\n    getAllPartnerBots();\n    getAllAccounts();\n  }, [getAllAccounts, getAllPartnerBots]);\n\n  useEffect(() => {\n    console.log('HERE');\n    if (partnerBotDatas && partnerBotDatas.length > 0) {\n      if (selectedAccountType.value === 'LIVE' && !isPartnerBotInitialized) {\n        getBalance(partnerBotDatas[0].id);\n        const firstBotOption = {\n          value: partnerBotDatas[0].id,\n          label: partnerBotDatas[0].botname,\n        };\n        setSelectedBotAccount(firstBotOption);\n        setIsPartnerBotInitialized(true);\n        dispatch(userActions.updateSelectedBotAccount(firstBotOption));\n      } else if (selectedBotAccount.value) {\n        getBalance(selectedBotAccount.value);\n      }\n\n      convertPartnerBotsToPartnerAccountOptions();\n      convertAllPartnerBotsToPartnerAccountOptions();\n    }\n  }, [\n    partnerBotDatas,\n    convertPartnerBotsToPartnerAccountOptions,\n    getBalance,\n    selectedAccountType,\n    selectedBotAccount.value,\n    convertAllPartnerBotsToPartnerAccountOptions,\n    dispatch,\n    isPartnerBotInitialized,\n  ]);\n\n  useEffect(() => {\n    getAllBotSignalBuySellSettings(page + 1);\n  }, [getAllBotSignalBuySellSettings, page]);\n\n  // useEffect(() => {\n  //   const getData = setTimeout(() => {\n  //     if (formikUpsert.values.username !== '') {\n  //       axios\n  //         .get(`${APIs.partnerSearch}${formikUpsert.values.username}/`)\n  //         .then((response) => {\n  //           console.log(response.data);\n  //           if (response.data && response.data?.length > 0) {\n  //             setIsMasterAccountValid(true);\n  //             formikUpsert.setFieldValue('master', response.data.id);\n  //             // formikUpsert.setFieldValue('masterName', response.data.id);\n  //           } else {\n  //             setIsMasterAccountValid(false);\n  //           }\n  //         })\n  //         .catch((err) => {\n  //           setIsMasterAccountValid(false);\n  //         });\n  //     }\n  //   }, 500);\n\n  //   return () => clearTimeout(getData);\n  // }, [formikUpsert.values.username]);\n\n  const formikConditionsArray = formikUpsert.values.conditions[\n    DEFAULT_INDEX_OF_CONDITIONS\n  ][DEFAULT_INDEX_OF_CONDITIONS] as string[];\n\n  const selectedConditionsArray = selectedBotPersonalSignalResult.conditions[\n    DEFAULT_INDEX_OF_CONDITIONS\n  ][DEFAULT_INDEX_OF_CONDITIONS] as string[];\n\n  return (\n    <>\n      <div className=\"h-fit mb-6 bg-background-80 rounded-3xl\">\n        <div className=\"p-6 border-b border-ink-10 flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n          <h1 className=\"text-xl text-ink-100 font-semibold\">\n            Danh sách cấu hình {isMobile && <br />} phương pháp đã tạo\n          </h1>\n          <button\n            className=\"px-3 py-[0.625rem] w-full md:w-auto rounded-xl flex justify-center items-center gap-[0.625rem] bg-primary-100\"\n            onClick={() => {\n              if (partnerBotDatas.length === 0) {\n                setModalAttributes((prev) => ({\n                  ...prev,\n                  isOpen: true,\n                  icon: images.copy.account_not_integrate,\n                  headingMessage: 'Bạn chưa liên kết tài khoản',\n                  message: (\n                    <>\n                      Liên kết tài khoản ngay để thực hiện giao dịch cùng đội\n                      ngũ chuyên gia của AI BotTrade\n                    </>\n                  ),\n                  buttonMessage: 'Liên kết tài khoản',\n                  handleOpen: handleOpenAccountTradePopupModal,\n                  handleClose: handleCloseAccountTradePopupModal,\n                }));\n                return;\n              }\n              handleOpenUpsertModal();\n              setIsEditing(false);\n            }}\n          >\n            <img src={images.copy.plus} alt=\"BotLambotrade\" />\n            <p className=\"bg-background-100 bg-clip-text text-transparent font-semibold\">\n              Thêm mới\n            </p>\n          </button>\n        </div>\n        {allBotPersonalSignalResults.length === 0 && (\n          <div className=\"py-[5rem] flex flex-col justify-center items-center gap-y-6\">\n            <img\n              className=\"w-[10.25rem]\"\n              src={images.copy.empty}\n              alt=\"BotLambotrade\"\n            />\n            <p className=\"text-ink-60\">\n              Danh sách cấu hình phương pháp đã tạo trống\n            </p>\n          </div>\n        )}\n        {allBotPersonalSignalResults.length > 0 && (\n          <div className=\"p-6 flex flex-col gap-y-6\">\n            <div className=\"flex flex-col md:flex-row items-center gap-4\">\n              {/* SEARCH */}\n              <TextInput\n                fullWidth={true}\n                name=\"search\"\n                id=\"search\"\n                type=\"text\"\n                value={searchInput}\n                onChange={(e) => {\n                  setSearchInput(e.target.value);\n                }}\n                resetValue={() => {\n                  setSearchInput('');\n                }}\n                placeholder=\"Tìm kiếm\"\n                searchIcon={images.table.search}\n                searchIconClassName=\"!w-[1.25rem]\"\n                containerClassName=\"w-full md:w-[21.375rem]\"\n                inputClassName=\"!py-2 text-sm\"\n              />\n\n              {/* HÌNH THỨC SỞ HƯU PHƯƠNG PHÁP */}\n              <SelectInput\n                value={selectedMethodOwnType}\n                onChange={handleSelectMethodOwnType}\n                fullWidth={!isDesktop && !isTablet}\n                inputClassName=\"!py-2 !pr-8 text-sm w-full md:w-[21.375rem]\"\n                indicatorContainerClassName=\"!right-3\"\n                indicatorContainerIconClassName=\"!w-[1rem]\"\n                // menuPortalClassName={`min-w-[10.25rem] ${\n                //   isMobile ? 'translate-x-[-3.2rem]' : ''\n                // }`}\n                name=\"select\"\n                options={METHOD_OWN_TYPES}\n              />\n            </div>\n\n            {Object.values(selectedIds).filter((value) => value === true)\n              .length > 0 && (\n              <div className=\"px-4 py-3 bg-ink-05 rounded-xl flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n                <p className=\"text-ink-100 font-semibold\">\n                  {`Đã chọn ${\n                    Object.values(selectedIds).filter((value) => value === true)\n                      .length\n                  }`}\n                </p>\n                <div className=\"grid grid-cols-2 md:flex items-center justify-center gap-4\">\n                  <BotTradeSettingButton\n                    icon={images.bot.delete_gold}\n                    iconHover={images.bot.delete}\n                    classNameHover=\"background-animation\"\n                    onClick={() => {\n                      setIsDeletingByList(true);\n                      handleOpenPopupModal();\n                    }}\n                  >\n                    Xoá\n                  </BotTradeSettingButton>\n                  <BotTradeSettingButton\n                    icon={images.bot.reload_gold}\n                    iconHover={images.bot.reload}\n                    classNameHover=\"background-animation\"\n                    onClick={() => {\n                      showIsDevelopingModal();\n                      // resetAllCurrent();\n                    }}\n                  >\n                    Tặng\n                  </BotTradeSettingButton>\n                </div>\n              </div>\n            )}\n\n            <div\n              className={`border border-ink-05 rounded-2xl w-full ${\n                !isLargeDesktop ? 'overflow-x-scroll border-collapse' : ''\n              }`}\n            >\n              <table className=\"w-full\" {...getTableProps()}>\n                <thead>\n                  {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                      {headerGroup.headers.map((column) => (\n                        <th\n                          className={`p-4 last:w-[1%] whitespace-nowrap 2xl:whitespace-normal last:whitespace-nowrap bg-primary-05 first-of-type:rounded-tl-2xl last-of-type:rounded-tr-2xl text-sm text-ink-100 font-normal`}\n                          {...column.getHeaderProps()}\n                        >\n                          {column.render('Header')}\n                        </th>\n                      ))}\n                    </tr>\n                  ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                  {rows.map((row) => {\n                    prepareRow(row);\n                    return (\n                      <tr\n                        className={`border-b border-ink-10 last:border-0 whitespace-nowrap text-ellipsis`}\n                        {...row.getRowProps()}\n                      >\n                        {row.cells.map((cell) => (\n                          <td\n                            className=\"p-4 last:w-[1%] last:whitespace-nowrap\"\n                            {...cell.getCellProps()}\n                          >\n                            {cell.render('Cell')}\n                          </td>\n                        ))}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n\n            {/* PAGINATION */}\n            <div\n              className={`flex flex-col justify-center items-end md:flex-row md:justify-end md:items-center gap-2`}\n            >\n              <div>\n                <SelectInput\n                  menuRef={menuRef}\n                  value={selectedPageSizeOption}\n                  onChange={handleSelectPageSize}\n                  inputClassName=\"!py-2 !pr-8 text-sm\"\n                  indicatorContainerClassName=\"!right-3\"\n                  indicatorContainerIconClassName=\"!w-[1rem]\"\n                  menuPortalClassName={`min-w-[10.25rem] ${\n                    isMobile ? 'translate-x-[-3.2rem]' : ''\n                  }`}\n                  name=\"select\"\n                  options={PAGE_SIZE_OPTIONS}\n                />\n              </div>\n\n              <ReactPaginate\n                breakLabel=\"...\"\n                onPageChange={handlePageChange}\n                marginPagesDisplayed={isMobile ? 2 : 3}\n                pageCount={totalPages}\n                previousLabel={\n                  <div\n                    onMouseLeave={() => {\n                      setIsPrevHover(false);\n                    }}\n                    onMouseEnter={() => {\n                      setIsPrevHover(true);\n                    }}\n                    className=\"p-[0.375rem] border-input-ink before:rounded-lg\"\n                  >\n                    {isPrevHover ? (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_left_arrow_gold}\n                        alt=\"BotLambotrade\"\n                      />\n                    ) : (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_left_arrow}\n                        alt=\"BotLambotrade\"\n                      />\n                    )}\n                  </div>\n                }\n                nextLabel={\n                  <div\n                    onMouseLeave={() => {\n                      setIsNextHover(false);\n                    }}\n                    onMouseEnter={() => {\n                      setIsNextHover(true);\n                    }}\n                    className=\"p-[0.375rem] border-input-ink before:rounded-lg\"\n                  >\n                    {isNextHover ? (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_right_arrow_gold}\n                        alt=\"BotLambotrade\"\n                      />\n                    ) : (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_right_arrow}\n                        alt=\"BotLambotrade\"\n                      />\n                    )}\n                  </div>\n                }\n                forcePage={page}\n                // pageClassName=\"py-[0.3125rem] px-3 border-input-ink before:rounded-lg cursor-pointer\"\n                pageLinkClassName=\"page-link relative z-10 py-[0.3125rem] px-3 border-input-ink before:rounded-lg cursor-pointer\"\n                previousClassName=\"page-item flex\"\n                previousLinkClassName=\"page-link\"\n                nextClassName=\"page-item flex\"\n                nextLinkClassName=\"page-link relative z-10\"\n                breakClassName=\"page-item py-[0.375rem] px-3 border-input-ink before:rounded-lg cursor-pointer\"\n                breakLinkClassName=\"page-link z-10\"\n                containerClassName=\"flex items-center gap-x-2 text-ink-80 text-sm\"\n                activeClassName=\"pagination-active border-primary before:rounded-lg\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* UPSERT MODAL */}\n      <CustomModal\n        isOpen={isUpsertModalOpen}\n        handleOpen={handleOpenUpsertModal}\n        handleClose={handleCloseUpsertModal}\n      >\n        <animated.div style={isMobile ? animationUpsertModalMobile : {}}>\n          <form onSubmit={formikUpsert.handleSubmit}>\n            <div className=\"absolute flex flex-col md:left-[50%] md:top-[50%] md:translate-x-[-50%] md:translate-y-[-50%] bg-background-80 h-[100svh] w-full md:w-[45rem] md:h-auto md:rounded-3xl overflow-y-auto\">\n              {/* HEADING */}\n              <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n                <h1 className=\"text-xl text-ink-100 font-semibold\">\n                  {!isEditing\n                    ? 'Thêm mới cấu hình phương pháp Xbot - Buy/Sell'\n                    : 'Chỉnh sửa cấu hình phương pháp Xbot - Buy/Sell'}\n                </h1>\n                <CloseOutlined\n                  className=\"cursor-pointer\"\n                  onClick={handleCloseUpsertModal}\n                />\n              </div>\n              {/* FORM */}\n              <div className=\"md:max-h-[calc(100vh-19rem)] overflow-y-auto\">\n                <div\n                  className=\"bg-background-80 rounded-3xl p-6 flex flex-col\"\n                  ref={scrollElement}\n                >\n                  {/* Tên phương pháp */}\n                  <TextInput\n                    fullWidth={true}\n                    name=\"configName\"\n                    id=\"configName\"\n                    label=\"Tên phương pháp\"\n                    type=\"text\"\n                    value={formikUpsert.values.configName}\n                    onChange={formikUpsert.handleChange}\n                    resetValue={() => {\n                      formikUpsert.setFieldValue('configName', '');\n                    }}\n                    onBlur={formikUpsert.handleBlur}\n                    placeholder=\"Tên phương pháp\"\n                    error={\n                      formikUpsert.touched.configName &&\n                      Boolean(formikUpsert.errors.configName)\n                    }\n                    helperText={\n                      formikUpsert.touched.configName &&\n                      formikUpsert.errors.configName\n                    }\n                    containerClassName=\"mb-6\"\n                  />\n\n                  {/* Điều kiện */}\n                  <TextInput\n                    fullWidth={true}\n                    name=\"condition\"\n                    id=\"condition\"\n                    label=\"Điều kiện\"\n                    type=\"text\"\n                    value={formikUpsert.values.condition}\n                    onChange={formikUpsert.handleChange}\n                    resetValue={() => {\n                      formikUpsert.setFieldValue('condition', '');\n                    }}\n                    onBlur={formikUpsert.handleBlur}\n                    placeholder=\"Điều kiện\"\n                    error={Boolean(formikUpsert.errors.condition)}\n                    helperText={formikUpsert.errors.condition}\n                    containerClassName=\"mb-6\"\n                    button={\n                      <CustomButton\n                        onClick={() => {\n                          // condition: Yup.string()\n                          // .required('Vui lòng nhập điều kiện')\n                          // .matches(\n                          //   /^[xsb]{1,30}\\-[xsb]{1,30}$/,\n                          //   'Điều kiện không hợp lệ, Vui lòng nhập lại'\n                          // ),\n\n                          // !! Validate Condition Field\n                          if (!formikUpsert.values.condition) {\n                            // !! Check Required\n                            const allErrors = {\n                              ...formikUpsert.errors,\n                              condition: 'Vui lòng nhập điều kiện',\n                            };\n                            formikUpsert.setErrors(allErrors);\n                          } else if (\n                            !formikUpsert.values.condition.match(\n                              // /^[xsb]{1,30}\\-[xsb]{1,30}$/\n                              // /^[xsb]{1,30}\\-(s{1,30}|b{1,30})$/\n                              /^[xsb]{1,30}\\-[xsb]{1}$/\n                            )\n                          ) {\n                            // !! Check Match Regex\n                            const allErrors = {\n                              ...formikUpsert.errors,\n                              condition:\n                                'Điều kiện không hợp lệ, Vui lòng nhập lại',\n                            };\n                            formikUpsert.setErrors(allErrors);\n                          } else if (\n                            formikConditionsArray.some(\n                              (val: string) =>\n                                val === formikUpsert.values.condition\n                            )\n                          ) {\n                            // !! Check Duplicate in conditions\n                            const allErrors = {\n                              ...formikUpsert.errors,\n                              condition: 'Điều kiện trên đã được thêm rồi',\n                            };\n                            formikUpsert.setErrors(allErrors);\n                          } else {\n                            // !! Check All condition matches\n                            // This is complicated because conditions is of type:\n                            // {\n                            //   \"1\": {\n                            //     \"1\": ['xxx-x','vbbb-x']\n                            //   }\n                            // }\n                            const tempConditions = {\n                              [DEFAULT_INDEX_OF_CONDITIONS]: {\n                                [DEFAULT_INDEX_OF_CONDITIONS]: [\n                                  ...formikConditionsArray,\n                                ],\n                              },\n                            };\n                            tempConditions[DEFAULT_INDEX_OF_CONDITIONS][\n                              DEFAULT_INDEX_OF_CONDITIONS\n                            ].push(formikUpsert.values.condition);\n                            console.log('tempConditions', tempConditions);\n                            formikUpsert.setFieldValue('condition', '');\n                            formikUpsert.setFieldValue(\n                              'conditions',\n                              tempConditions\n                            );\n                            setConditionError('');\n                          }\n                        }}\n                      >\n                        Thêm\n                      </CustomButton>\n                    }\n                  />\n\n                  {/* Helper Condition */}\n                  <div\n                    className={`${\n                      conditionError ? '' : 'mb-6'\n                    } p-3 bg-primary-05 rounded-xl`}\n                  >\n                    <p className=\"bg-clip-text text-transparent bg-primary-100 text-sm\">\n                      Điều kiện nhập chuỗi VD : sssbb-s . Trong đó s là SELL\n                      (Bán), b là BUY (Mua) và x là BUY or SELL (Mua hoặc bán) .\n                      Đằng sau dấu \" - \" là lệnh muốn vào (s : SELL, b : BUY, x\n                      : BUY or SELL)\n                    </p>\n                  </div>\n\n                  {/* Điều kiện đã thêm */}\n                  {formikConditionsArray.length > 0 && (\n                    <div className=\"mb-6 gap-4\">\n                      <p className=\"mb-4 text-sm text-ink-100\">\n                        ĐIỀU KIỆN ĐÃ THÊM\n                      </p>\n                      <div className=\"flex flex-col rounded-xl border border-ink-10\">\n                        {formikConditionsArray.map((condition: string, idx) => (\n                          <Tile\n                            key={condition + idx}\n                            text={condition}\n                            isLast={\n                              formikConditionsArray.length <= 1 ||\n                              idx === formikConditionsArray.length - 1\n                            }\n                            rightIcon={images.bot.delete_gold}\n                            rightIconAction={() => {\n                              const conditionsAfterDelete =\n                                formikConditionsArray.filter(\n                                  (val) => val !== condition\n                                );\n                              const tempConditionsToSet = {\n                                ...formikUpsert.values.conditions,\n                              };\n                              tempConditionsToSet[DEFAULT_INDEX_OF_CONDITIONS][\n                                DEFAULT_INDEX_OF_CONDITIONS\n                              ] = conditionsAfterDelete;\n                              console.log(\n                                'tempConditionsToSet',\n                                tempConditionsToSet\n                              );\n                              formikUpsert.setFieldValue(\n                                'conditions',\n                                tempConditionsToSet\n                              );\n                            }}\n                          />\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {conditionError && (\n                    <div className={`px-2 py-3 text-red-100 text-sm`}>\n                      {conditionError}\n                    </div>\n                  )}\n\n                  {/* Chỉ sử dụng nến kết quả */}\n                  <div className=\"mb-6 flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"checkbox text-center\"\n                      checked={formikUpsert.values.isOnlyTrade}\n                      onChange={() => {\n                        formikUpsert.setFieldValue(\n                          'isOnlyTrade',\n                          !formikUpsert.values.isOnlyTrade\n                        );\n                      }}\n                    />\n                    <p className=\"text-ink-100\">Chỉ sử dụng nến kết quả</p>\n                  </div>\n                </div>\n              </div>\n              {/* BUTTON */}\n              <div className=\"mt-auto p-6 flex justify-end items-center\">\n                <GoldButton\n                  type=\"submit\"\n                  buttonClassName=\"flex-grow md:flex-initial\"\n                >\n                  {!isEditing ? 'Lưu phương pháp' : 'Cập nhật phương pháp'}\n                </GoldButton>\n              </div>\n            </div>\n          </form>\n        </animated.div>\n      </CustomModal>\n\n      {/* Delete Modal */}\n      <CustomModal\n        isOpen={isPopupOpen}\n        handleOpen={handleOpenPopupModal}\n        handleClose={handleClosePopupModal}\n      >\n        <div\n          className={`absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] p-6 md:w-[31.25rem] w-[calc(100vw-2rem)] bg-background-80 rounded-3xl text-center`}\n        >\n          <div className=\"flex items-center justify-center\">\n            <img\n              className=\"mb-4 w-[5.5rem]\"\n              src={images.copy.delete}\n              alt=\"BotLambotrade\"\n            />\n          </div>\n          <h3 className=\"mb-2 mx-auto max-w-[18.75rem] text-xl text-ink-100\">\n            Xoá cấu hình copy trade\n          </h3>\n          <p className=\"mb-12 mx-auto max-w-[18.75rem] text-ink-80\">\n            Bạn có chắc chắn muốn xoá cấu hình copy trade không?\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 justify-center items-center gap-4\">\n            <GreyButton onClick={handleClosePopupModal}>Huỷ</GreyButton>\n            <GoldButton\n              onClick={() => {\n                if (isDeletingByList) {\n                  deleteSettingByListIds();\n                } else {\n                  deleteSettingById();\n                }\n                handleClosePopupModal();\n              }}\n            >\n              Xoá\n            </GoldButton>\n          </div>\n        </div>\n      </CustomModal>\n\n      {/* POPUP Validate */}\n      <CustomValidateModel\n        isOpen={modalAttributes.isOpen}\n        icon={modalAttributes.icon}\n        headingMessage={modalAttributes.headingMessage}\n        message={modalAttributes.message}\n        buttonMessage={modalAttributes.buttonMessage}\n        handleOpen={modalAttributes.handleOpen}\n        handleClose={modalAttributes.handleClose}\n      />\n\n      {/* GIFT POPUP MODAL */}\n      <CustomModal\n        isOpen={isGiftPopupOpen}\n        handleOpen={handleOpenGiftPopupModal}\n        handleClose={handleCloseGiftPopupModal}\n      >\n        <div className=\"absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] w-[calc(100vw-2rem)] md:w-[31.25rem] bg-background-80 rounded-3xl\">\n          <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n            <h3 className=\"text-xl text-ink-100 font-semibold\">\n              Tặng phương pháp\n            </h3>\n            <CloseOutlined\n              className=\"cursor-pointer\"\n              onClick={handleCloseGiftPopupModal}\n            />\n          </div>\n          <div className=\"p-6\">\n            <TextInput\n              id=\"giftUsername\"\n              name=\"giftUsername\"\n              type=\"text\"\n              label=\"Tên tài khoản muốn tặng\"\n              fullWidth\n              value={giftUsername.value}\n              onChange={(e) => {\n                setGiftUsername((prev) => ({ ...prev, value: e.target.value }));\n              }}\n              onBlur={() => {\n                setGiftUsername((prev) => ({ ...prev, touched: true }));\n              }}\n              error={giftUsername.touched && Boolean(giftUsername.error)}\n              helperText={giftUsername.touched && giftUsername.error}\n              containerClassName=\"mb-6\"\n            />\n            <div className=\"flex justify-center md:justify-end\">\n              <CustomButton\n                className=\"w-full md:w-[12rem] py-4\"\n                background=\"bg-primary-100\"\n                textColor=\"bg-background-100\"\n                textClassName=\"font-bold\"\n              >\n                Gửi tặng\n              </CustomButton>\n            </div>\n          </div>\n        </div>\n      </CustomModal>\n\n      {/* Xem Dieu Kien */}\n      <CustomModal\n        isOpen={isConditionPopupOpen}\n        handleOpen={handleOpenConditionPopupModal}\n        handleClose={handleCloseConditionPopupModal}\n      >\n        <div className=\"absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] w-[calc(100vw-2rem)] md:w-[31.25rem] bg-background-80 rounded-3xl\">\n          <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n            <h3 className=\"text-xl text-ink-100 font-semibold\">\n              Danh sách điều kiện\n            </h3>\n            <CloseOutlined\n              className=\"cursor-pointer\"\n              onClick={handleCloseConditionPopupModal}\n            />\n          </div>\n          <div className=\"p-6\">\n            <div className=\"flex flex-col rounded-xl border border-ink-10\">\n              <Tile text=\"Điều kiện\" isGold isLast={false} />\n              {selectedConditionsArray.map((condition, idx) => (\n                <Tile\n                  key={condition + idx}\n                  text={condition}\n                  isLast={\n                    selectedConditionsArray.length <= 1 ||\n                    idx === selectedConditionsArray.length - 1\n                  }\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </CustomModal>\n    </>\n  );\n};\n\nexport default BotTradeMethodBuySell;\n","import React, { FC } from 'react';\n\ninterface BubbleProps {\n  text: string | number;\n  className?: string;\n  textClassName?: string;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n}\n\nconst Bubble: FC<BubbleProps> = ({\n  text,\n  className = '',\n  textClassName = '',\n  onClick,\n}) => {\n  return (\n    <div\n      className={`w-[44px] h-[44px] flex items-center justify-center rounded-full text-sm ${className}`}\n      onClick={onClick}\n    >\n      <p className={`font-semibold text-sm ${textClassName}`}>{text}</p>\n    </div>\n  );\n};\n\nexport default Bubble;\n","import { CloseOutlined } from '@mui/icons-material';\nimport { ClickAwayListener, Tooltip } from '@mui/material';\nimport APIs from 'apis';\nimport images from 'assets';\nimport axios from 'axios';\nimport CustomModal from 'components/CustomModal';\nimport CustomNumberInput from 'components/CustomNumberInput';\nimport CustomSwitch from 'components/CustomSwitch';\nimport CustomValidateModel from 'components/CustomValidateModal';\nimport GoldButton from 'components/GoldButton';\nimport GreyButton from 'components/GreyButton';\nimport TextInput from 'components/TextInput';\nimport { useFormik } from 'formik';\nimport { useEnqueueSnackbar } from 'hooks/useEnqueueSnackbar';\nimport moment from 'moment';\nimport CopyTradeZoomSelectInput from 'pages/CopyTradeZoom/CopyTradeZoomSelectInput';\nimport React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport CurrencyInput from 'react-currency-input-field';\nimport { CurrencyInputOnChangeValues } from 'react-currency-input-field/dist/components/CurrencyInputProps';\nimport { useNavigate } from 'react-router-dom';\nimport ReactSwitch from 'react-switch';\nimport { Column, usePagination, useTable } from 'react-table';\nimport { useAppDispatch, useAppSelector } from 'stores/hooks';\nimport { userActions } from 'stores/userSlice';\nimport { BotAllData } from 'types/BotAllData';\nimport { BotBalance } from 'types/BotBalance';\nimport BotData from 'types/BotData';\nimport BotSettingUpdate from 'types/BotSettingUpdate';\nimport CustomValidateModelProps from 'types/CustomValidateProps';\nimport InputSelectOption from 'types/InputSelectOption';\nimport * as Yup from 'yup';\nimport { BotCopyTrade } from '../../types/BotCopyTrade';\nimport { ActionMeta, SingleValue } from 'react-select';\nimport SelectInput from 'components/SelectInput';\nimport ReactPaginate from 'react-paginate';\nimport convertToThreeDecimalPlaces from 'utils/ConvertToThreeDecimalPlaces';\nimport { useMediaQuery } from 'react-responsive';\nimport { animated, useSpring } from 'react-spring';\nimport BotTradeSettingButton from 'pages/BotTradeSetting/BotTradeSettingButton';\nimport { uiActions } from 'stores/uiSlice';\nimport { faker } from '@faker-js/faker';\nimport CustomButton from 'components/CustomButton';\nimport CustomRadio from 'components/CustomRadio';\nimport Tile from 'components/Tile';\nimport Bubble from 'components/Bubble';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport BotSignalPersonal, {\n  BotSignalPersonalResult,\n} from 'types/BotSignalPersonal';\nimport BotSignalPersonalUpsert from 'types/BotSignalPersonalUpsert';\nimport { Button, Form, Select, Space, Tabs, TabsProps } from 'antd';\nimport { uniqueId } from 'lodash';\n\ntype BotTradeMethodBubbleProps = {};\n\ninterface ListMasterCopyTradeSetting {\n  master?: string | number;\n}\n\ninterface ListFollowerCopyTradeSetting {\n  follower?: string | number;\n}\n\ninterface FormikValueType {\n  configName: string | undefined;\n  ownerType: string | undefined;\n  conditions: Conditions;\n}\n\ntype Conditions = {\n  [key: string]: BubbleOptions;\n};\n\ntype BubbleOptions = {\n  [key: string]: any;\n};\n\ntype SelectedIdsType = {\n  [key: string]: boolean;\n};\n\ninterface TooltipToggle {\n  [x: string | number]: boolean;\n}\n\nconst PAGE_SIZE_OPTIONS: InputSelectOption[] = [\n  { value: 10, label: '10/page' },\n  { value: 20, label: '20/page' },\n  { value: 30, label: '30/page' },\n  { value: 40, label: '40/page' },\n];\n\nconst METHOD_OWN_TYPES: InputSelectOption[] = [\n  { value: 'all', label: 'Tất cả' },\n  { value: 'own', label: 'Phương pháp của tôi' },\n  { value: 'gifted', label: 'Phương pháp được tặng' },\n];\n\nconst PLUS_VALUES = [5, 10, 20, 50, 100, 'All'];\nconst MULTIPLY_VALUES = [2, 5, 10, 20, 40, 100];\nconst OPTIONS = [\n  {\n    value: 10,\n    name: 'Ten',\n  },\n  {\n    value: 15,\n    name: 'Fifteen',\n  },\n  {\n    value: 20,\n    name: 'Twenty',\n  },\n  {\n    value: 25,\n    name: 'Twenty-five',\n  },\n];\n\nconst INITIAL_BOT_BALANCE = {\n  balance: 1,\n  demo_balance: 1,\n  usdt_balance: 1,\n};\n\nconst INITIAL_SELECT_OPTIONS: InputSelectOption[] = [\n  {\n    value: '',\n    label: '',\n  },\n];\n\nconst INITIAL_SELECTED_OPTION: InputSelectOption = {\n  value: '',\n  label: '',\n};\n\nconst INITIAL_SELECTED_ACCOUNT_TYPE: InputSelectOption = {\n  value: 'LIVE',\n  label: 'Tài khoản LIVE',\n};\n\nconst INITIAL_FORMIK_VALUES: FormikValueType = {\n  configName: '',\n  ownerType: '',\n  conditions: {},\n};\n\nconst ACCOUNT_TYPES = [\n  {\n    value: 'DEMO',\n    label: 'Tài khoản DEMO',\n  },\n  {\n    value: 'LIVE',\n    label: 'Tài khoản LIVE',\n  },\n];\n\nexport interface ICopyTradeSettingFormik {\n  accountType: string;\n  email: string;\n  balance: number;\n  masterName: string;\n  amountPerOrder: number;\n  multiply: number;\n  takeProfit: number;\n  stopLoss: number;\n}\n\nconst INITIAL_BOT_PERSONAL_SIGNAL_RESULT: BotSignalPersonalResult = {\n  id: 0,\n  config_name: '',\n  owner_type: '',\n  config_type: '',\n  conditions: {},\n  fconditions: []\n};\n\nconst options: Intl.NumberFormatOptions = {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 3,\n  style: 'decimal',\n};\n\n// const generateFakeData = (): BotPersonalSignalResult[] => {\n//   return Array(5)\n//     .fill(0)\n//     .map((_, index) => ({\n//       id: faker.datatype.uuid(),\n//       type: index % 2 === 0 ? 'self' : 'gifted',\n//       number_of_conditions: Math.floor(1 + Math.random() * 5),\n//     }));\n// };\n\nconst generateArrayOfAndFrom = (length: number, from: number) =>\n  Array.from({ length }, (_, idx) => idx + from);\n\nconst generateBaseBubbleOption = () => ({\n  '1': Array(20).fill(0),\n  '2': Array(20).fill(0),\n  '3': Array(20).fill(0),\n  '4': Array(20).fill(0),\n  '5': Array(20).fill(0),\n  order_type: 'BUY',\n});\n\nconst FAKE_SELECTED_BUBBLE_METHOD: FormikValueType = {\n  configName: 'test',\n  ownerType: '',\n  conditions: {\n    '1': {\n      '1': [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      '2': [0, -1, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      '3': [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      '4': [0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      '5': [0, 0, 2, -1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      order_type: 'SELL',\n    },\n    '3': {\n      '1': [1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      '2': [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      '3': [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      '4': [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      '5': [-1, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      order_type: 'BUY',\n    },\n  },\n};\n\ninterface TypeConditionChid {\n  board: number //Bảng\n  bubble: number //Bóng\n  result_type: number // 1/2\n  id: string\n}\n\ntype TargetKey = React.MouseEvent | React.KeyboardEvent | string;\ninterface TypeConditionsForm {\n  betType: number\n  bubble: number\n  conditions: TypeConditionChid[]\n  fconditions: BubbleOptions\n  id: string\n}\n\nconst BotTradeMethodBubble: FC<BotTradeMethodBubbleProps> = () => {\n  const [selectedIds, setSelectedIds] = useState<SelectedIdsType>({});\n  const [selectAll, setSelectAll] = useState(0);\n\n  // BOT\n  const [allBotDatas, setAllBotDatas] = useState<BotAllData[]>([]);\n  const [partnerBotDatas, setPartnerBotDatas] = useState<BotData[]>([]);\n  const [botBalance, setBotBalance] = useState<BotBalance>(INITIAL_BOT_BALANCE);\n  const [selectedAccountType, setSelectedAccountType] =\n    useState<InputSelectOption>(INITIAL_SELECTED_ACCOUNT_TYPE);\n  const [selectedBotAccount, setSelectedBotAccount] =\n    useState<InputSelectOption>(INITIAL_SELECTED_OPTION);\n  const [selectedMasterAccount, setSelectedMasterAccount] =\n    useState<InputSelectOption>(INITIAL_SELECTED_OPTION);\n  const [accountOptions, setAccountOptions] = useState<InputSelectOption[]>([]);\n  const [allBotAccountOptions, setAllBotAccountOptions] = useState<\n    InputSelectOption[]\n  >([]);\n\n  // SETTINGS\n  const [botPersonalSignalData, setBotPersonalSignalData] =\n    useState<BotSignalPersonal>({\n      count: 0,\n      next: null,\n      previous: null,\n      results: [],\n    });\n  const [allBotPersonalSignalResults, setAllBotPersonalSignalResults] =\n    useState<BotSignalPersonalResult[]>([]);\n  const userData = useAppSelector((state) => state.user.user);\n  const [isDeletingByList, setIsDeletingByList] = useState(false);\n\n  // MODAL\n  const [isUpsertModalOpen, setIsUpsertModalOpen] = useState(false);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [isConditionPopupOpen, setIsConditionPopupOpen] = useState(false);\n  const [isGiftPopupOpen, setIsGiftPopupOpen] = useState(false);\n  const [isBubbleOptionOpen, setIsBubbleOptionOpen] = useState(false);\n  const [isBubbleGuideOpen, setIsBubbleGuideOpen] = useState(false);\n\n  const [form] = Form.useForm();\n\n  // SEARCH AND FILTER\n  const [searchInput, setSearchInput] = useState('');\n  const [selectedMethodOwnType, setSelectedMethodOwnType] =\n    useState<InputSelectOption>(METHOD_OWN_TYPES[0]);\n\n  // PAGINATION\n  const [selectedPageSizeOption, setSelectedPageSizeOption] =\n    useState<InputSelectOption>(PAGE_SIZE_OPTIONS[0]);\n  const [page, setPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(10);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const [isPrevHover, setIsPrevHover] = useState(false);\n  const [isNextHover, setIsNextHover] = useState(false);\n\n  const [modalAttributes, setModalAttributes] =\n    useState<CustomValidateModelProps>({\n      isOpen: false,\n      icon: '',\n      headingMessage: '',\n      message: '',\n      buttonMessage: '',\n      handleOpen: () => { },\n      handleClose: () => { },\n    });\n\n  // FORMIK RELATED STATES\n  const [formikValues, setFormikValues] = useState<FormikValueType>(\n    INITIAL_FORMIK_VALUES\n  );\n  const [selectedBotPersonalSignalResult, setSelectedBotPersonalSignalResult] =\n    useState<BotSignalPersonalResult>(INITIAL_BOT_PERSONAL_SIGNAL_RESULT);\n  const [conditionViews, setConditionView] = useState<BubbleOptions>(generateBaseBubbleOption())\n  const [isEditing, setIsEditing] = useState(false);\n  const [giftUsername, setGiftUsername] = useState({\n    value: '',\n    error: null,\n    touched: false,\n  });\n\n  // INITIAL PARTNER BOT USEFFECT\n  const [isPartnerBotInitialized, setIsPartnerBotInitialized] = useState(false);\n  const animationUpsertModalMobile = useSpring({\n    to: {\n      opacity: isUpsertModalOpen ? 1 : 0,\n      transform: isUpsertModalOpen ? 'translateX(0%)' : 'translateX(-100%)',\n    },\n  });\n\n  // ! BUBBLE\n  const [selectedBubbleIdx, setSelectedBubbleIdx] = useState(0);\n  const [tempBubbleOption, setTempBubbleOption] = useState<BubbleOptions>(\n    generateBaseBubbleOption()\n  );\n  const [selectedCondition, setSelectedCondition] = useState<TypeConditionsForm | null>(null)\n  // dung de hien thi o popup xem dieu kien\n  const [\n    selectedBubbleMethodConditionToView,\n    setSelectedBubbleMethodConditionToView,\n  ] = useState<string | number>(1);\n  const [conditionError, setConditionError] = useState('');\n\n  // { label: 'Điều kiện 1', children: 'Content of Tab 1', key: '1' }\n\n  const [conditionsForm, setConditionsForm] = useState<TypeConditionsForm[]>([])\n  const [chidConditions, setChidConditions] = useState<TypeConditionChid[]>([])\n  const [selectedBetType, setSelectedBetType] = useState(1)\n  const [activeKey, setActiveKey] = useState('1');\n  const newTabIndex = useRef(1);\n\n  const tab = (obj: BubbleOptions, key: string) => {\n    return <div className=\"p-6 grid grid-cols-2 gap-6 md:gap-8 md:grid-cols-4 bg-ink-05 rounded-xl\">\n      {Object.entries(obj).map(([key, values]) => {\n        if (key === 'order_type') return;\n        return (\n          <div key={key}>\n            <p className=\"mb-3\">Bảng {key}</p>\n            <div className=\"flex flex-col gap-[2px]\">\n              {generateArrayOfAndFrom(4, 0).map((rowIdx) => (\n                <div key={rowIdx} className=\"flex gap-[2px]\">\n                  {generateArrayOfAndFrom(5, 0).map((colIdx) => {\n                    const idxInValues = rowIdx + 4 * colIdx;\n                    const isWin = values[idxInValues] === 1;\n                    const isLose = values[idxInValues] === -1;\n                    const isDraw = values[idxInValues] === 5;\n                    return (\n                      <div\n                        key={rowIdx + 4 * colIdx}\n                        className={`w-[1.5rem] h-[1.5rem] rounded-full cursor-pointer ${isWin\n                          ? 'bg-green-circle'\n                          : isLose\n                            ? 'bg-red-circle'\n                            : isDraw\n                              ? 'bg-orange-100'\n                              : 'bg-ink-10'\n                          }`}\n                        onClick={() => {\n                          const tempBubbleToSet = {\n                            ...tempBubbleOption,\n                          };\n                          if (isWin) {\n                            tempBubbleToSet[key][idxInValues] = -1;\n                          } else if (isLose) {\n                            tempBubbleToSet[key][idxInValues] = 5;\n                          } else if (isDraw) {\n                            tempBubbleToSet[key][idxInValues] = 0;\n                          } else {\n                            tempBubbleToSet[key][idxInValues] = 1;\n                          }\n                          setTempBubbleOption(tempBubbleToSet);\n                        }}\n                      ></div>\n                    );\n                  })}\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }\n\n  const [items, setItems] = useState([\n    { label: <p className='label'>Điều kiện 1</p>, children: tab(tempBubbleOption, '1'), key: '1', closable: false }\n  ]);\n\n  const onChange = (newActiveKey: string) => {\n    setActiveKey(newActiveKey);\n  };\n\n  const add = () => {\n    newTabIndex.current++\n    const newActiveKey = `${newTabIndex.current}`;\n    const newPanes = [...items];\n    newPanes.push({ label: <p className='label'>Điều kiện {newActiveKey}</p>, children: tab(generateBaseBubbleOption(), newActiveKey), key: newActiveKey, closable: true });\n    setItems(newPanes);\n    setActiveKey(newActiveKey);\n  };\n\n  const remove = (targetKey: TargetKey) => {\n    let newActiveKey = activeKey;\n    let lastIndex = -1;\n    items.forEach((item, i) => {\n      if (item.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    // setChidConditions((prev) => prev.filter((e) => e.table !== Number(targetKey)))\n    const newPanes = items.filter((item) => item.key !== targetKey);\n    if (newPanes.length && newActiveKey === targetKey) {\n      if (lastIndex >= 0) {\n        newActiveKey = newPanes[lastIndex].key;\n      } else {\n        newActiveKey = newPanes[0].key;\n      }\n    }\n    setItems(newPanes);\n    setActiveKey(newActiveKey);\n  };\n\n  const onEdit = (\n    targetKey: React.MouseEvent | React.KeyboardEvent | string,\n    action: 'add' | 'remove',\n  ) => {\n    if (action === 'add') {\n      add();\n    } else {\n      remove(targetKey);\n    }\n  };\n  // ! RESPONSIVE\n  const isLargeDesktop = useMediaQuery({\n    query: '(min-width: 1368px)',\n  });\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1224px)',\n  });\n  const isTablet = useMediaQuery({\n    query: '(min-width: 768px)',\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 767px)',\n  });\n\n  const dispatch = useAppDispatch();\n  const enqueueSnackbar = useEnqueueSnackbar();\n  const navigate = useNavigate();\n  const scrollElement = useRef<HTMLDivElement>(null);\n\n  const data = React.useMemo<BotSignalPersonalResult[]>(\n    () => allBotPersonalSignalResults,\n    [allBotPersonalSignalResults]\n  );\n\n  // ! Tooltips\n  const [isTooltipOpen, setIsTooltipOpen] = useState<TooltipToggle>({});\n\n  const handleTooltipOpen = useCallback((rowIndex: string | number) => {\n    console.log('handleTooltipOpen');\n    if (!isTooltipOpen[rowIndex]) {\n      setIsTooltipOpen((prevState) => ({\n        [rowIndex]: true,\n      }));\n    }\n  }, []);\n\n  const handleTooltipClose = (rowIndex: string | number) => {\n    console.log('handleTooltipClose');\n    if (isTooltipOpen[rowIndex]) {\n      setIsTooltipOpen((prevState) => ({\n        [rowIndex]: false,\n      }));\n    }\n  };\n\n  const handleTooltipToggle = (rowIndex: string | number) => {\n    setIsTooltipOpen((prevState) => ({\n      [rowIndex]: !prevState[rowIndex],\n    }));\n  };\n\n  const onSelectedAccountTypeChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => {\n    setSelectedAccountType(option);\n    dispatch(userActions.updateSelectedAccountType(option));\n  };\n\n  const onSelectedBotAccountChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => {\n    setSelectedBotAccount(option);\n    dispatch(userActions.updateSelectedBotAccount(option));\n  };\n\n  const onSelectedMasterChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => {\n    setSelectedMasterAccount(option);\n  };\n\n  // FUNCTIONS FOR MODAL\n  const showIsDevelopingModal = () => {\n    dispatch(uiActions.updateIsModalOpen(true));\n  };\n\n  const handleOpenUpsertModal = () => {\n    setIsUpsertModalOpen(true);\n  };\n\n  const handleCloseUpsertModal = () => {\n    setIsUpsertModalOpen(false);\n    formikUpsert.resetForm();\n    setFormikValues(INITIAL_FORMIK_VALUES);\n    setSelectedAccountType(INITIAL_SELECTED_ACCOUNT_TYPE);\n    setSelectedBotAccount(INITIAL_SELECTED_OPTION);\n    setConditionError('');\n    setConditionsForm([])\n    // form.resetFields()\n    // setChidConditions([])\n    setSelectedCondition(null)\n    // setSelectedMasterAccount(INITIAL_SELECTED_OPTION);\n  };\n\n  const handleOpenPopupModal = () => {\n    setIsPopupOpen(true);\n  };\n\n  const handleClosePopupModal = () => {\n    setIsPopupOpen(false);\n  };\n\n  const handleOpenGiftPopupModal = () => {\n    setIsGiftPopupOpen(true);\n  };\n\n  const handleCloseGiftPopupModal = () => {\n    setIsGiftPopupOpen(false);\n  };\n\n  const handleOpenConditionPopupModal = () => {\n    setIsConditionPopupOpen(true);\n  };\n\n  const handleCloseConditionPopupModal = () => {\n    setIsConditionPopupOpen(false);\n  };\n\n  const handleOpenBubbleOptionPopupModal = () => {\n    setIsBubbleOptionOpen(true);\n  };\n\n  const handleCloseBubbleOptionPopupModal = () => {\n    // form.resetFields()\n    setIsBubbleOptionOpen(false);\n  };\n\n  const handleOpenBubbleGuidePopupModal = () => {\n    setIsBubbleGuideOpen(true);\n  };\n\n  const handleCloseBubbleGuidePopupModal = () => {\n    setIsBubbleGuideOpen(false);\n  };\n\n  const handleOpenAccountTradePopupModal = () => {\n    setModalAttributes((prev) => ({\n      ...prev,\n      isOpen: true,\n    }));\n  };\n\n  const handleCloseAccountTradePopupModal = () => {\n    setModalAttributes((prev) => ({\n      ...prev,\n      isOpen: false,\n    }));\n    navigate('/account_trade');\n  };\n\n  // FUNCTIONS FOR CHECKBOX\n  const toggleRow = useCallback(\n    (id: string | number) => {\n      const newSelected = { ...selectedIds };\n      newSelected[id] = !newSelected[id];\n      console.log(newSelected);\n      setSelectedIds(newSelected);\n      const totalSelected = Object.entries(newSelected).reduce(\n        (prev, value) => {\n          if (value[1]) return prev + 1;\n          return prev;\n        },\n        0\n      );\n      if (totalSelected >= data.length) {\n        setSelectAll(1);\n      } else {\n        setSelectAll(0);\n      }\n    },\n    [data.length, selectedIds]\n  );\n\n  const toggleAllRow = useCallback(() => {\n    let newSelected: SelectedIdsType = {};\n\n    if (selectAll === 0) {\n      data.forEach((x) => {\n        newSelected[x.id] = true;\n      });\n    }\n    setSelectedIds(newSelected);\n    setSelectAll((prev) => (prev === 0 ? 1 : 0));\n  }, [data, selectAll]);\n\n  // COMMON FUNCTIONS\n  const getAllBotSignalBubbleSettings = useCallback(\n    (page: number) => {\n      // Must have partnerBot to have API key\n      if (partnerBotDatas.length > 0) {\n        axios\n          .get(`${APIs.botSignalBubbleList}`, {\n            params: {\n              page,\n              page_size: selectedPageSizeOption.value,\n            },\n          })\n          .then((res) => {\n            const data: BotSignalPersonal = res.data;\n            setBotPersonalSignalData(data);\n            setAllBotPersonalSignalResults(data.results);\n            if (data.count != null && selectedPageSizeOption.value != null) {\n              setTotalPages(\n                Math.ceil(data.count / +selectedPageSizeOption.value)\n              );\n            }\n          })\n          .catch(() => {\n            enqueueSnackbar('Không thể lấy bot settings!', {\n              variant: 'error',\n            });\n          });\n      }\n    },\n    [enqueueSnackbar, partnerBotDatas, selectedPageSizeOption]\n  );\n\n  const deleteSettingById = () => {\n    axios\n      .delete(\n        `${APIs.deleteBotSignalPersonal}${selectedBotPersonalSignalResult.id}`\n      )\n      .then((res) => {\n        getAllBotSignalBubbleSettings(page + 1);\n        setSelectedIds({});\n        setSelectAll(0);\n        enqueueSnackbar('Xoá cấu hình thành công!', { variant: 'success' });\n      })\n      .catch(() => {\n        enqueueSnackbar('Không thể xoá cấu hình!', { variant: 'error' });\n      });\n  };\n\n  const deleteSettingByListIds = () => {\n    // ENTRY: string: boolean\n    const selectedListIds = Object.entries(selectedIds)\n      .filter((selected) => selected[1])\n      .map((selected) => selected[0]);\n    axios\n      .delete(`${APIs.deleteBotSignalPersonal}${selectedListIds}`)\n      .then((res) => {\n        getAllBotSignalBubbleSettings(page + 1);\n        setSelectedIds({});\n        setSelectAll(0);\n        enqueueSnackbar('Xoá cấu hình thành công!', { variant: 'success' });\n      })\n      .catch(() => {\n        enqueueSnackbar('Xoá cấu hình thất bại!', { variant: 'error' });\n      });\n  };\n\n  const updateModelData = useCallback(\n    (botPersonalSignalResult: BotSignalPersonalResult) => {\n      // UPDATE FORM MODAL\n      const updatedFormikValues: FormikValueType = {\n        configName: botPersonalSignalResult.config_name,\n        ownerType: botPersonalSignalResult.owner_type,\n        conditions: botPersonalSignalResult.conditions,\n      };\n\n      console.log(updatedFormikValues);\n\n      setFormikValues(updatedFormikValues);\n    },\n    []\n  );\n\n  // SEARCH AND FILTER\n  const handleSelectMethodOwnType = (\n    option: SingleValue<InputSelectOption>,\n    actionMeta: ActionMeta<InputSelectOption>\n  ) => {\n    if (option != null) {\n      setSelectedMethodOwnType(option);\n    }\n  };\n\n  // PAGINATION FUNCTION\n  const handleSelectPageSize = (\n    option: SingleValue<InputSelectOption>,\n    actionMeta: ActionMeta<InputSelectOption>\n  ) => {\n    if (option != null) {\n      setSelectedPageSizeOption(option);\n      setPage(0);\n      getAllBotSignalBubbleSettings(1);\n    }\n  };\n\n  const handlePageChange = useCallback(\n    ({ selected }: { selected: number }) => {\n      console.log(selected);\n      const page = selected + 1;\n      setPage(selected);\n      getAllBotSignalBubbleSettings(page);\n    },\n    [getAllBotSignalBubbleSettings]\n  );\n\n  console.log(form.getFieldValue('conditions'), conditionsForm)\n\n  // TABLE\n  const columns = React.useMemo<Column<BotSignalPersonalResult>[]>(\n    () => [\n      {\n        id: 'checkbox',\n        accessor: 'checkbox',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex justify-center items-center\">\n              <input\n                type=\"checkbox\"\n                className=\"checkbox\"\n                checked={selectedIds[original.id] === true}\n                onChange={(e) => toggleRow(original.id)}\n              />\n            </div>\n          );\n        },\n        Header: () => {\n          return (\n            <div className=\"flex justify-center items-center\">\n              <input\n                type=\"checkbox\"\n                className=\"checkbox text-center\"\n                checked={selectAll === 1}\n                ref={(input) => {\n                  if (input) {\n                    input.indeterminate = selectAll === 2;\n                  }\n                }}\n                onChange={() => toggleAllRow()}\n              />\n            </div>\n          );\n        },\n        sortable: false,\n        width: 45,\n      },\n      {\n        Header: () => {\n          return <div className=\"text-left\">Tên phương pháp</div>;\n        },\n        accessor: 'config_name',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex items-center gap-x-1\">\n              <p className=\"text-sm text-ink-100\">{original.config_name}</p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => {\n          return <div className=\"text-center\">Sở hữu phương pháp</div>;\n        },\n        accessor: 'owner_type',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          const isPersonal = original.owner_type === 'personal';\n          return (\n            <div className=\"flex justify-center gap-x-1\">\n              <p\n                className={`px-2 ${isPersonal\n                  ? 'bg-primary-100 text-background-80'\n                  : 'bg-green-100 text-ink-100'\n                  } rounded-3xl text-ink-100 text-xs`}\n              >\n                {isPersonal ? 'Cá nhân' : 'Được tặng'}\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => {\n          return <div className=\"text-left\">Điều kiện</div>;\n        },\n        accessor: 'conditions',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex gap-x-1\">\n              <p\n                className=\"underline-primary bg-primary-100 bg-clip-text text-transparent text-sm cursor-pointer\"\n                onClick={() => {\n                  setSelectedBotPersonalSignalResult(original);\n                  setSelectedBubbleMethodConditionToView(\n                    Object.keys(original.conditions)[0]\n                  );\n                  handleOpenConditionPopupModal();\n                }}\n              >\n                Xem điều kiện\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        accessor: 'actions',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex justify-center gap-x-1 w-[1.5rem]\">\n              <Tooltip\n                componentsProps={{\n                  tooltip: {\n                    className: '!px-0 !py-3 !bg-dropdown !rounded-xl',\n                  },\n                  arrow: {\n                    className:\n                      '!w-[1rem] !translate-x-[9.6875rem] !before:bg-dropdown',\n                    sx: {\n                      '&::before': {\n                        background: 'var(--bg-dropdown)',\n                      },\n                    },\n                  },\n                }}\n                title={\n                  <>\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleOpenGiftPopupModal();\n                        handleTooltipClose(original.id);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={images.table.gift_gold}\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">Tặng</p>\n                    </div>\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        // const newC = original.fconditions.map((e) => {\n                        //   let obj: any = generateBaseBubbleOption()\n                        //   const arr = e.conditions\n                        //   arr.forEach((x) => {\n                        //     const { board, bubble, result_type } = x;\n                        //     obj[board][bubble - 1] = result_type;\n                        //     return obj\n                        //   })\n                        //   return {\n                        //     ...e,\n                        //     fconditions: {...obj, id: `${uniqueId()}`}\n                        //   }\n                        // })\n                        handleOpenUpsertModal();\n                        setIsEditing(true);\n                        updateModelData(original);\n                        setSelectedBotPersonalSignalResult(original);\n                        setConditionsForm(original.fconditions);\n                        handleTooltipClose(original.id);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={images.table.edit}\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">Chỉnh sửa</p>\n                    </div>\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={() => {\n                        handleOpenPopupModal();\n                        setIsDeletingByList(false);\n                        setSelectedBotPersonalSignalResult(original);\n                        handleTooltipClose(original.id);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={images.table.delete}\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">Xoá cấu hình</p>\n                    </div>\n                  </>\n                }\n                arrow\n                open={isTooltipOpen[original.id]}\n                onOpen={() => {\n                  handleTooltipOpen(original.id);\n                }}\n                onClose={() => {\n                  handleTooltipClose(original.id);\n                }}\n                disableHoverListener={!isDesktop}\n                disableFocusListener={!isDesktop}\n                disableTouchListener={!isDesktop}\n                // onClick={() => {\n                //   handleTooltipToggle(original.id);\n                // }}\n                placement=\"bottom-end\"\n                enterTouchDelay={0}\n                leaveTouchDelay={20000}\n              >\n                <img\n                  className=\"cursor-pointer\"\n                  src={images.table.actions}\n                  alt=\"BotLambotrade\"\n                  onClick={(e) => {\n                    handleTooltipToggle(original.id);\n                  }}\n                />\n              </Tooltip>\n            </div>\n          );\n        },\n      },\n    ],\n    [\n      handleTooltipOpen,\n      isDesktop,\n      isTooltipOpen,\n      selectAll,\n      selectedIds,\n      toggleAllRow,\n      toggleRow,\n    ]\n  );\n\n  const tableInstance = useTable({ columns, data }, usePagination);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    tableInstance;\n\n  // FORMIK\n  const formikUpsert = useFormik({\n    initialValues: formikValues,\n    validateOnChange: false,\n    enableReinitialize: true,\n    validationSchema: Yup.object({\n      configName: Yup.string()\n        .required('Vui lòng nhập tên phương pháp')\n        .max(50, 'Vui lòng nhập tên cấu hình bot dưới 50 ký tự')\n        .matches(\n          /^[a-zA-ZàáãạảăắằẳẵặâấầẩẫậèéẹẻẽêềếểễệđìíĩỉịòóõọỏôốồổỗộơớờởỡợùúũụủưứừửữựỳỵỷỹýÀÁÃẠẢĂẮẰẲẴẶÂẤẦẨẪẬÈÉẸẺẼÊỀẾỂỄỆĐÌÍĨỈỊÒÓÕỌỎÔỐỒỔỖỘƠỚỜỞỠỢÙÚŨỤỦƯỨỪỬỮỰỲỴỶỸÝ][_-a-zA-Z0-9àáãạảăắằẳẵặâấầẩẫậèéẹẻẽêềếểễệđìíĩỉịòóõọỏôốồổỗộơớờởỡợùúũụủưứừửữựỳỵỷỹýÀÁÃẠẢĂẮẰẲẴẶÂẤẦẨẪẬÈÉẸẺẼÊỀẾỂỄỆĐÌÍĨỈỊÒÓÕỌỎÔỐỒỔỖỘƠỚỜỞỠỢÙÚŨỤỦƯỨỪỬỮỰỲỴỶỸÝ ]*$/gi,\n          'Cấu hình bot phải bắt đầu bằng chữ và không chứa ký tự đặc biệt'\n        ),\n    }),\n    onSubmit: async (values, helpers) => {\n      if (Object.keys(values.conditions).length === 0) {\n        setConditionError('Vui lòng nhập ít nhất một điều kiện');\n        return;\n      }\n      if (isEditing) {\n        // UPDATE\n        const updateSignalPersonalData = {\n          config_name: values.configName,\n          owner_type: selectedBotPersonalSignalResult.owner_type,\n          config_type: selectedBotPersonalSignalResult.config_type,\n          conditions: values.conditions,\n          fconditions: conditionsForm.map((e) => ({\n            ...e,\n            betType: e.betType,\n            bubble: e.bubble,\n            conditions: e.conditions,\n          })),\n          is_onlytrade: selectedBotPersonalSignalResult.is_onlytrade,\n        };\n        axios\n          .patch(\n            `${APIs.updateBotSignalPersonal}${selectedBotPersonalSignalResult.id}/`,\n            updateSignalPersonalData\n          )\n          .then(() => {\n            getAllBotSignalBubbleSettings(page + 1);\n            enqueueSnackbar('Cập nhập cấu hình thành công!', {\n              variant: 'success',\n            });\n            handleCloseUpsertModal();\n          })\n          .catch((err) => {\n            enqueueSnackbar(\n              `${err.data\n                ? JSON.stringify(err.data)\n                : 'Cập nhập cấu hình thất bại!'\n              }`,\n              { variant: 'error' }\n            );\n          });\n      } else {\n        // INSERT\n        const createSignalPersonalData = {\n          config_name: values.configName,\n          owner_type: 'personal',\n          config_type: 'bubble',\n          fconditions: conditionsForm.map((e) => ({\n            betType: e.betType,\n            bubble: e.bubble,\n            conditions: e.conditions,\n            id: e.id\n          })),\n          conditions: tempBubbleOption,\n          is_onlytrade: false,\n        };\n        axios\n          .post(APIs.createBotSignalPersonal, createSignalPersonalData)\n          .then(() => {\n            getAllBotSignalBubbleSettings(page + 1);\n            enqueueSnackbar('Tạo cấu hình thành công!', {\n              variant: 'success',\n            });\n            handleCloseUpsertModal();\n          })\n          .catch((err) => {\n            enqueueSnackbar(\n              `${err.data ? JSON.stringify(err.data) : 'Tạo cấu hình thất bại!'\n              }`,\n              { variant: 'error' }\n            );\n          });\n      }\n    },\n  });\n\n  // BOT SELECT\n  const getAllAccounts = useCallback(() => {\n    axios\n      .get(APIs.allAccounts)\n      .then((res) => {\n        const data = res.data;\n        setAllBotDatas(data);\n      })\n      .catch(() => {\n        enqueueSnackbar('Không thể lấy tài khoản master', { variant: 'error' });\n      });\n  }, [enqueueSnackbar]);\n\n  const getAllPartnerBots = useCallback(() => {\n    axios\n      .get(APIs.partnerAccount)\n      .then((res) => {\n        const datas: BotData[] = res.data;\n        const partnerBotDatas = datas.filter(\n          (data) => data.status === 'active'\n        );\n        setPartnerBotDatas(partnerBotDatas);\n      })\n      .catch((err) => {\n        enqueueSnackbar('Không thể lấy bot datas', { variant: 'error' });\n      });\n  }, [enqueueSnackbar]);\n\n  const convertPartnerBotsToPartnerAccountOptions = useCallback(() => {\n    if (partnerBotDatas && partnerBotDatas.length > 0) {\n      const accountOptions = partnerBotDatas.map((botData) => ({\n        value: botData.id,\n        label: botData.botname,\n      }));\n      setAccountOptions(accountOptions);\n    }\n  }, [partnerBotDatas]);\n\n  const convertAllPartnerBotsToPartnerAccountOptions = useCallback(() => {\n    if (allBotDatas && allBotDatas.length > 0) {\n      const allBotAccountOptions = allBotDatas.map((botData) => ({\n        value: botData.id,\n        label: botData.username,\n      }));\n      setAllBotAccountOptions(allBotAccountOptions);\n    }\n  }, [allBotDatas]);\n\n  useEffect(() => {\n    getAllPartnerBots();\n    getAllAccounts();\n  }, [getAllAccounts, getAllPartnerBots]);\n\n\n  useEffect(() => {\n    form.setFieldValue('conditions', chidConditions)\n  }, [chidConditions])\n\n\n  useEffect(() => {\n    if (partnerBotDatas && partnerBotDatas.length > 0) {\n      if (selectedAccountType.value === 'LIVE' && !isPartnerBotInitialized) {\n        const firstBotOption = {\n          value: partnerBotDatas[0].id,\n          label: partnerBotDatas[0].botname,\n        };\n        setSelectedBotAccount(firstBotOption);\n        setIsPartnerBotInitialized(true);\n        dispatch(userActions.updateSelectedBotAccount(firstBotOption));\n      }\n      convertPartnerBotsToPartnerAccountOptions();\n      convertAllPartnerBotsToPartnerAccountOptions();\n    }\n  }, [\n    partnerBotDatas,\n    convertPartnerBotsToPartnerAccountOptions,\n    selectedAccountType,\n    selectedBotAccount.value,\n    convertAllPartnerBotsToPartnerAccountOptions,\n    dispatch,\n    isPartnerBotInitialized,\n  ]);\n\n  useEffect(() => {\n    getAllBotSignalBubbleSettings(page + 1);\n  }, [getAllBotSignalBubbleSettings, page]);\n\n  return (\n    <>\n      <div className=\"h-fit mb-6 bg-background-80 rounded-3xl\">\n        <div className=\"p-6 border-b border-ink-10 flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n          <h1 className=\"text-xl text-ink-100 font-semibold\">\n            Danh sách cấu hình {isMobile && <br />} phương pháp đã tạo\n          </h1>\n          <button\n            className=\"px-3 py-[0.625rem] w-full md:w-auto rounded-xl flex justify-center items-center gap-[0.625rem] bg-primary-100\"\n            onClick={() => {\n              // Bật lại\n              // if (partnerBotDatas.length === 0) {\n              //   setModalAttributes((prev) => ({\n              //     ...prev,\n              //     isOpen: true,\n              //     icon: images.copy.account_not_integrate,\n              //     headingMessage: 'Bạn chưa liên kết tài khoản',\n              //     message: (\n              //       <>\n              //         Liên kết tài khoản ngay để thực hiện giao dịch cùng đội\n              //         ngũ chuyên gia của AI BotTrade\n              //       </>\n              //     ),\n              //     buttonMessage: 'Liên kết tài khoản',\n              //     handleOpen: handleOpenAccountTradePopupModal,\n              //     handleClose: handleCloseAccountTradePopupModal,\n              //   }));\n              //   return;\n              // }\n              handleOpenUpsertModal();\n              setIsEditing(false);\n            }}\n          >\n            <img src={images.copy.plus} alt=\"BotLambotrade\" />\n            <p className=\"bg-background-100 bg-clip-text text-transparent font-semibold\">\n              Thêm mới\n            </p>\n          </button>\n        </div>\n        {allBotPersonalSignalResults.length === 0 && (\n          <div className=\"py-[5rem] flex flex-col justify-center items-center gap-y-6\">\n            <img\n              className=\"w-[10.25rem]\"\n              src={images.copy.empty}\n              alt=\"BotLambotrade\"\n            />\n            <p className=\"text-ink-60\">\n              Danh sách cấu hình phương pháp đã tạo trống\n            </p>\n          </div>\n        )}\n        {allBotPersonalSignalResults.length > 0 && (\n          <div className=\"p-6 flex flex-col gap-y-6\">\n            <div className=\"flex flex-col md:flex-row items-center gap-4\">\n              {/* SEARCH */}\n              <TextInput\n                fullWidth={true}\n                name=\"search\"\n                id=\"search\"\n                type=\"text\"\n                value={searchInput}\n                onChange={(e) => {\n                  setSearchInput(e.target.value);\n                }}\n                resetValue={() => {\n                  setSearchInput('');\n                }}\n                placeholder=\"Tìm kiếm\"\n                searchIcon={images.table.search}\n                searchIconClassName=\"!w-[1.25rem]\"\n                containerClassName=\"w-full md:w-[21.375rem]\"\n                inputClassName=\"!py-2 text-sm\"\n              />\n\n              {/* HÌNH THỨC SỞ HƯU PHƯƠNG PHÁP */}\n              <SelectInput\n                value={selectedMethodOwnType}\n                onChange={handleSelectMethodOwnType}\n                fullWidth={!isDesktop && !isTablet}\n                inputClassName=\"!py-2 !pr-8 text-sm w-full md:w-[21.375rem]\"\n                indicatorContainerClassName=\"!right-3\"\n                indicatorContainerIconClassName=\"!w-[1rem]\"\n                // menuPortalClassName={`min-w-[10.25rem] ${\n                //   isMobile ? 'translate-x-[-3.2rem]' : ''\n                // }`}\n                name=\"select\"\n                options={METHOD_OWN_TYPES}\n              />\n            </div>\n\n            {Object.values(selectedIds).filter((value) => value === true)\n              .length > 0 && (\n                <div className=\"px-4 py-3 bg-ink-05 rounded-xl flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n                  <p className=\"text-ink-100 font-semibold\">\n                    {`Đã chọn ${Object.values(selectedIds).filter((value) => value === true)\n                      .length\n                      }`}\n                  </p>\n                  <div className=\"grid grid-cols-2 md:flex items-center justify-center gap-4\">\n                    <BotTradeSettingButton\n                      icon={images.bot.delete_gold}\n                      iconHover={images.bot.delete}\n                      classNameHover=\"background-animation\"\n                      onClick={() => {\n                        setIsDeletingByList(true);\n                        handleOpenPopupModal();\n                      }}\n                    >\n                      Xoá\n                    </BotTradeSettingButton>\n                    <BotTradeSettingButton\n                      icon={images.bot.reload_gold}\n                      iconHover={images.bot.reload}\n                      classNameHover=\"background-animation\"\n                      onClick={() => {\n                        showIsDevelopingModal();\n                        // resetAllCurrent();\n                      }}\n                    >\n                      Tặng\n                    </BotTradeSettingButton>\n                  </div>\n                </div>\n              )}\n\n            <div\n              className={`border border-ink-05 rounded-2xl w-full ${!isLargeDesktop ? 'overflow-x-scroll border-collapse' : ''\n                }`}\n            >\n              <table className=\"w-full\" {...getTableProps()}>\n                <thead>\n                  {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                      {headerGroup.headers.map((column) => (\n                        <th\n                          className={`p-4 last:w-[1%] whitespace-nowrap 2xl:whitespace-normal last:whitespace-nowrap bg-primary-05 first-of-type:rounded-tl-2xl last-of-type:rounded-tr-2xl text-sm text-ink-100 font-normal`}\n                          {...column.getHeaderProps()}\n                        >\n                          {column.render('Header')}\n                        </th>\n                      ))}\n                    </tr>\n                  ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                  {rows.map((row) => {\n                    prepareRow(row);\n                    return (\n                      <tr\n                        className={`border-b border-ink-10 last:border-0 whitespace-nowrap text-ellipsis`}\n                        {...row.getRowProps()}\n                      >\n                        {row.cells.map((cell) => (\n                          <td\n                            className=\"p-4 last:w-[1%] last:whitespace-nowrap\"\n                            {...cell.getCellProps()}\n                          >\n                            {cell.render('Cell')}\n                          </td>\n                        ))}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n\n            {/* PAGINATION */}\n            <div\n              className={`flex flex-col justify-center items-end md:flex-row md:justify-end md:items-center gap-2`}\n            >\n              <div>\n                <SelectInput\n                  menuRef={menuRef}\n                  value={selectedPageSizeOption}\n                  onChange={handleSelectPageSize}\n                  inputClassName=\"!py-2 !pr-8 text-sm\"\n                  indicatorContainerClassName=\"!right-3\"\n                  indicatorContainerIconClassName=\"!w-[1rem]\"\n                  menuPortalClassName={`min-w-[10.25rem] ${isMobile ? 'translate-x-[-3.2rem]' : ''\n                    }`}\n                  name=\"select\"\n                  options={PAGE_SIZE_OPTIONS}\n                />\n              </div>\n\n              <ReactPaginate\n                breakLabel=\"...\"\n                onPageChange={handlePageChange}\n                marginPagesDisplayed={isMobile ? 2 : 3}\n                pageCount={totalPages}\n                previousLabel={\n                  <div\n                    onMouseLeave={() => {\n                      setIsPrevHover(false);\n                    }}\n                    onMouseEnter={() => {\n                      setIsPrevHover(true);\n                    }}\n                    className=\"p-[0.375rem] border-input-ink before:rounded-lg\"\n                  >\n                    {isPrevHover ? (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_left_arrow_gold}\n                        alt=\"BotLambotrade\"\n                      />\n                    ) : (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_left_arrow}\n                        alt=\"BotLambotrade\"\n                      />\n                    )}\n                  </div>\n                }\n                nextLabel={\n                  <div\n                    onMouseLeave={() => {\n                      setIsNextHover(false);\n                    }}\n                    onMouseEnter={() => {\n                      setIsNextHover(true);\n                    }}\n                    className=\"p-[0.375rem] border-input-ink before:rounded-lg\"\n                  >\n                    {isNextHover ? (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_right_arrow_gold}\n                        alt=\"BotLambotrade\"\n                      />\n                    ) : (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_right_arrow}\n                        alt=\"BotLambotrade\"\n                      />\n                    )}\n                  </div>\n                }\n                forcePage={page}\n                // pageClassName=\"py-[0.3125rem] px-3 border-input-ink before:rounded-lg cursor-pointer\"\n                pageLinkClassName=\"page-link relative z-10 py-[0.3125rem] px-3 border-input-ink before:rounded-lg cursor-pointer\"\n                previousClassName=\"page-item flex\"\n                previousLinkClassName=\"page-link\"\n                nextClassName=\"page-item flex\"\n                nextLinkClassName=\"page-link relative z-10\"\n                breakClassName=\"page-item py-[0.375rem] px-3 border-input-ink before:rounded-lg cursor-pointer\"\n                breakLinkClassName=\"page-link z-10\"\n                containerClassName=\"flex items-center gap-x-2 text-ink-80 text-sm\"\n                activeClassName=\"pagination-active border-primary before:rounded-lg\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* UPSERT MODAL */}\n      <CustomModal\n        isOpen={isUpsertModalOpen}\n        handleOpen={handleOpenUpsertModal}\n        handleClose={handleCloseUpsertModal}\n        zIndex={19}\n      >\n        <animated.div style={isMobile ? animationUpsertModalMobile : {}}>\n          <form onSubmit={formikUpsert.handleSubmit}>\n            <div className=\"absolute flex flex-col md:left-[50%] md:top-[50%] md:translate-x-[-50%] md:translate-y-[-50%] bg-background-80 h-[100svh] w-full md:w-[45rem] md:h-auto md:rounded-3xl overflow-y-auto\">\n              {/* HEADING */}\n              <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n                <h1 className=\"text-xl text-ink-100 font-semibold\">\n                  {!isEditing\n                    ? 'Thêm mới cấu hình phương pháp Xbot - Bóng nước'\n                    : 'Chỉnh sửa cấu hình phương pháp Xbot - Bóng nước'}\n                </h1>\n                <CloseOutlined\n                  className=\"cursor-pointer\"\n                  onClick={handleCloseUpsertModal}\n                />\n              </div>\n              {/* FORM */}\n              <div className=\"md:max-h-[calc(100vh-19rem)] overflow-y-auto\">\n                <div\n                  className=\"bg-background-80 rounded-3xl p-6 flex flex-col\"\n                  ref={scrollElement}\n                >\n                  {/* Tên phương pháp */}\n                  <TextInput\n                    fullWidth={true}\n                    name=\"configName\"\n                    id=\"configName\"\n                    label=\"Tên phương pháp\"\n                    type=\"text\"\n                    value={formikUpsert.values.configName}\n                    onChange={formikUpsert.handleChange}\n                    resetValue={() => {\n                      formikUpsert.setFieldValue('configName', '');\n                    }}\n                    onBlur={formikUpsert.handleBlur}\n                    placeholder=\"Tên phương pháp\"\n                    error={\n                      formikUpsert.touched.configName &&\n                      Boolean(formikUpsert.errors.configName)\n                    }\n                    helperText={\n                      formikUpsert.touched.configName &&\n                      formikUpsert.errors.configName\n                    }\n                    containerClassName=\"mb-6\"\n                  />\n\n                  {/* CHỌN BÓNG MUỐN THÊM */}\n                  <div className=\"mb-6\">\n                    <div className=\"mb-4 flex items-center justify-between\">\n                      <p className=\"text-sm text-ink-100\">\n                        CHỌN BÓNG MUỐN THÊM\n                      </p>\n                    </div>\n\n                    <div className=\"p-6 rounded-xl bg-ink-05\">\n                      <div className=\"mx-auto max-w-[284px] flex flex-col gap-4\">\n                        {generateArrayOfAndFrom(4, 1).map((rowIdx) => (\n                          <div\n                            key={rowIdx}\n                            className=\"grid grid-cols-5 items-center justify-center gap-4\"\n                          >\n                            {generateArrayOfAndFrom(5, 0).map((colIdx) => {\n                              const doesExist = conditionsForm.some(\n                                (val) => Number(val.bubble) === rowIdx + 4 * colIdx\n                              );\n                              const isDisabled = rowIdx % 2 === 0;\n\n                              return (\n                                <Bubble\n                                  key={rowIdx + 4 * colIdx}\n                                  className={`rounded-full ${isDisabled\n                                    ? 'bg-primary-05 cursor-not-allowed'\n                                    : doesExist\n                                      ? 'bg-primary-100 cursor-pointer'\n                                      : 'border-primary-button cursor-pointer'\n                                    }`}\n                                  textClassName={`bg-clip-text text-transparent ${isDisabled\n                                    ? 'bg-primary-100'\n                                    : doesExist\n                                      ? 'bg-background-80'\n                                      : 'bg-primary-100'\n                                    }`}\n                                  text={rowIdx + 4 * colIdx}\n                                  onClick={() => {\n                                    form.setFieldValue('conditions', [\n                                      { board: 4, bubble: 1, result_type: 1 }\n                                    ])\n                                    // console.log(rowIdx + 4 * colIdx, 'bubbleIdx')\n                                    if (!isDisabled) {\n                                      const bubbleIdx = rowIdx + 4 * colIdx;\n                                      setTempBubbleOption(\n                                        generateBaseBubbleOption()\n                                      );\n                                      setSelectedBubbleIdx(bubbleIdx);\n                                      handleOpenBubbleOptionPopupModal();\n                                    }\n                                  }}\n                                />\n                              );\n                            })}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Điều kiện đã thêm */}\n                  <div className=\"mb-6\">\n                    <div className=\"mb-4 flex items-center justify-between\">\n                      <p className=\"text-sm text-ink-100\">ĐIỀU KIỆN ĐÃ THÊM</p>\n                      <div\n                        className=\"flex items-center gap-2 cursor-pointer\"\n                        onClick={() => {\n                          formikUpsert.setFieldValue('conditions', {});\n                          setConditionsForm([])\n                          // setChidConditions([])\n                        }}\n                      >\n                        <img\n                          className=\"w-[1.5rem]\"\n                          src={images.bot.delete_gold}\n                          alt=\"BotLambotrade\"\n                        />\n                        <p className=\"text-ink-100\">Xoá tất cả</p>\n                      </div>\n                    </div>\n\n                    <div className=\"p-6 rounded-xl bg-ink-05\">\n\n                      <div className=\"mx-auto max-w-[284px] grid grid-cols-5 items-center justify-center gap-4\">\n                        {conditionsForm.map((e) => (\n                          <div className='relative cursor-pointer' onClick={() => {\n                            // setTempBubbleOption(e.fconditions);\n                            form.setFieldValue('conditions', e.conditions)\n                            // setChidConditions(e.conditions)\n                            setSelectedBubbleIdx(e.bubble)\n                            setSelectedCondition(e)\n                            setSelectedBetType(e.betType)\n                            handleOpenBubbleOptionPopupModal();\n                          }}>\n                            <div className='count-bubble'>{e.conditions.length}</div>\n                            <Bubble\n                              key={e.bubble}\n                              text={e.bubble}\n                              className={e.betType === 1 ? \"bg-green-circle\" : \"bg-red-circle\"}\n                              textClassName=\"text-ink-100\"\n                            />\n                          </div>\n                        )\n                        )}\n                      </div>\n                    </div>\n\n                    {conditionError && (\n                      <div className=\"px-2 py-3 text-red-100 text-sm\">\n                        {conditionError}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              {/* BUTTON */}\n              <div className=\"mt-auto p-6 flex justify-end items-center\">\n                <GoldButton\n                  type=\"submit\"\n                  buttonClassName=\"flex-grow md:flex-initial\"\n                >\n                  {!isEditing ? 'Lưu phương pháp' : 'Cập nhật phương pháp'}\n                </GoldButton>\n              </div>\n            </div>\n          </form>\n        </animated.div>\n      </CustomModal>\n\n      {/* Delete Modal */}\n      <CustomModal\n        isOpen={isPopupOpen}\n        handleOpen={handleOpenPopupModal}\n        handleClose={handleClosePopupModal}\n      >\n        <div\n          className={`absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] p-6 md:w-[31.25rem] w-[calc(100vw-2rem)] bg-background-80 rounded-3xl text-center`}\n        >\n          <div className=\"flex items-center justify-center\">\n            <img\n              className=\"mb-4 w-[5.5rem]\"\n              src={images.copy.delete}\n              alt=\"BotLambotrade\"\n            />\n          </div>\n          <h3 className=\"mb-2 mx-auto max-w-[18.75rem] text-xl text-ink-100\">\n            Xoá phương pháp\n          </h3>\n          <p className=\"mb-12 mx-auto max-w-[18.75rem] text-ink-80\">\n            Bạn có chắc chắn muốn xoá phương pháp này không?\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 justify-center items-center gap-4\">\n            <GreyButton onClick={handleClosePopupModal}>Huỷ</GreyButton>\n            <GoldButton\n              onClick={() => {\n                if (isDeletingByList) {\n                  deleteSettingByListIds();\n                } else {\n                  deleteSettingById();\n                }\n                handleClosePopupModal();\n              }}\n            >\n              Xoá\n            </GoldButton>\n          </div>\n        </div>\n      </CustomModal>\n\n      {/* POPUP Validate */}\n      <CustomValidateModel\n        isOpen={modalAttributes.isOpen}\n        icon={modalAttributes.icon}\n        headingMessage={modalAttributes.headingMessage}\n        message={modalAttributes.message}\n        buttonMessage={modalAttributes.buttonMessage}\n        handleOpen={modalAttributes.handleOpen}\n        handleClose={modalAttributes.handleClose}\n      />\n\n      {/* GIFT POPUP MODAL */}\n      <CustomModal\n        isOpen={isGiftPopupOpen}\n        handleOpen={handleOpenGiftPopupModal}\n        handleClose={handleCloseGiftPopupModal}\n      >\n        <div className=\"absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] w-[calc(100vw-2rem)] md:w-[31.25rem] bg-background-80 rounded-3xl\">\n          <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n            <h3 className=\"text-xl text-ink-100 font-semibold\">\n              Tặng phương pháp\n            </h3>\n            <CloseOutlined\n              className=\"cursor-pointer\"\n              onClick={handleCloseGiftPopupModal}\n            />\n          </div>\n          <div className=\"p-6\">\n            <TextInput\n              id=\"giftUsername\"\n              name=\"giftUsername\"\n              type=\"text\"\n              label=\"Tên tài khoản muốn tặng\"\n              fullWidth\n              value={giftUsername.value}\n              onChange={(e) => {\n                setGiftUsername((prev) => ({ ...prev, value: e.target.value }));\n              }}\n              onBlur={() => {\n                setGiftUsername((prev) => ({ ...prev, touched: true }));\n              }}\n              error={giftUsername.touched && Boolean(giftUsername.error)}\n              helperText={giftUsername.touched && giftUsername.error}\n              containerClassName=\"mb-6\"\n            />\n            <div className=\"flex justify-center md:justify-end\">\n              <CustomButton\n                className=\"w-full md:w-[12rem] py-4\"\n                background=\"bg-primary-100\"\n                textColor=\"bg-background-100\"\n                textClassName=\"font-bold\"\n              >\n                Gửi tặng\n              </CustomButton>\n            </div>\n          </div>\n        </div>\n      </CustomModal>\n\n      {/* Thêm điều kiện cho bóng */}\n      <CustomModal\n        isOpen={isBubbleOptionOpen}\n        handleOpen={handleOpenBubbleOptionPopupModal}\n        handleClose={handleCloseBubbleOptionPopupModal}\n        zIndex={20}\n      >\n        <div className=\"absolute flex flex-col md:left-[50%] md:top-[50%] md:translate-x-[-50%] md:translate-y-[-50%] bg-background-80 h-[100svh] w-full md:w-[45rem] md:h-auto md:rounded-3xl overflow-y-auto\">\n          <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n            <h3 className=\"text-xl text-ink-100 font-semibold\">\n              Thêm điều kiện cho bóng số : {selectedBubbleIdx}\n            </h3>\n            <CloseOutlined\n              className=\"cursor-pointer\"\n              onClick={handleCloseBubbleOptionPopupModal}\n            />\n          </div>\n          <div className=\"p-6 md:max-h-[calc(100vh-19rem)] overflow-y-auto\">\n            {/* LỆNH VÀO */}\n            <div className=\"mb-6\">\n              <p className=\"mb-4 text-sm text-ink-100\">LỆNH VÀO</p>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div\n                  className={`p-4 flex items-center justify-center gap-2 rounded-xl cursor-pointer ${selectedBetType === 1\n                    ? 'bg-primary-05 border-primary'\n                    : 'bg-primary-05-hover border-input-ink'\n                    }`}\n                  onClick={() => {\n                    const tempBubbleToSet = { ...tempBubbleOption };\n                    tempBubbleToSet['order_type'] = 'BUY';\n                    setTempBubbleOption(tempBubbleToSet);\n                    setSelectedBetType(1)\n                  }}\n                >\n                  <img\n                    className=\"w-[1.5rem]\"\n                    src={images.table.buy}\n                    alt=\"BotLambotrade\"\n                  />\n                  <p className=\"text-ink-100\">Tăng</p>\n                </div>\n                <div\n                  className={`p-4 flex items-center justify-center gap-2 rounded-xl cursor-pointer ${selectedBetType === - 1\n                    ? 'bg-primary-05 border-primary'\n                    : 'bg-primary-05-hover border-input-ink'\n                    }`}\n                  onClick={() => {\n                    const tempBubbleToSet = { ...tempBubbleOption };\n                    tempBubbleToSet['order_type'] = 'SELL';\n                    setTempBubbleOption(tempBubbleToSet);\n                    setSelectedBetType(-1)\n                  }}\n                >\n                  <img\n                    className=\"w-[1.5rem]\"\n                    src={images.table.sell}\n                    alt=\"BotLambotrade\"\n                  />\n                  <p className=\"text-ink-100\">Giảm</p>\n                </div>\n              </div>\n            </div>\n\n            {/* BẢNG ĐIỀU KIỆN & TÍN HIỆU */}\n            <div className=\"mb-6\">\n              <div className=\"mb-4 flex items-center justify-between\">\n                <p className=\"text-sm text-ink-100\">\n                  BẢNG ĐIỀU KIỆN & TÍN HIỆU\n                </p>\n                {/* <p\n                  className=\"underline-primary bg-primary-100 bg-clip-text text-transparent text-sm cursor-pointer\"\n                  onClick={handleOpenBubbleGuidePopupModal}\n                >\n                  Xem hướng dẫn\n                </p> */}\n              </div>\n              <div className='flex flex-col gap-4'>\n                <Form\n                  name=\"dynamic_form_nest_item\"\n                  onFinish={(v) => {}}\n                  autoComplete=\"off\"\n                  layout='vertical'\n                  form={form}\n                >\n                  <Form.List name=\"conditions\">\n                    {(fields, { add, remove }) => (\n                      <>\n                        {fields.map(({ key, name, ...restField }) => (\n                          <Space key={key} className='space-ant-custom' align=\"baseline\">\n                            <Form.Item\n                              initialValue={4}\n                              {...restField}\n                              className='class-item-custom'\n                              label={<p className='custom-label'>Bảng</p>}\n                              name={[name, 'board']}\n                            >\n                              <Select dropdownClassName='dropdown-custom' className='bb-custom-select' placeholder=\"Chọn bảng\" style={{\n                                width: '100%'\n                              }} options={Array.from({ length: 5 }).map((_, index: number) => {\n                                return {\n                                  label: index + 1,\n                                  value: index + 1\n                                };\n                              })} />\n                            </Form.Item>\n                            <Form.Item\n                              initialValue={1}\n                              {...restField}\n                              className='class-item-custom'\n                              label={<p className='custom-label'>Bóng</p>}\n                              name={[name, 'bubble']}\n                            >\n                              <Select dropdownClassName='dropdown-custom' className='bb-custom-select' placeholder=\"Chọn bóng\" options={Array.from({ length: 20 }).map((_, index: number) => {\n                                return {\n                                  label: index + 1,\n                                  value: index + 1\n                                };\n                              })} />\n                            </Form.Item>\n                            <Form.Item\n                              {...restField}\n                              initialValue={1}\n                              className='class-item-custom'\n                              label={<p className='custom-label'>Kết quả</p>}\n                              name={[name, 'result_type']}\n                            >\n                              <Select dropdownClassName='dropdown-custom center' className='bb-custom-select' placeholder=\"Chọn bảng\" style={{\n                                width: '100%'\n                              }} options={[\n                                { label: <div className=\"w-[1rem] h-[1rem] rounded-full cursor-pointer bg-green-circle\"></div>, value: 1 },\n                                { label: <div className=\"w-[1rem] h-[1rem] rounded-full cursor-pointer bg-red-circle\"></div>, value: -1 },\n                                { label: <div className=\"w-[1rem] h-[1rem] rounded-full cursor-pointer bg-orange-100\"></div>, value: 5 }\n                              ]} />\n\n                            </Form.Item>\n                            <div onClick={() => {\n                              if (fields.length > 1)\n                                remove(name)\n                            }} style={{\n                              color: '#f8fafc',\n                              top: '35px',\n                              left: '25%'\n                            }} className={`${fields.length < 2 ? \"disable-remove\" : ''} absolute w-[1.5rem] h-[1.5rem] flex items-center justify-center rounded-full cursor-pointer bg-red-circle`}>\n                              <CloseOutlined />\n                            </div>\n                          </Space>\n                        ))}\n                        <Form.Item>\n                          <Button className='flex flex-row justify-center items-center bg-green-circle custom-add-field' onClick={() => {\n                            add()\n                            // const existing: TypeConditionChid[] = Array.isArray(form.getFieldValue('conditions')) ? form.getFieldValue('conditions').filter((e: any) => e != null) : []\n                            // const newChidConditions = [...existing, { board: 4, bubble: 1, result_type: 1, id: `${uniqueId()}41` }]\n                            // form.setFieldValue('conditions', newChidConditions)\n                          }} block icon={<PlusOutlined />}>\n                            Thêm tín hiệu\n                          </Button>\n                        </Form.Item>\n                      </>\n                    )}\n                  </Form.List>\n                </Form>\n\n                {/* <div className=\"p-6 grid grid-cols-2 gap-6 md:gap-8 md:grid-cols-4 bg-ink-05 rounded-xl\">\n                  {Object.entries(tempBubbleOption).map(([key, values]) => {\n                    if (key === 'order_type') return;\n                    return (\n                      <div key={key}>\n                        <p className=\"mb-3\">Bảng {key}</p>\n                        <div className=\"flex flex-col gap-[2px]\">\n                          {generateArrayOfAndFrom(4, 0).map((rowIdx) => (\n                            <div key={rowIdx} className=\"flex gap-[2px]\">\n                              {generateArrayOfAndFrom(5, 0).map((colIdx) => {\n                                const idxInValues = rowIdx + 4 * colIdx;\n                                const isWin = values[idxInValues] === 1;\n                                const isLose = values[idxInValues] === -1;\n                                const isDraw = values[idxInValues] === 5;\n\n                                return (\n                                  <div\n                                    key={rowIdx + 4 * colIdx}\n                                    className={`w-[1.5rem] h-[1.5rem] rounded-full cursor-pointer ${isWin\n                                      ? 'bg-green-circle'\n                                      : isLose\n                                        ? 'bg-red-circle'\n                                        : isDraw\n                                          ? 'bg-orange-100'\n                                          : 'bg-ink-10'\n                                      }`}\n                                    onClick={() => {\n                                      const tempBubbleToSet = {\n                                        ...tempBubbleOption,\n                                      };\n                                      let result_type = 0\n                                      if (isWin) {\n                                        tempBubbleToSet[key][idxInValues] = -1;\n                                        result_type = -1\n                                      } else if (isLose) {\n                                        tempBubbleToSet[key][idxInValues] = 5;\n                                        result_type = 5\n                                      } else if (isDraw) {\n                                        tempBubbleToSet[key][idxInValues] = 0;\n                                        result_type = 0\n                                      } else {\n                                        tempBubbleToSet[key][idxInValues] = 1;\n                                        result_type = 1\n                                      }\n                                      setChidConditions(prev => {\n                                        const arr = [...prev];\n                                        const foundIndex = arr.findIndex(e => String(e.board) === String(key) && String(e.bubble) === String(idxInValues + 1));\n                                        if (foundIndex !== -1) {\n                                          arr[foundIndex] = { ...arr[foundIndex], result_type: result_type };\n                                        } else {\n                                          arr.push({\n                                            board: Number(key),\n                                            bubble: idxInValues + 1,\n                                            result_type: result_type\n                                          });\n                                        }\n                                        if (result_type === 0) {\n                                          return arr.filter((e) => String(e.bubble) !== String(idxInValues + 1))\n                                        } else {\n                                          return arr\n                                        }\n                                      });\n                                      setTempBubbleOption(tempBubbleToSet);\n                                    }}\n                                  ></div>\n                                );\n                              })}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div> */}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-auto p-6 grid grid-cols-2 md:flex justify-end items-center gap-4\">\n            <CustomButton\n              className={`py-4 md:min-w-[12rem] basis-1/2 md:basis-auto flex-grow md:flex-initial`}\n              background=\"bg-ink-05\"\n              textClassName=\"bg-primary-100 font-bold\"\n              onClick={() => {\n                // setChidConditions([])\n                form.resetFields()\n                handleCloseBubbleOptionPopupModal();\n                const conditionsToSet = { ...formikUpsert.values.conditions };\n                delete conditionsToSet[selectedBubbleIdx];\n                const sortedConditionsToSet = Object.keys(conditionsToSet)\n                  .sort((a, b) => parseInt(a) - parseInt(b))\n                  .reduce((acc: Conditions, key) => {\n                    acc[key] = conditionsToSet[key];\n                    return acc;\n                  }, {});\n                formikUpsert.setFieldValue('conditions', sortedConditionsToSet);\n              }}\n            >\n              Xoá\n            </CustomButton>\n            <CustomButton\n              className={`py-4 md:min-w-[12rem] basis-1/2 md:basis-auto flex-grow md:flex-initial`}\n              background={`bg-primary-100`}\n              textClassName={`bg-background-100 font-bold`}\n              onClick={() => {\n                setConditionsForm(prev => {\n                  const newArr = [...prev];\n                  const foundIndex = newArr.findIndex(e => e.id === selectedCondition?.id);\n\n                  const eConditions = Array.isArray(form.getFieldValue('conditions')) ? form.getFieldValue('conditions') : []\n                  if (foundIndex !== -1) {\n                    newArr[foundIndex] = { ...newArr[foundIndex], bubble: selectedBubbleIdx, conditions: eConditions, fconditions: tempBubbleOption, betType: selectedBetType };\n                  } else {\n                    newArr.push({\n                      betType: selectedBetType,\n                      bubble: selectedBubbleIdx,\n                      conditions: eConditions,\n                      fconditions: tempBubbleOption,\n                      id: uniqueId() + String(Math.random())\n                    });\n                  }\n                  // console.log(newArr, 'new')\n                  return newArr.filter((e) => e.conditions.length > 0);\n                });\n                setSelectedCondition(null)\n                // form.resetFields()\n                // setChidConditions([])\n                handleCloseBubbleOptionPopupModal();\n                const conditionsToSet = { ...formikUpsert.values.conditions };\n                conditionsToSet[selectedBubbleIdx] = tempBubbleOption;\n                const sortedConditionsToSet = Object.keys(conditionsToSet)\n                  .sort((a, b) => parseInt(a) - parseInt(b))\n                  .reduce((acc: Conditions, key) => {\n                    acc[key] = conditionsToSet[key];\n                    return acc;\n                  }, {});\n                formikUpsert.setFieldValue('conditions', sortedConditionsToSet);\n                // Remove error on conditions\n                setConditionError('');\n              }}\n            >\n              Xác nhận\n            </CustomButton>\n          </div>\n        </div>\n      </CustomModal>\n\n      {/* Xem Dieu Kien */}\n      <CustomModal\n        isOpen={isConditionPopupOpen}\n        handleOpen={handleOpenConditionPopupModal}\n        handleClose={() => {\n          setConditionView(generateBaseBubbleOption())\n          handleCloseConditionPopupModal()\n        }}\n      >\n        <div className=\"absolute flex flex-col md:left-[50%] md:top-[50%] md:translate-x-[-50%] md:translate-y-[-50%] bg-background-80 h-[100svh] w-full md:w-[45rem] md:h-auto md:rounded-3xl overflow-y-auto\">\n          <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n            <h3 className=\"text-xl text-ink-100 font-semibold\">\n              Xem điều kiện\n            </h3>\n            <CloseOutlined\n              className=\"cursor-pointer\"\n              onClick={() => {\n                setConditionView(generateBaseBubbleOption())\n                handleCloseConditionPopupModal()\n              }}\n            />\n          </div>\n          <div className=\"p-6\">\n            {/* BÓNG ĐÃ THÊM */}\n            <div className=\"mb-6\">\n              <div className=\"mb-4 flex items-center justify-between\">\n                <p className=\"text-sm text-ink-100\">BÓNG ĐÃ THÊM</p>\n              </div>\n\n              <div className=\"p-6 rounded-xl bg-ink-05\">\n                <div className=\"mx-auto max-w-[284px] grid grid-cols-5 items-center justify-center gap-4\">\n                  {/* {Object.keys(selectedBotPersonalSignalResult.conditions)\n                    .length === 0 && <div className=\"w-[44px] h-[44px]\"></div>}\n                  {Object.keys(selectedBotPersonalSignalResult.conditions)\n                    .length > 0 &&\n                    Object.entries(\n                      selectedBotPersonalSignalResult.conditions\n                    ).map(([key, value]) => {\n                      return (\n                        <Bubble\n                          key={key}\n                          text={key}\n                          className={`${selectedBubbleMethodConditionToView === key\n                            ? 'bg-green-circle'\n                            : 'bg-ink-10'\n                            } cursor-pointer`}\n                          textClassName={`${selectedBubbleMethodConditionToView === key\n                            ? 'text-ink-100'\n                            : 'text-green-100'\n                            }`}\n                          onClick={() => {\n                            setSelectedBubbleMethodConditionToView(key);\n                          }}\n                        />\n                      );\n                    })} */}\n                  {selectedBotPersonalSignalResult.fconditions.map((e) => (\n                    <Bubble\n                      key={e.id}\n                      text={e.bubble}\n                      className={`${e.id === selectedBubbleMethodConditionToView\n                        ? e.betType === 1 ? 'bg-green-circle' : e.betType === -1 ? 'bg-red-circle' : 'bg-orange-100'\n                        : 'bg-ink-10'\n                        } cursor-pointer`}\n                      textClassName={`${e.id === selectedBubbleMethodConditionToView\n                        ? 'text-ink-100'\n                        : 'text-green-100'\n                        }`}\n                      onClick={() => {\n                        setSelectedBubbleMethodConditionToView(e.id);\n                        let obj: any = generateBaseBubbleOption()\n                        const arr = e.conditions\n                        arr.forEach(item => {\n                          let { board, bubble, result_type } = item;\n                          obj[board][bubble - 1] = result_type;\n                        });\n\n                        setConditionView(obj)\n                      }}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* BẢNG ĐIỀU KIỆN & TÍN HIỆU */}\n            <div className=\"mb-6\">\n              <div className=\"mb-4 flex items-center justify-between\">\n                <p className=\"text-sm text-ink-100\">\n                  BẢNG ĐIỀU KIỆN & TÍN HIỆU\n                </p>\n              </div>\n              <div className=\"p-6 grid grid-cols-2 gap-6 md:gap-8 md:grid-cols-4 bg-ink-05 rounded-xl\">\n                {Object.entries(conditionViews).map(([key, values]) => {\n                  if (key === 'order_type') return;\n                  return (\n                    <div key={key}>\n                      <p className=\"mb-3\">Bảng {key}</p>\n                      <div className=\"flex flex-col gap-[2px]\">\n                        {generateArrayOfAndFrom(4, 0).map((rowIdx) => (\n                          <div key={rowIdx} className=\"flex gap-[2px]\">\n                            {generateArrayOfAndFrom(5, 0).map((colIdx) => {\n                              const idxInValues = rowIdx + 4 * colIdx;\n                              const isWin = values[idxInValues] === 1;\n                              const isLose = values[idxInValues] === -1;\n                              const isDraw = values[idxInValues] === 5;\n                              return (\n                                <div\n                                  key={rowIdx + 4 * colIdx}\n                                  className={`w-[1.5rem] h-[1.5rem] rounded-full cursor-pointer ${isWin\n                                    ? 'bg-green-circle'\n                                    : isLose\n                                      ? 'bg-red-circle'\n                                      : isDraw\n                                        ? 'bg-orange-100'\n                                        : 'bg-ink-10'\n                                    }`}\n                                  onClick={() => {\n                                    const tempBubbleToSet = {\n                                      ...tempBubbleOption,\n                                    };\n                                    let result_type = 0\n                                    if (isWin) {\n                                      tempBubbleToSet[key][idxInValues] = -1;\n                                      result_type = -1\n                                    } else if (isLose) {\n                                      tempBubbleToSet[key][idxInValues] = 5;\n                                      result_type = 5\n                                    } else if (isDraw) {\n                                      tempBubbleToSet[key][idxInValues] = 0;\n                                      result_type = 0\n                                    } else {\n                                      tempBubbleToSet[key][idxInValues] = 1;\n                                      result_type = 1\n                                    }\n                                    // setChidConditions(prev => {\n                                    //   const arr = [...prev];\n                                    //   const foundIndex = arr.findIndex(e => String(e.board) === String(key) && String(e.bubble) === String(idxInValues + 1));\n                                    //   if (foundIndex !== -1) {\n                                    //     arr[foundIndex] = { ...arr[foundIndex], result_type: result_type };\n                                    //   } else {\n                                    //     arr.push({\n                                    //       board: Number(key),\n                                    //       bubble: idxInValues + 1,\n                                    //       result_type: result_type,\n                                    //       id: `${uniqueId()}${key}${idxInValues + 1}`\n                                    //     });\n                                    //   }\n                                    //   if (result_type === 0) {\n                                    //     return arr.filter((e) => String(e.bubble) !== String(idxInValues + 1))\n                                    //   } else {\n                                    //     return arr\n                                    //   }\n                                    // });\n                                    setTempBubbleOption(tempBubbleToSet);\n                                  }}\n                                ></div>\n                              );\n                            })}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n              {/* <div className=\"p-6 grid grid-cols-2 gap-6 md:gap-8 md:grid-cols-4 bg-ink-05 rounded-xl\">\n                {selectedBotPersonalSignalResult?.conditions?.[\n                  selectedBubbleMethodConditionToView\n                ] &&\n                  Object.entries(\n                    selectedBotPersonalSignalResult.conditions[\n                    selectedBubbleMethodConditionToView\n                    ]\n                  ).map(([key, values]) => {\n                    if (key === 'order_type') return;\n\n                    return (\n                      <div key={key}>\n                        <p className=\"mb-3\">Bảng {key}</p>\n                        <div className=\"flex flex-col gap-[2px]\">\n                          {generateArrayOfAndFrom(4, 0).map((rowIdx) => (\n                            <div key={rowIdx} className=\"flex gap-[2px]\">\n                              {generateArrayOfAndFrom(5, 0).map((colIdx) => {\n                                const idxInValues = rowIdx + 4 * colIdx;\n                                const isWin = values[idxInValues] === 1;\n                                const isLose = values[idxInValues] === -1;\n                                const isDraw = values[idxInValues] === 5;\n\n                                return (\n                                  <div\n                                    key={rowIdx + 4 * colIdx}\n                                    className={`w-[1.5rem] h-[1.5rem] rounded-full ${isWin\n                                      ? 'bg-green-circle'\n                                      : isLose\n                                        ? 'bg-red-circle'\n                                        : isDraw\n                                          ? 'bg-orange-100'\n                                          : 'bg-ink-10'\n                                      }`}\n                                  ></div>\n                                );\n                              })}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div> */}\n            </div>\n          </div>\n        </div>\n      </CustomModal>\n\n      {/* Xem hướng dẫn */}\n      <CustomModal\n        isOpen={isBubbleGuideOpen}\n        handleOpen={handleOpenBubbleGuidePopupModal}\n        handleClose={handleCloseBubbleGuidePopupModal}\n        zIndex={20}\n      >\n        <div className=\"absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] w-[calc(100vw-2rem)] md:w-[31.25rem] bg-background-80 rounded-3xl\">\n          <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n            <h3 className=\"text-xl text-ink-100 font-semibold\">\n              Xem hướng dẫn\n            </h3>\n            <CloseOutlined\n              className=\"cursor-pointer\"\n              onClick={handleCloseBubbleGuidePopupModal}\n            />\n          </div>\n          <div className=\"p-6\">\n            <div className=\"mb-6 flex flex-col gap-4\">\n              <div className=\"flex items-center gap-3\">\n                <img\n                  className=\"w-[1.5rem]\"\n                  src={images.table.buy}\n                  alt=\"BotLambotrade\"\n                />\n                <p className=\"text-sm text-ink-100\">Bóng tăng ấn 1 lần</p>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <img\n                  className=\"w-[1.5rem]\"\n                  src={images.table.sell}\n                  alt=\"BotLambotrade\"\n                />\n                <p className=\"text-sm text-ink-100\">Bóng giảm ấn 2 lần</p>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-[1.5rem] h-[1.5rem] bg-ink-10 rounded-full\"></div>\n                <p className=\"text-sm text-ink-100\">\n                  Bỏ qua bóng vui lòng ko ấn hoặc ấn 3 lần nếu đã chọn\n                </p>\n              </div>\n            </div>\n            <div className=\"flex justify-center md:justify-end\">\n              <CustomButton\n                className=\"w-full md:w-[12rem] py-4\"\n                background=\"bg-primary-100\"\n                textColor=\"bg-background-100\"\n                textClassName=\"font-bold\"\n                onClick={handleCloseBubbleGuidePopupModal}\n              >\n                Đã hiểu\n              </CustomButton>\n            </div>\n          </div>\n        </div>\n      </CustomModal>\n    </>\n  );\n};\n\nexport default BotTradeMethodBubble;\n","import React, { useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport BotTradeMethodResultCanvas from './BotTradeMethodResultCanvas';\nimport BotTradeMethodType from './BotTradeMethodType';\nimport BotTradeMethodBuySell from './BotTradeMethodBuySell';\nimport BotTradeMethodBubble from './BotTradeMethodBubble';\nimport './style.scss'\n\nconst WIN_LOSES_ONE = [\n  true,\n  true,\n  true,\n  false,\n  true,\n  false,\n  true,\n  false,\n  false,\n  false,\n  false,\n  true,\n  false,\n  false,\n  false,\n  false,\n  true,\n  false,\n  false,\n  true,\n];\n\nconst BotTradeMethod = () => {\n  const [isBotTradeBuySell, setIsBotTradeBuySell] = useState(true);\n\n  return (\n    <>\n      <Helmet>\n        <title>BotLambotrade | Bot Trade</title>\n      </Helmet>\n\n      <BotTradeMethodType\n        isBotTradeBuySell={isBotTradeBuySell}\n        setIsBotTradeBuySell={setIsBotTradeBuySell}\n      />\n\n      {/* BOT TRADE BUY SELL */}\n      {isBotTradeBuySell && <BotTradeMethodBuySell />}\n\n      {/* BOT TRADE BUBBLE */}\n      {!isBotTradeBuySell && <BotTradeMethodBubble />}\n\n      {/* Canvas kết quả  */}\n      {/* <BotTradeMethodResultCanvas results={WIN_LOSES_ONE} /> */}\n    </>\n  );\n};\n\nexport default BotTradeMethod;\n","import React, { FC, useState } from 'react';\n\ninterface BotTradeSettingButtonProps {\n  children: React.ReactNode;\n  className?: string;\n  classNameHover?: string;\n  background?: string;\n  backgroundHover?: string;\n  textClassName?: string;\n  textClassNameHover?: string;\n  textColor?: string;\n  textColorHover?: string;\n  icon?: string;\n  iconHover?: string;\n  type?: 'button' | 'submit' | 'reset' | undefined;\n  onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;\n}\n\nconst BotTradeSettingButton: FC<BotTradeSettingButtonProps> = ({\n  children,\n  className = '',\n  classNameHover = '',\n  background = 'bg-primary-05',\n  backgroundHover = 'bg-primary-100',\n  textClassName = '',\n  textClassNameHover = '',\n  textColor = 'bg-primary-100',\n  textColorHover = 'bg-background-100',\n  icon,\n  iconHover,\n  type = 'button',\n  onClick,\n}) => {\n  console.log(onClick);\n  console.log('CLICKED');\n  const [isButtonHover, setIsButtonHover] = useState(false);\n\n  return (\n    <button\n      className={`flex justify-center items-center gap-x-[0.625rem] px-3 py-[0.625rem] rounded-xl ${\n        isButtonHover ? backgroundHover : background\n      } ${isButtonHover ? classNameHover : className}`}\n      type={type}\n      onClick={onClick}\n      onMouseOver={() => {\n        setIsButtonHover(true);\n      }}\n      onMouseLeave={() => {\n        setIsButtonHover(false);\n      }}\n    >\n      {icon && iconHover && (\n        <img src={isButtonHover ? iconHover : icon} alt=\"BotLambotrade\" />\n      )}\n      <p\n        className={`${isButtonHover ? textClassNameHover : textClassName} ${\n          isButtonHover ? textColorHover : textColor\n        } bg-clip-text text-transparent font-bold`}\n      >\n        {children}\n      </p>\n    </button>\n  );\n};\n\nexport default BotTradeSettingButton;\n","export default function convertToThreeDecimalPlaces(num: string | number) {\n  const numDecimalPlaces = (num.toString().split('.')[1] || '').length;\n  if (numDecimalPlaces > 3) {\n    return (+num).toFixed(3);\n  } else {\n    return num;\n  }\n}\n"],"names":["_ref","children","className","background","textClassName","textColor","icon","iconClassName","type","onClick","_jsxs","concat","_jsx","src","alt","isOpen","headingMessage","message","buttonMessage","handleOpen","handleClose","CustomModal","zIndex","CustomButton","IndicatorsContainer","props","indicatorContainerClassName","indicatorContainerIconClassName","selectProps","components","images","IndicatorSeparator","innerProps","_Fragment","MenuList","searchInputIcon","searchInput","searchInputName","searchInputPlaceHolder","searchInputSymbol","searchInputResetValue","searchInputError","searchInputHelperText","TextInput","searchIcon","name","value","placeholder","symbol","resetValue","error","helperText","Option","isSelected","data","selectOption","useRef","forwardRef","_ref2","ref","id","label","isLabelOutside","helperTextEnd","fullWidth","options","defaultValue","button","isSelectDisabled","containerClassName","selectContainerClassName","inputClassName","symbolClassName","helperClassName","helperTextClassName","helperTextEndClassName","menuPortalClassName","onChange","onBlur","onFocus","onKeyDown","onKeyUp","onMouseOver","onMouseLeave","menuRef","isSelectFocus","setIsSelectFocus","useState","isSelectHover","setIsSelectHover","isPasswordShowing","setIsPasswordShowing","inputRef","inputSpacingWithLabel","_inputRef$current2","current","focus","e","stopPropagation","Select","menuPortalTarget","document","body","menuPlacement","classNames","container","state","control","valueContainer","singleValue","menu","menuList","menuPortal","unstyled","isOptionSelected","option","_options$","openMenuOnFocus","actionMeta","isSearchable","isDisabled","prefix","decimalsLimit","decimalScale","fixedDecimalLength","autoComplete","isInputDisabled","searchIconClassName","onValueChange","isInputFocus","setInputFocus","isInputHover","setIsInputHover","passwordType","_inputRef$current3","CurrencyInput","_","values","disabled","allowNegativeValue","disableAbbreviations","decimalSeparator","groupSeparator","maxLength","_inputRef$current4","Cancel","handlePasswordShown","_inputRef$current","prev","ICONS","success","warning","TEXT_COLORS","TITLES","React","variant","closeSnackBar","useEnqueueSnackbar","enqueueSnackbar","closeSnackbar","useSnackbar","useCallback","content","key","undefined","CustomSnackbar","handleCloseSnackbar","isBotTradeBuySell","setIsBotTradeBuySell","useMediaQuery","query","isMobile","isGold","isLast","text","rightIcon","rightIconAction","PAGE_SIZE_OPTIONS","METHOD_OWN_TYPES","INITIAL_BOT_BALANCE","balance","demo_balance","usdt_balance","INITIAL_SELECTED_OPTION","INITIAL_SELECTED_ACCOUNT_TYPE","INITIAL_FORMIK_VALUES","configName","ownerType","condition","conditions","isOnlyTrade","INITIAL_BOT_PERSONAL_SIGNAL_RESULT","config_name","owner_type","config_type","fconditions","DEFAULT_INDEX_OF_CONDITIONS","BotTradeMethodBuySell","currentTimer","setCurrentTimer","moment","selectedIds","setSelectedIds","selectAll","setSelectAll","isMasterNameFocus","setIsMasterNameFocus","isTakeProfitFocus","setIsTakeProfitFocus","isStopLossFocus","setIsStopLossFocus","totalRecords","setTotalRecords","allBotDatas","setAllBotDatas","partnerBotDatas","setPartnerBotDatas","botBalance","setBotBalance","selectedAccountType","setSelectedAccountType","selectedBotAccount","setSelectedBotAccount","selectedMasterAccount","setSelectedMasterAccount","isMasterAccountValid","setIsMasterAccountValid","accountOptions","setAccountOptions","allBotAccountOptions","setAllBotAccountOptions","botPersonalSignalData","setBotPersonalSignalData","count","next","previous","results","allBotPersonalSignalResults","setAllBotPersonalSignalResults","isDeletingByList","setIsDeletingByList","useAppSelector","user","isUpsertModalOpen","setIsUpsertModalOpen","isPopupOpen","setIsPopupOpen","isConditionPopupOpen","setIsConditionPopupOpen","isGiftPopupOpen","setIsGiftPopupOpen","isValidAmountPopupOpen","setIsValidAmountPopupOpen","setSearchInput","selectedMethodOwnType","setSelectedMethodOwnType","selectedPageSizeOption","setSelectedPageSizeOption","page","setPage","totalPages","setTotalPages","isPrevHover","setIsPrevHover","isNextHover","setIsNextHover","modalAttributes","setModalAttributes","formikValues","setFormikValues","selectedBotPersonalSignalResult","setSelectedBotPersonalSignalResult","isEditing","setIsEditing","giftUsername","setGiftUsername","touched","conditionError","setConditionError","isPartnerBotInitialized","setIsPartnerBotInitialized","animationUpsertModalMobile","useSpring","to","opacity","transform","isLargeDesktop","isDesktop","isTablet","dispatch","useAppDispatch","navigate","useNavigate","scrollElement","isTooltipOpen","setIsTooltipOpen","handleTooltipOpen","rowIndex","console","log","prevState","handleTooltipClose","handleOpenUpsertModal","handleCloseUpsertModal","formikUpsert","resetForm","handleOpenPopupModal","handleClosePopupModal","handleOpenGiftPopupModal","handleCloseGiftPopupModal","handleOpenConditionPopupModal","handleCloseConditionPopupModal","handleOpenAccountTradePopupModal","handleCloseAccountTradePopupModal","toggleRow","newSelected","Object","entries","reduce","length","toggleAllRow","forEach","x","getAllBotSignalBuySellSettings","axios","APIs","params","page_size","then","res","Math","ceil","catch","updateModelData","botPersonalSignalResult","updatedFormikValues","is_onlytrade","handlePageChange","selected","columns","accessor","Cell","original","cell","row","checked","Header","input","indeterminate","sortable","width","isPersonal","Tooltip","componentsProps","tooltip","arrow","sx","title","open","onOpen","onClose","disableHoverListener","disableFocusListener","disableTouchListener","placement","enterTouchDelay","leaveTouchDelay","tableInstance","useTable","usePagination","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useFormik","initialValues","validateOnChange","enableReinitialize","validationSchema","Yup","required","max","matches","onSubmit","async","helpers","updateSignalPersonalData","err","JSON","stringify","createSignalPersonalData","getAllAccounts","getAllPartnerBots","filter","status","getBalance","convertPartnerBotsToPartnerAccountOptions","map","botData","botname","convertAllPartnerBotsToPartnerAccountOptions","username","useEffect","firstBotOption","userActions","formikConditionsArray","selectedConditionsArray","target","SelectInput","handleSelectMethodOwnType","BotTradeSettingButton","iconHover","classNameHover","uiActions","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","getCellProps","handleSelectPageSize","ReactPaginate","breakLabel","onPageChange","marginPagesDisplayed","pageCount","previousLabel","onMouseEnter","nextLabel","forcePage","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","animated","style","handleSubmit","CloseOutlined","handleChange","setFieldValue","handleBlur","Boolean","errors","match","some","val","allErrors","setErrors","tempConditions","push","idx","Tile","conditionsAfterDelete","tempConditionsToSet","GoldButton","buttonClassName","GreyButton","deleteSettingByListIds","selectedListIds","CustomValidateModel","generateArrayOfAndFrom","from","Array","generateBaseBubbleOption","fill","order_type","BotTradeMethodBubble","isBubbleOptionOpen","setIsBubbleOptionOpen","isBubbleGuideOpen","setIsBubbleGuideOpen","form","Form","conditionViews","setConditionView","selectedBubbleIdx","setSelectedBubbleIdx","tempBubbleOption","setTempBubbleOption","selectedCondition","setSelectedCondition","selectedBubbleMethodConditionToView","setSelectedBubbleMethodConditionToView","conditionsForm","setConditionsForm","chidConditions","setChidConditions","selectedBetType","setSelectedBetType","activeKey","setActiveKey","tab","obj","rowIdx","colIdx","idxInValues","isWin","isLose","isDraw","tempBubbleToSet","items","setItems","closable","handleOpenBubbleOptionPopupModal","handleCloseBubbleOptionPopupModal","handleCloseBubbleGuidePopupModal","getAllBotSignalBubbleSettings","getFieldValue","keys","betType","bubble","doesExist","Number","Bubble","board","result_type","bubbleIdx","onFinish","v","layout","fields","_ref3","add","remove","_ref4","restField","Space","align","initialValue","dropdownClassName","index","color","top","left","Button","block","PlusOutlined","resetFields","conditionsToSet","sortedConditionsToSet","sort","a","b","parseInt","acc","newArr","foundIndex","findIndex","eConditions","isArray","uniqueId","String","random","item","_ref5","handleOpenBubbleGuidePopupModal","BotTradeMethod","Helmet","BotTradeMethodType","backgroundHover","textClassNameHover","textColorHover","isButtonHover","setIsButtonHover","convertToThreeDecimalPlaces","num","toString","split","toFixed"],"sourceRoot":""}