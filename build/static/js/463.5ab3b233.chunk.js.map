{"version":3,"file":"static/js/463.5ab3b233.chunk.js","mappings":"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","sources":["components/CustomSnackbar/index.tsx","hooks/useEnqueueSnackbar.tsx","pages/AccountTrade/AccountTradeGuide.tsx","pages/AccountTrade/AccountTradeTable.tsx","pages/AccountTrade/index.tsx","../node_modules/@mui/icons-material/esm/Cancel.js","../node_modules/@mui/material/utils/createSvgIcon.js"],"sourcesContent":["import React, { FC } from 'react';\nimport { SnackbarContent, SnackbarKey, SnackbarMessage } from 'notistack';\nimport images from 'assets';\nimport { Cancel } from '@mui/icons-material';\n\nconst ICONS = {\n  success: images.toast.check,\n  warning: images.toast.warning,\n  error: images.toast.error,\n};\n\nconst TEXT_COLORS = {\n  success: 'text-green-100',\n  warning: 'text-yellow-100',\n  error: 'text-red-100',\n};\n\nconst TITLES = {\n  success: 'Thành công',\n  warning: 'Cảnh báo',\n  error: 'Thất bại',\n};\n\ninterface CustomSnackbarProps {\n  id: SnackbarKey;\n  message: SnackbarMessage;\n  variant?: 'success' | 'error' | 'warning';\n  closeSnackBar: () => void;\n}\n\nconst CustomSnackbar = React.forwardRef<HTMLDivElement, CustomSnackbarProps>(\n  ({ id, message, variant, closeSnackBar }, ref) => {\n    return (\n      <>\n        <div\n          className={`flex items-center justify-between gap-x-3 p-4 rounded-3xl w-[full] md:w-[25rem] transition-all bg-dropdown toast-in-right`}\n          key={id}\n          ref={ref}\n        >\n          <div className=\"flex items-center justify-between gap-x-3\">\n            <div className=\"flex-shrink-0 p-[0.625rem] rounded-2xl bg-ink-05\">\n              <img\n                className=\"w-8\"\n                src={variant && ICONS[variant]}\n                alt=\"BotLambotrade\"\n              />\n            </div>\n            <div>\n              <p\n                className={`mb-1 font-bold ${variant && TEXT_COLORS[variant]}`}\n              >\n                {variant && TITLES[variant]}\n              </p>\n              <p className=\"text-ink-80 text-sm\">{message}</p>\n            </div>\n          </div>\n          <button onClick={closeSnackBar}>\n            <Cancel className=\"fill-ink-100\" />\n          </button>\n        </div>\n      </>\n    );\n  }\n);\n\nexport default CustomSnackbar;\n","import CustomSnackbar from 'components/CustomSnackbar';\nimport { OptionsObject, useSnackbar } from 'notistack';\nimport { useCallback } from 'react';\n\nexport const useEnqueueSnackbar = () => {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const pushSnackbar = useCallback(\n    (\n      message: string,\n      // extend the default options object\n      options?: OptionsObject &\n        Partial<{ variant: 'success' | 'error' | 'warning' }>\n    ) => {\n      enqueueSnackbar(message, {\n        ...options,\n        content: (key) => {\n          // destructure the options we need from the extended options\n          // object, and provide a default case if we didn't provide any\n          const { variant } = options || { variant: undefined };\n          const handleCloseSnackbar = () => {\n            closeSnackbar(key);\n          };\n          return (\n            <CustomSnackbar\n              id={`${key}`}\n              message={message}\n              variant={variant || 'success'}\n              closeSnackBar={handleCloseSnackbar}\n            />\n          );\n        },\n      });\n    },\n    [closeSnackbar, enqueueSnackbar]\n  );\n\n  return pushSnackbar;\n};\n","import React from 'react';\nimport { useMediaQuery } from 'react-responsive';\n\nconst AccountTradeGuide = () => {\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1224px)',\n  });\n  const isMediumDesktop = useMediaQuery({\n    query: '(min-width: 1024px)',\n  });\n  const isTablet = useMediaQuery({\n    query: '(min-width: 768px)',\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 767px)',\n  });\n\n  return (\n    <div className=\"mb-6 px-4 py-8 rounded-3xl bg-background-80\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* 1 */}\n        <div className=\"relative flex items-center lg:flex-col gap-3\">\n          <div className=\"p-[0.375rem] border-primary-button font-bold\">\n            <div className=\"px-4 py-2 rounded-full bg-primary-100\">\n              <p className=\"bg-background-80 text-transparent bg-clip-text\">\n                1\n              </p>\n            </div>\n          </div>\n          <div className=\"max-w-[11.5rem] text-ink-100 lg:text-center\">\n            Tạo tài khoản sàn Lambotrade\n          </div>\n          {isMediumDesktop && (\n            <hr className=\"absolute left-[70%] xl:left-[65%] top-[25%] translate-y-[-50%] w-[70%] xl:w-[75%] h-[1px] border-none bg-primary-20\" />\n          )}\n          {!isMediumDesktop && (\n            <div className=\"absolute left-[1.15rem] top-[calc(100%+0.75rem)] bg-primary-20 w-4 h-[1px] rotate-90\"></div>\n          )}\n        </div>\n\n        {/* 2 */}\n        <div className=\"relative flex items-center lg:flex-col gap-3\">\n          <div className=\"p-[0.375rem] border-primary-button font-bold\">\n            <div className=\"px-4 py-2 rounded-full bg-primary-100\">\n              <p className=\"bg-background-80 text-transparent bg-clip-text\">\n                2\n              </p>\n            </div>\n          </div>\n          <div className=\"max-w-[11.5rem] text-ink-100 lg:text-center\">\n            Nhập Email và mật khẩu đăng nhập sàn Lambotrade\n          </div>\n          {isMediumDesktop && (\n            <hr className=\"absolute left-[70%] xl:left-[65%] top-[25%] translate-y-[-50%] w-[70%] xl:w-[75%] h-[1px] border-none bg-primary-20\" />\n          )}\n          {!isMediumDesktop && (\n            <div className=\"absolute left-[1.15rem] top-[calc(100%+0.75rem)] bg-primary-20 w-4 h-[1px] rotate-90\"></div>\n          )}\n        </div>\n\n        {/* 3 */}\n        <div className=\"relative flex items-center lg:flex-col gap-3\">\n          <div className=\"p-[0.375rem] border-primary-button font-bold\">\n            <div className=\"px-4 py-2 rounded-full bg-primary-100\">\n              <p className=\"bg-background-80 text-transparent bg-clip-text\">\n                3\n              </p>\n            </div>\n          </div>\n          <div className=\"max-w-[11.5rem] text-ink-100 lg:text-center\">\n            Nhập mã 2FA và mã xác nhận Email (nếu có)\n          </div>\n          {isMediumDesktop && (\n            <hr className=\"absolute left-[70%] xl:left-[65%] top-[25%] translate-y-[-50%] w-[70%] xl:w-[75%] h-[1px] border-none bg-primary-20\" />\n          )}\n          {!isMediumDesktop && (\n            <div className=\"absolute left-[1.15rem] top-[calc(100%+0.75rem)] bg-primary-20 w-4 h-[1px] rotate-90\"></div>\n          )}\n        </div>\n\n        {/* 4 */}\n        <div className=\"relative flex items-center lg:flex-col gap-3\">\n          <div className=\"p-[0.375rem] border-primary-button font-bold\">\n            <div className=\"px-4 py-2 rounded-full bg-primary-100\">\n              <p className=\"bg-background-80 text-transparent bg-clip-text\">\n                4\n              </p>\n            </div>\n          </div>\n          <div className=\"max-w-[11.5rem] text-ink-100 lg:text-center\">\n            Bấm Tiếp tục để hoàn tất liên kết tài khoản\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountTradeGuide;\n","import images from 'assets';\nimport React, { FC, useCallback, useState } from 'react';\nimport { faker } from '@faker-js/faker';\nimport { Column, useTable, usePagination } from 'react-table';\nimport ReactPaginate from 'react-paginate';\nimport {\n  KeyboardArrowDown,\n  KeyboardArrowLeft,\n  KeyboardArrowRight,\n} from '@mui/icons-material';\nimport { ClickAwayListener, Tooltip } from '@mui/material';\nimport BotData from 'types/BotData';\nimport CustomModal from 'components/CustomModal';\nimport GreyButton from 'components/GreyButton';\nimport GoldButton from 'components/GoldButton';\nimport axios from 'axios';\nimport APIs from 'apis';\nimport { useAppDispatch } from 'stores/hooks';\nimport { uiActions } from 'stores/uiSlice';\nimport { useEnqueueSnackbar } from 'hooks/useEnqueueSnackbar';\nimport { useMediaQuery } from 'react-responsive';\n\nconst STATUSES_MAP = {\n  active: 'Đang đăng nhập',\n  inactive: 'Chưa đăng nhập',\n};\n\ntype TableData = {\n  id: string;\n  checkbox?: string;\n  nickname?: string;\n  referCode?: string;\n  email?: string;\n  balance?: number;\n  status?: string;\n  actions?: string;\n};\n\ntype PaginationEvent = {\n  selected: number;\n};\n\ntype SelectedIdsType = {\n  [key: string]: boolean;\n};\n\ninterface AccountTradeTableProps {\n  partnerBotDatas: BotData[];\n  fetchAllBots: () => void;\n}\n\nconst options: Intl.NumberFormatOptions = {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 3,\n  style: 'decimal',\n};\n\ninterface TooltipToggle {\n  [x: string | number]: boolean;\n}\n\n// const generateFakeData = (): BotData[] => {\n//   return Array(5)\n//     .fill(0)\n//     .map((_, index) => ({\n//       id: faker.datatype.uuid(),\n//       nickname: faker.name.fullName(),\n//       referCode: faker.random.word(),\n//       email: faker.internet.email(),\n//       balance: 50000,\n//       status: index % 2 === 0 ? 'active' : 'inactive',\n//     }));\n// };\n\nconst AccountTradeTable: FC<AccountTradeTableProps> = ({\n  partnerBotDatas,\n  fetchAllBots,\n}) => {\n  const [selectedAccountTradeIds, setSelectedAccountTradeIds] =\n    useState<SelectedIdsType>({});\n  const [selectedBot, setSelectedBot] = useState<BotData>();\n  const [selectAll, setSelectAll] = useState(0);\n  const [totalRecords, setTotalRecords] = useState(100);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const dispatch = useAppDispatch();\n  const enqueueSnackbar = useEnqueueSnackbar();\n\n  // RESPONSIVE\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1224px)',\n  });\n  const isTablet = useMediaQuery({\n    query: '(min-width: 768px)',\n  });\n  const isMediumTablet = useMediaQuery({\n    minWidth: '768px',\n    maxWidth: '1023px',\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 767px)',\n  });\n\n  const partnerDatas = React.useMemo<BotData[]>(\n    () => partnerBotDatas,\n    [partnerBotDatas]\n  );\n\n  // Tooltips\n  const [isTooltipOpen, setIsTooltipOpen] = useState<TooltipToggle>({});\n\n  const handleTooltipOpen = useCallback((rowIndex: string | number) => {\n    if (!isTooltipOpen[rowIndex]) {\n      setIsTooltipOpen((prevState) => ({\n        [rowIndex]: true,\n      }));\n    }\n  }, []);\n\n  const handleTooltipClose = (rowIndex: string | number) => {\n    console.log('handleTooltipClose');\n    if (isTooltipOpen[rowIndex]) {\n      setIsTooltipOpen((prevState) => ({\n        [rowIndex]: false,\n      }));\n    }\n  };\n\n  const handleTooltipToggle = (rowIndex: string | number) => {\n    setIsTooltipOpen((prevState) => ({\n      [rowIndex]: !prevState[rowIndex],\n    }));\n  };\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const toggleRow = useCallback(\n    (id: number) => {\n      const newSelected = { ...selectedAccountTradeIds };\n      newSelected[id] = !newSelected[id];\n      setSelectedAccountTradeIds(newSelected);\n      const totalSelected = Object.entries(newSelected).reduce(\n        (prev, value) => {\n          if (value[1]) return prev + 1;\n          return prev;\n        },\n        0\n      );\n      if (totalSelected >= partnerDatas.length) {\n        setSelectAll(1);\n      } else {\n        setSelectAll(0);\n      }\n    },\n    [partnerDatas.length, selectedAccountTradeIds]\n  );\n\n  const handleBotLogout = useCallback(\n    (partnerAccId: number | undefined, status: string) => {\n      const logoutBot = {\n        status,\n      };\n      // http://149.28.128.238/partner/details/1/\n      axios\n        .patch(`${APIs.partnerAccountDetail}${partnerAccId}/`, logoutBot)\n        .then((res) => {\n          fetchAllBots();\n          // const notification = {\n          //   id: Math.floor(Math.random() * 101 + 1),\n          //   title: 'Thành công',\n          //   description: 'Đăng xuất tài khoản thành công!',\n          //   backgroundColor: 'text-green-100',\n          //   icon: images.toast.check,\n          // };\n          // dispatch(uiActions.showNotifications(notification));\n          enqueueSnackbar('Đăng xuất tài khoản thành công!', {\n            variant: 'success',\n          });\n        })\n        .catch(() => {\n          // const notification = {\n          //   id: Math.floor(Math.random() * 101 + 1),\n          //   title: 'Thất bại',\n          //   description: 'Đăng xuất tài khoản thất bại!',\n          //   backgroundColor: 'text-red-100',\n          //   icon: images.toast.error,\n          // };\n          // dispatch(uiActions.showNotifications(notification));\n          enqueueSnackbar('Đăng xuất tài khoản thất bại!', {\n            variant: 'error',\n          });\n        });\n    },\n    [enqueueSnackbar, fetchAllBots]\n  );\n\n  const handleBotDelete = useCallback(\n    (partnerAccId: number | undefined) => {\n      // http://149.28.128.238/partner/details/1/\n      axios\n        .delete(`${APIs.partnerAccountDetail}${partnerAccId}/`)\n        .then((res) => {\n          fetchAllBots();\n          // const notification = {\n          //   id: Math.floor(Math.random() * 101 + 1),\n          //   title: 'Thành công',\n          //   description: 'Xoá tài khoản thành công!',\n          //   backgroundColor: 'text-green-100',\n          //   icon: images.toast.check,\n          // };\n          // dispatch(uiActions.showNotifications(notification));\n          enqueueSnackbar('Xoá tài khoản thành công!', { variant: 'success' });\n        })\n        .catch(() => {\n          // const notification = {\n          //   id: Math.floor(Math.random() * 101 + 1),\n          //   title: 'Thất bại',\n          //   description: 'Xoá tài khoản thất bại!',\n          //   backgroundColor: 'text-red-100',\n          //   icon: images.toast.error,\n          // };\n          // dispatch(uiActions.showNotifications(notification));\n          enqueueSnackbar('Xoá tài khoản thất bại!', { variant: 'error' });\n        });\n    },\n    [enqueueSnackbar, fetchAllBots]\n  );\n\n  const toggleAllRow = useCallback(() => {\n    let newSelected: SelectedIdsType = {};\n\n    if (selectAll === 0) {\n      partnerDatas.forEach((x) => {\n        newSelected[x.id] = true;\n      });\n    }\n    setSelectedAccountTradeIds(newSelected);\n    setSelectAll((prev) => (prev === 0 ? 1 : 0));\n  }, [partnerDatas, selectAll]);\n\n  const handleOpenPopupModal = () => {\n    setIsPopupOpen(true);\n  };\n\n  const handleClosePopupModal = () => {\n    setIsPopupOpen(false);\n  };\n\n  const deleteAccountTradeBySelectedIds = () => {\n    const selectedListIds = Object.entries(selectedAccountTradeIds)\n      .filter((selected) => selected[1])\n      .map((selected) => selected[0]);\n    console.log('selectedListIds:', selectedListIds);\n\n    axios\n      .delete(`${APIs.deletePartnerAccountsByIds}${selectedListIds}`)\n      .then((res) => {\n        fetchAllBots();\n        enqueueSnackbar('Xoá tài khoản liên kết thành công!', {\n          variant: 'success',\n        });\n      })\n      .catch((err) => {\n        enqueueSnackbar('Xoá tài khoản liên kết thất bại!', {\n          variant: 'error',\n        });\n      });\n  };\n\n  const columns = React.useMemo<Column<BotData>[]>(\n    () => [\n      {\n        id: 'checkbox',\n        accessor: 'checkbox',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex justify-center items-center\">\n              <input\n                type=\"checkbox\"\n                className=\"checkbox\"\n                checked={selectedAccountTradeIds[original.id] === true}\n                onChange={(e) => toggleRow(original.id)}\n              />\n            </div>\n          );\n        },\n        Header: () => {\n          return (\n            <div className=\"flex justify-center items-center\">\n              <input\n                type=\"checkbox\"\n                className=\"checkbox text-center\"\n                checked={selectAll === 1}\n                ref={(input) => {\n                  if (input) {\n                    input.indeterminate = selectAll === 2;\n                  }\n                }}\n                onChange={() => toggleAllRow()}\n              />\n            </div>\n          );\n        },\n        sortable: false,\n        width: 45,\n      },\n      {\n        Header: () => {\n          return <div className=\"text-left\">Biệt danh</div>;\n        },\n        accessor: 'botname',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex\">\n              <p className=\"max-w-[9rem] whitespace-nowrap overflow-ellipsis overflow-hidden\">\n                {original.botname}\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => {\n          return <div className=\"text-left\">Mã giới thiệu</div>;\n        },\n        accessor: 'description',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex\">\n              <p className=\"max-w-[9rem] whitespace-nowrap overflow-ellipsis overflow-hidden\">\n                {original.description}\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => {\n          return <div className=\"text-left\">Email</div>;\n        },\n        accessor: 'botusername',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex\">\n              <p className=\"max-w-[11rem] whitespace-nowrap overflow-ellipsis overflow-hidden\">\n                {original.botusername}\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => <div className=\"text-end\">Số dư</div>,\n        accessor: 'balance_live',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"text-end\">\n              <span className=\"rounded-3xl bg-primary-100 bg-clip-text text-transparent text-sm font-semibold\">\n                ${original.balance_live?.toLocaleString('en-US', options)}\n              </span>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => <div className=\"text-left\">Trạng thái</div>,\n        accessor: 'status',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          const status = original.status;\n          return (\n            <div className=\"flex\">\n              <p\n                className={`w-fit px-2 rounded-[0.375rem] text-xs text-ink-100 leading-5 ${\n                  status === 'active' ? 'bg-green-100' : 'bg-red-100'\n                }`}\n              >\n                {status === 'active'\n                  ? STATUSES_MAP.active\n                  : STATUSES_MAP.inactive}\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        accessor: 'actions',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex justify-center gap-x-1 w-[1.5rem]\">\n              <Tooltip\n                componentsProps={{\n                  tooltip: {\n                    className: '!px-0 !py-3 !bg-dropdown !rounded-xl',\n                  },\n                  arrow: {\n                    className: '!w-[1rem] !before:w-[1rem] !before:bg-dropdown',\n                    sx: {\n                      '&::before': {\n                        background: 'var(--bg-dropdown)',\n                      },\n                    },\n                  },\n                }}\n                title={\n                  <div\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleTooltipClose(original.id);\n                    }}\n                  >\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={(e) => {\n                        handleOpenModal();\n                        setIsLoggingOut(true);\n                        setSelectedBot(original);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={\n                          original.status === 'active'\n                            ? images.table.log_out\n                            : images.table.log_in\n                        }\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">\n                        {original.status === 'active'\n                          ? 'Đăng xuất'\n                          : 'Đăng nhập'}\n                      </p>\n                    </div>\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={() => {\n                        handleOpenModal();\n                        setIsLoggingOut(false);\n                        setSelectedBot(original);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={images.table.delete}\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">Xoá cấu hình</p>\n                    </div>\n                  </div>\n                }\n                arrow\n                open={isTooltipOpen[original.id]}\n                onOpen={() => {\n                  handleTooltipOpen(original.id);\n                }}\n                onClose={() => {\n                  handleTooltipClose(original.id);\n                }}\n                disableHoverListener={!isDesktop}\n                disableFocusListener={!isDesktop}\n                disableTouchListener={!isDesktop}\n                placement=\"bottom-end\"\n                enterTouchDelay={0}\n                leaveTouchDelay={20000}\n              >\n                <img\n                  className=\"cursor-pointer\"\n                  src={images.table.actions}\n                  alt=\"BotLambotrade\"\n                  onClick={(e) => {\n                    handleTooltipToggle(original.id);\n                  }}\n                />\n              </Tooltip>\n            </div>\n          );\n        },\n      },\n    ],\n    [\n      handleTooltipOpen,\n      isDesktop,\n      isTooltipOpen,\n      selectAll,\n      selectedAccountTradeIds,\n      toggleAllRow,\n      toggleRow,\n    ]\n  );\n\n  const tableInstance = useTable(\n    { columns, data: partnerDatas },\n    usePagination\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    page,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  const handlePageClick = (event: PaginationEvent) => {\n    console.log(event);\n  };\n\n  return (\n    <>\n      <div className=\"mb-6 bg-background-80 rounded-3xl\">\n        <h2 className=\"px-6 py-5 border-b border-ink-10 text-ink-100 text-xl font-bold\">\n          Danh sách tài khoản sàn liên kết\n        </h2>\n        {partnerDatas.length === 0 && (\n          <div className=\"py-[5rem] flex flex-col justify-center items-center gap-y-6\">\n            <img\n              className=\"w-[10.25rem]\"\n              src={images.account.table_empty}\n              alt=\"BotLambotrade\"\n            />\n            <p className=\"text-ink-60\">Danh sách tài khoản liên kết trống</p>\n          </div>\n        )}\n        {partnerDatas.length > 0 && (\n          <div className=\"flex flex-col gap-y-6 p-6\">\n            {Object.values(selectedAccountTradeIds).filter(\n              (value) => value === true\n            ).length > 0 && (\n              <div className=\"px-4 py-3 bg-ink-05 rounded-xl flex justify-between items-center\">\n                <p className=\"text-ink-100 font-semibold\">\n                  {`Đã chọn ${\n                    Object.values(selectedAccountTradeIds).filter(\n                      (value) => value === true\n                    ).length\n                  }`}\n                </p>\n                <button\n                  className=\"px-8 py-3 bg-primary-100 rounded-xl\"\n                  onClick={() => {\n                    // showIsDevelopingModal();\n                    handleOpenPopupModal();\n                  }}\n                >\n                  <p className=\"bg-background-100 bg-clip-text text-transparent font-semibold\">\n                    {/* {isFollowing ? 'Chặn' : 'Bỏ chặn'} */}\n                    Xoá\n                  </p>\n                </button>\n              </div>\n            )}\n\n            <div>\n              {/* TABLE */}\n              <div\n                className={`border border-ink-05 rounded-2xl w-full ${\n                  isMobile || isMediumTablet ? 'overflow-x-scroll' : ''\n                }`}\n              >\n                <table className=\"w-full\" {...getTableProps()}>\n                  <thead>\n                    {headerGroups.map((headerGroup) => (\n                      <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map((column) => (\n                          <th\n                            className={`p-4 last:w-[1%] last:whitespace-nowrap bg-primary-05 first-of-type:rounded-tl-2xl last-of-type:rounded-tr-2xl text-sm text-ink-100 font-normal whitespace-nowrap text-ellipsis`}\n                            {...column.getHeaderProps()}\n                          >\n                            {column.render('Header')}\n                          </th>\n                        ))}\n                      </tr>\n                    ))}\n                  </thead>\n                  <tbody {...getTableBodyProps()}>\n                    {rows.map((row) => {\n                      prepareRow(row);\n                      return (\n                        <tr\n                          className=\"border-b border-ink-10 last:border-0 whitespace-nowrap text-ellipsis\"\n                          {...row.getRowProps()}\n                        >\n                          {row.cells.map((cell) => (\n                            <td\n                              className=\"p-4 last:w-[1%] last:whitespace-nowrap\"\n                              {...cell.getCellProps()}\n                            >\n                              {cell.render('Cell')}\n                            </td>\n                          ))}\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n\n              {/* PAGINATION */}\n              {/* <div\n                className={`flex flex-col justify-center items-end md:flex-row md:justify-end md:items-center gap-2`}\n              >\n                <div className=\"px-3 py-2 flex justify-center items-center gap-x-1 border border-ink-10 rounded-lg\">\n                  <p>\n                    {pageSize}/{totalRecords}\n                  </p>\n                  <KeyboardArrowDown\n                    sx={{\n                      fill: 'var(--color-ink-80)',\n                      cursor: 'pointer',\n                    }}\n                  />\n                </div>\n                <ReactPaginate\n                  breakLabel=\"...\"\n                  onPageChange={handlePageClick}\n                  marginPagesDisplayed={isMobile ? 2 : 3}\n                  pageCount={page.length}\n                  previousLabel={\n                    <div className=\"p-[0.375rem] border border-ink-10 rounded-lg\">\n                      <KeyboardArrowLeft sx={{ fill: 'var(--color-ink-80)' }} />\n                    </div>\n                  }\n                  nextLabel={\n                    <div className=\"p-[0.375rem] border border-ink-10 rounded-lg\">\n                      <KeyboardArrowRight\n                        sx={{ fill: 'var(--color-ink-80)' }}\n                      />\n                    </div>\n                  }\n                  pageClassName=\"py-[0.375rem] px-3 border border-ink-10 rounded-lg\"\n                  pageLinkClassName=\"page-link\"\n                  previousClassName=\"page-item\"\n                  previousLinkClassName=\"page-link\"\n                  nextClassName=\"page-item\"\n                  nextLinkClassName=\"page-link\"\n                  breakClassName=\"page-item\"\n                  breakLinkClassName=\"page-link\"\n                  containerClassName=\"flex items-center gap-x-2 text-ink-80\"\n                  activeClassName=\"active\"\n                />\n              </div> */}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <CustomModal\n        isOpen={isModalOpen}\n        handleOpen={handleOpenModal}\n        handleClose={handleCloseModal}\n      >\n        <div\n          className={`absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] p-6 md:w-[31.25rem] w-[calc(100vw-2rem)] bg-background-80 rounded-3xl text-center`}\n        >\n          <div className=\"flex items-center justify-center\">\n            <img\n              className=\"mb-4 w-[5.5rem]\"\n              src={\n                isLoggingOut && selectedBot?.status === 'active'\n                  ? images.account.table_logout\n                  : isLoggingOut && selectedBot?.status === 'inactive'\n                  ? images.account.table_login\n                  : images.account.table_delete\n              }\n              alt=\"BotLambotrade\"\n            />\n          </div>\n          <h3 className=\"mb-2 mx-auto max-w-[18.75rem] text-xl text-ink-100\">\n            {isLoggingOut && selectedBot?.status === 'active'\n              ? 'Đăng xuất tài khoản giao dịch'\n              : isLoggingOut && selectedBot?.status === 'inactive'\n              ? 'Đăng nhập tài khoản giao dịch'\n              : 'Xoá tài khoản giao dịch'}\n          </h3>\n          <p className=\"mb-12 mx-auto max-w-[18.75rem] text-ink-80\">\n            {isLoggingOut && selectedBot?.status === 'active'\n              ? 'Bạn có chắc chắn muốn đăng xuất tài khoản giao dịch này không?'\n              : isLoggingOut && selectedBot?.status === 'inactive'\n              ? 'Bạn có chắc chắn muốn đăng nhập tài khoản giao dịch này không'\n              : 'Bạn có chắc chắn muốn xoá tài khoản giao dịch này không?'}\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 justify-center items-center gap-4\">\n            <GreyButton onClick={handleCloseModal}>Huỷ</GreyButton>\n            <GoldButton\n              onClick={() => {\n                if (isLoggingOut && selectedBot?.status === 'active') {\n                  handleBotLogout(selectedBot?.id, 'inactive');\n                } else if (isLoggingOut && selectedBot?.status === 'inactive') {\n                  handleBotLogout(selectedBot?.id, 'active');\n                } else {\n                  handleBotDelete(selectedBot?.id);\n                }\n                handleCloseModal();\n              }}\n            >\n              {isLoggingOut && selectedBot?.status === 'active'\n                ? 'Đăng xuất'\n                : isLoggingOut && selectedBot?.status === 'inactive'\n                ? 'Đăng nhập'\n                : 'Xoá'}\n            </GoldButton>\n          </div>\n        </div>\n      </CustomModal>\n\n      <CustomModal\n        isOpen={isPopupOpen}\n        handleOpen={handleOpenPopupModal}\n        handleClose={handleClosePopupModal}\n      >\n        <div\n          className={`absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] p-6 md:w-[31.25rem] w-[calc(100vw-2rem)] bg-background-80 rounded-3xl text-center`}\n        >\n          <div className=\"flex items-center justify-center\">\n            <img\n              className=\"mb-4 w-[5.5rem]\"\n              src={images.account.table_delete}\n              alt=\"BotLambotrade\"\n            />\n          </div>\n          <h3 className=\"mb-2 mx-auto max-w-[18.75rem] text-xl text-ink-100\">\n            Xoá tài khoản liên kết\n          </h3>\n          <p className=\"mb-12 mx-auto max-w-[18.75rem] text-ink-80\">\n            Bạn có chắc chắn muốn xoá tài khoản liên kết không?\n          </p>\n          <div className=\"grid grid-cols-2 justify-center items-center gap-4\">\n            <GreyButton onClick={handleClosePopupModal}>Huỷ</GreyButton>\n            <GoldButton\n              onClick={() => {\n                deleteAccountTradeBySelectedIds();\n                handleClosePopupModal();\n              }}\n            >\n              Xoá\n            </GoldButton>\n          </div>\n        </div>\n      </CustomModal>\n    </>\n  );\n};\n\nexport default AccountTradeTable;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport AccountTradeGuide from './AccountTradeGuide';\nimport images from 'assets';\nimport { Link } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useAppDispatch } from 'stores/hooks';\nimport { uiActions } from 'stores/uiSlice';\nimport AccountTradeTable from './AccountTradeTable';\nimport axios from 'axios';\nimport APIs from 'apis';\nimport BotData from 'types/BotData';\nimport { useEnqueueSnackbar } from 'hooks/useEnqueueSnackbar';\nimport { useMediaQuery } from 'react-responsive';\n\ninterface AccountTradeFailResponse {\n  Failed?: string;\n}\n\nconst AccountTrade = () => {\n  const [isApiKeyType, setIsApiKeyType] = useState(false);\n  const [isEmailFocus, setIsEmailFocus] = useState(false);\n  const [isPasswordFocus, setIsPasswordFocus] = useState(false);\n  const [isApiKeyFocus, setIsApiKeyFocus] = useState(false);\n  const [isEmailPasswordDisabled, setIsEmailPasswordDisabled] = useState(true);\n  const [partnerBotDatas, setPartnerBotDatas] = useState<BotData[]>([]);\n\n  const [isPasswordShown, setIsPasswordShown] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const enqueueSnackbar = useEnqueueSnackbar();\n\n  // RESPONSIVE\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1224px)',\n  });\n  const isMediumDesktop = useMediaQuery({\n    query: '(min-width: 1024px)',\n  });\n  const isTablet = useMediaQuery({\n    query: '(min-width: 768px)',\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 767px)',\n  });\n\n  const handlePasswordShown = () => {\n    setIsPasswordShown((prev) => !prev);\n  };\n\n  const fetchAllBots = useCallback(() => {\n    axios\n        .get(APIs.partnerAccount)\n        .then((res) => {\n          const data = res.data;\n          setPartnerBotDatas(data);\n        })\n        .catch((err) => {\n          // const notification = {\n          //   id: Math.floor(Math.random() * 101 + 1),\n          //   title: 'Thất bại',\n          //   description: 'Không thể lấy bot data',\n          //   backgroundColor: 'text-red-100',\n          //   icon: images.toast.error,\n          // };\n          // dispatch(uiActions.showNotifications(notification));\n          enqueueSnackbar('Không thể lấy bot data!', { variant: 'error' });\n        });\n  }, [enqueueSnackbar]);\n\n  const formikEmailPassword = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: Yup.object({\n      email: Yup.string()\n          .email('Email không đúng, vui lòng nhập lại')\n          .required('Vui lòng nhập email'),\n      password: Yup.string().max(20).required('Vui lòng nhập mật khẩu'),\n    }),\n    validateOnChange: false,\n    onSubmit: async (values, helpers) => {\n      try {\n        const userLogin = {\n          botname: 'string',\n          password: values.password,\n          botusername: values.email,\n          description: 'string',\n          status: 'active',\n        };\n        axios\n            .post(APIs.partnerAccount, userLogin)\n            .then((res) => {\n              console.log(res);\n              // const notification = {\n              //   id: Math.floor(Math.random() * 101 + 1),\n              //   title: 'Thành công',\n              //   description: 'Liên kết tài khoản thành công!',\n              //   backgroundColor: 'text-green-100',\n              //   icon: images.toast.check,\n              // };\n              // dispatch(uiActions.showNotifications(notification));\n              enqueueSnackbar('Liên kết tài khoản thành công!', {\n                variant: 'success',\n              });\n              fetchAllBots();\n              helpers.resetForm();\n            })\n            .catch((err) => {\n              if (err.response && err.response.data) {\n                const errData = err.response.data as AccountTradeFailResponse;\n                // const notification = {\n                //   id: Math.floor(Math.random() * 101 + 1),\n                //   title: 'Thất bại',\n                //   description: `${\n                //     errData.Failed\n                //       ? errData.Failed\n                //       : 'Liên kết tài khoản thất bại'\n                //   }`,\n                //   backgroundColor: 'text-red-100',\n                //   icon: images.toast.error,\n                // };\n                // dispatch(uiActions.showNotifications(notification));\n                enqueueSnackbar(\n                    `${\n                        errData.Failed\n                            ? errData.Failed\n                            : 'Liên kết tài khoản thất bại'\n                    }`,\n                    { variant: 'error' }\n                );\n              } else {\n                // const notification = {\n                //   id: Math.floor(Math.random() * 101 + 1),\n                //   title: 'Thất bại',\n                //   description: `${\n                //     err.data\n                //       ? JSON.stringify(err.data)\n                //       : 'Liên kết tài khoản thất bại'\n                //   }`,\n                //   backgroundColor: 'text-red-100',\n                //   icon: images.toast.error,\n                // };\n                // dispatch(uiActions.showNotifications(notification));\n                enqueueSnackbar(\n                    `${\n                        err.data\n                            ? JSON.stringify(err.data)\n                            : 'Liên kết tài khoản thất bại'\n                    }`,\n                    { variant: 'error' }\n                );\n              }\n            });\n      } catch (err) {}\n    },\n  });\n\n  const formikApiKey = useFormik({\n    initialValues: {\n      apiKey: '',\n    },\n    validationSchema: Yup.object({\n      apiKey: Yup.string().required('API Key không đúng, vui lòng nhập lại'),\n    }),\n    validateOnChange: false,\n    onSubmit: async (values, helpers) => {\n      try {\n        const apiKeyDto = {\n          botname: 'string',\n          usertoken: values.apiKey,\n          botusername: 'string',\n          description: 'string',\n          status: 'active',\n        };\n        axios\n            .post(APIs.partnerAccount, apiKeyDto)\n            .then((res) => {\n              console.log(res);\n              // const notification = {\n              //   id: Math.floor(Math.random() * 101 + 1),\n              //   title: 'Thành công',\n              //   description: 'Liên kết tài khoản thành công!',\n              //   backgroundColor: 'text-green-100',\n              //   icon: images.toast.check,\n              // };\n              // dispatch(uiActions.showNotifications(notification));\n              enqueueSnackbar('Liên kết tài khoản thành công!', {\n                variant: 'success',\n              });\n              fetchAllBots();\n              helpers.resetForm();\n            })\n            .catch((err) => {\n              if (err.response && err.response.data) {\n                const errData = err.response.data as AccountTradeFailResponse;\n                // const notification = {\n                //   id: Math.floor(Math.random() * 101 + 1),\n                //   title: 'Thất bại',\n                //   description: `${\n                //     errData.Failed\n                //       ? errData.Failed\n                //       : 'Liên kết tài khoản thất bại'\n                //   }`,\n                //   backgroundColor: 'text-red-100',\n                //   icon: images.toast.error,\n                // };\n                // dispatch(uiActions.showNotifications(notification));\n                enqueueSnackbar(\n                    `${\n                        errData.Failed\n                            ? errData.Failed\n                            : 'Liên kết tài khoản thất bại'\n                    }`,\n                    { variant: 'error' }\n                );\n              } else {\n                // const notification = {\n                //   id: Math.floor(Math.random() * 101 + 1),\n                //   title: 'Thất bại',\n                //   description: `${\n                //     err.data\n                //       ? JSON.stringify(err.data)\n                //       : 'Liên kết tài khoản thất bại'\n                //   }`,\n                //   backgroundColor: 'text-red-100',\n                //   icon: images.toast.error,\n                // };\n                // dispatch(uiActions.showNotifications(notification));\n                enqueueSnackbar(\n                    `${\n                        err.data\n                            ? JSON.stringify(err.data)\n                            : 'Liên kết tài khoản thất bại'\n                    }`,\n                    { variant: 'error' }\n                );\n              }\n            });\n      } catch (err) {}\n    },\n  });\n\n  useEffect(() => {\n    fetchAllBots();\n  }, [fetchAllBots]);\n\n  return (\n      <>\n        <AccountTradeGuide />\n        <div className={`grid grid-cols-1 xl:grid-cols-3 gap-6 mb-6`}>\n          <div className=\"bg-background-80 rounded-3xl h-fit\">\n            <h2 className=\"px-6 py-5 border-b border-ink-10 text-ink-100 text-xl font-bold\">\n              Thêm mới tài khoản giao dịch\n            </h2>\n            <div className=\"p-6 flex flex-col\">\n              {/* Register */}\n              <div className=\"mb-6 p-4 bg-ink-05 rounded-xl flex flex-col\">\n                <div className=\"mb-4 flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n                  <div className=\"flex gap-x-5 text-ink-100/80\">\n                    <img\n                        className=\"w-[3.5rem]\"\n                        src={images.home.gold_wallet}\n                        alt=\"Legend Group\"\n                    />\n                    <div>\n                      <p className=\"pb-2\">Sàn giao dịch</p>\n                      <img\n                          className=\"w-[7.8125rem]\"\n                          src={images.home.fibo_win}\n                          alt=\"Legend Group\"\n                      />\n                    </div>\n                  </div>\n                  <a\n                      className=\"flex-grow md:flex-initial\"\n                      href=\"https://lambotrade.net/\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                  >\n                    <button className=\"px-6 py-3 bg-primary-100 rounded-xl w-full md:w-auto\">\n                    <span className=\"bg-background-100 bg-clip-text text-transparent font-bold\">\n                      Đăng ký\n                    </span>\n                    </button>\n                  </a>\n                </div>\n                <p className=\"text-sm text-ink-80\">\n                  Nếu bạn chưa có tài khoản sản sàn Lambotrade vui lòng ấn vào nút\n                  đăng ký tài khoản bên trên\n                </p>\n              </div>\n\n              <div className=\"mb-8\">\n                <p className=\"mb-4 text-ink-100 text-sm\">HÌNH THỨC LIÊN KẾT</p>\n\n                {/* RADIO */}\n                <div className=\"mb-4 grid grid-cols-1 md:grid-cols-2 items-center gap-4\">\n                  <div\n                      className={`flex items-center gap-x-[0.625rem] rounded-xl p-4 cursor-pointer ${\n                          !isApiKeyType\n                              ? 'border-primary-z-0 bg-primary-10'\n                              : 'bg-ink-05'\n                      } `}\n                      onClick={() => {\n                        setIsApiKeyType(false);\n                      }}\n                  >\n                    <input\n                        className=\"cursor-pointer\"\n                        type=\"radio\"\n                        checked={!isApiKeyType}\n                        onClick={() => {\n                          setIsApiKeyType(false);\n                        }}\n                    />\n                    <label className={`text-ink-100 cursor-pointer`}>\n                      Email/Mật khẩu\n                    </label>\n                  </div>\n                  {/*\n                  <div\n                      className={`flex items-center gap-x-[0.625rem] rounded-xl p-4 cursor-pointer ${\n                          isApiKeyType\n                              ? 'border-primary-z-0 bg-primary-10'\n                              : 'bg-ink-05'\n                      }`}\n                      onClick={() => {\n                        setIsApiKeyType(true);\n                      }}\n                  >\n                    <input\n                        className=\"cursor-pointer\"\n                        type=\"radio\"\n                        checked={isApiKeyType}\n                        onClick={() => {\n                          setIsApiKeyType(true);\n                        }}\n                    />\n                    <label className={`text-ink-100 cursor-pointer`}>\n                      API Key\n                    </label>\n                  </div>\n                  */}\n                </div>\n                {!isApiKeyType && (\n                    <>\n                      {/* EMAIL */}\n                      <div className=\"mb-4 text-ink-100\">\n                        <div\n                            className={`relative border-primary-input ${\n                                isEmailFocus && !formikEmailPassword.errors.email\n                                    ? 'border-primary-focus'\n                                    : ''\n                            }`}\n                        >\n                          <input\n                              id=\"email\"\n                              name=\"email\"\n                              className={`${\n                                  formikEmailPassword.values.email || isEmailFocus\n                                      ? 'pt-5 pb-3'\n                                      : 'py-4'\n                              } px-3 w-full bg-ink-10 rounded-2xl text-ink-100 ${\n                                  formikEmailPassword.errors.email\n                                      ? 'border border-red-100'\n                                      : ''\n                              }`}\n                              type=\"text\"\n                              value={formikEmailPassword.values.email}\n                              onChange={formikEmailPassword.handleChange}\n                              onBlur={(e) => {\n                                formikEmailPassword.handleBlur(e);\n                                setIsEmailFocus((prev) => !prev);\n                              }}\n                              onFocus={(e) => {\n                                console.log(e);\n                                setIsEmailFocus((prev) => !prev);\n                              }}\n                          />\n                          <label\n                              className={`absolute left-0 transition-all ${\n                                  formikEmailPassword.values.email || isEmailFocus\n                                      ? 'text-xs px-3 py-[0.375rem]'\n                                      : 'px-3 py-4'\n                              } text-ink-40`}\n                          >\n                            Email đăng nhập sàn\n                          </label>\n                        </div>\n                        {formikEmailPassword.errors.email && (\n                            <p className=\"px-4 pt-1 text-red-100 text-sm\">\n                              {formikEmailPassword.errors.email}\n                            </p>\n                        )}\n                      </div>\n                      {/* PASSWORD */}\n                      <div\n                          className={`relative border-primary-input ${\n                              isPasswordFocus &&\n                              !formikEmailPassword.errors.password &&\n                              formikEmailPassword.touched.password\n                                  ? 'border-primary-focus'\n                                  : ''\n                          }`}\n                      >\n                        <input\n                            id=\"password\"\n                            name=\"password\"\n                            className={`${\n                                formikEmailPassword.values.password || isPasswordFocus\n                                    ? 'pt-5 pb-3'\n                                    : 'py-4'\n                            } px-3 w-full bg-ink-10 rounded-2xl ${\n                                formikEmailPassword.errors.password\n                                    ? 'border border-red-100'\n                                    : ''\n                            }`}\n                            type=\"text\"\n                            value={formikEmailPassword.values.password}\n                            onChange={formikEmailPassword.handleChange}\n                            onBlur={(e) => {\n                              formikEmailPassword.handleBlur(e);\n                              setIsPasswordFocus((prev) => !prev);\n                            }}\n                            onFocus={(e) => {\n                              console.log(e);\n                              setIsPasswordFocus((prev) => !prev);\n                            }}\n                        />\n                        <label\n                            className={`absolute left-0 transition-all ${\n                                formikEmailPassword.values.password || isPasswordFocus\n                                    ? 'text-xs px-3 py-[0.375rem]'\n                                    : 'px-3 py-4'\n                            } text-ink-40`}\n                        >\n                          Mật khẩu\n                        </label>\n                        <img\n                            className=\"w-[1.5rem] absolute right-4 top-[50%] translate-y-[-50%] cursor-pointer\"\n                            src={images.login.eye}\n                            alt=\"Legend Group\"\n                            onClick={handlePasswordShown}\n                        />\n                      </div>\n                      <div className=\"px-4 pt-1 flex justify-between\">\n                        {formikEmailPassword.errors.password &&\n                            formikEmailPassword.touched.password && (\n                                <p className=\"text-red-100 text-sm\">\n                                  {formikEmailPassword.errors.password}\n                                </p>\n                            )}\n                      </div>\n                    </>\n                )}\n\n                {isApiKeyType && (\n                    <>\n                      <div className=\"text-ink-100\">\n                        <div\n                            className={`relative border-primary-input ${\n                                isApiKeyFocus && !formikApiKey.errors.apiKey\n                                    ? 'border-primary-focus'\n                                    : ''\n                            }`}\n                        >\n                          <input\n                              id=\"apiKey\"\n                              name=\"apiKey\"\n                              className={`${\n                                  formikApiKey.values.apiKey || isApiKeyFocus\n                                      ? 'pt-5 pb-3'\n                                      : 'py-4'\n                              } px-3 w-full bg-ink-10 rounded-2xl text-ink-100 ${\n                                  formikApiKey.errors.apiKey\n                                      ? 'border border-red-100'\n                                      : ''\n                              }`}\n                              type=\"text\"\n                              value={formikApiKey.values.apiKey}\n                              onChange={formikApiKey.handleChange}\n                              onBlur={(e) => {\n                                formikApiKey.handleBlur(e);\n                                setIsApiKeyFocus((prev) => !prev);\n                              }}\n                              onFocus={(e) => {\n                                console.log(e);\n                                setIsApiKeyFocus((prev) => !prev);\n                              }}\n                          />\n                          <label\n                              className={`absolute left-0 transition-all ${\n                                  formikApiKey.values.apiKey || isApiKeyFocus\n                                      ? 'text-xs px-3 py-[0.375rem]'\n                                      : 'px-3 py-4'\n                              } text-ink-40`}\n                          >\n                            API key\n                          </label>\n                        </div>\n                        {formikApiKey.errors.apiKey && (\n                            <p className=\"px-4 pt-1 text-red-100 text-sm\">\n                              {formikApiKey.errors.apiKey}\n                            </p>\n                        )}\n                      </div>\n                    </>\n                )}\n              </div>\n\n              {!isApiKeyType && (\n                  <button\n                      className=\"p-4 bg-primary-100 w-full rounded-2xl text-center\"\n                      onClick={() => {\n                        formikEmailPassword.handleSubmit();\n                      }}\n                      //disabled={isEmailPasswordDisabled}\n                  >\n                    <p className=\"bg-background-100 bg-clip-text text-transparent font-semibold\">\n                      Liên kết tài khoản\n                    </p>\n                  </button>\n              )}\n\n              {isApiKeyType && (\n                  <button\n                      className=\"p-4 bg-primary-100 w-full rounded-2xl text-center\"\n                      onClick={() => {\n                        formikApiKey.handleSubmit();\n                      }}\n                  >\n                    <p className=\"bg-background-100 bg-clip-text text-transparent font-semibold\">\n                      Liên kết tài khoản\n                    </p>\n                  </button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"xl:col-span-2\">\n            <AccountTradeTable\n                fetchAllBots={fetchAllBots}\n                partnerBotDatas={partnerBotDatas}\n            />\n          </div>\n        </div>\n      </>\n  );\n};\n\nexport default AccountTrade;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"\n}), 'Cancel');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport SvgIcon from '../SvgIcon';\n\n/**\n * Private module reserved for @mui packages.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function createSvgIcon(path, displayName) {\n  function Component(props, ref) {\n    return /*#__PURE__*/_jsx(SvgIcon, _extends({\n      \"data-testid\": `${displayName}Icon`,\n      ref: ref\n    }, props, {\n      children: path\n    }));\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // Need to set `displayName` on the inner component for React.memo.\n    // React prior to 16.14 ignores `displayName` on the wrapper.\n    Component.displayName = `${displayName}Icon`;\n  }\n  Component.muiName = SvgIcon.muiName;\n  return /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Component));\n}"],"names":["ICONS","success","images","warning","error","TEXT_COLORS","TITLES","React","_ref","ref","id","message","variant","closeSnackBar","_jsx","_Fragment","children","_jsxs","className","src","alt","concat","onClick","Cancel","useEnqueueSnackbar","enqueueSnackbar","closeSnackbar","useSnackbar","useCallback","options","content","key","undefined","CustomSnackbar","handleCloseSnackbar","AccountTradeGuide","useMediaQuery","query","isMediumDesktop","STATUSES_MAP","minimumFractionDigits","maximumFractionDigits","style","partnerBotDatas","fetchAllBots","selectedAccountTradeIds","setSelectedAccountTradeIds","useState","selectedBot","setSelectedBot","selectAll","setSelectAll","totalRecords","setTotalRecords","isModalOpen","setIsModalOpen","isLoggingOut","setIsLoggingOut","isPopupOpen","setIsPopupOpen","useAppDispatch","isDesktop","isMediumTablet","minWidth","maxWidth","isMobile","partnerDatas","isTooltipOpen","setIsTooltipOpen","handleTooltipOpen","rowIndex","prevState","handleTooltipClose","console","log","handleOpenModal","handleCloseModal","toggleRow","newSelected","Object","entries","reduce","prev","value","length","handleBotLogout","partnerAccId","status","logoutBot","axios","APIs","then","res","catch","handleBotDelete","toggleAllRow","forEach","x","handleOpenPopupModal","handleClosePopupModal","columns","accessor","Cell","props","original","cell","row","type","checked","onChange","e","Header","input","indeterminate","sortable","width","botname","description","botusername","_original$balance_liv","balance_live","toLocaleString","Tooltip","componentsProps","tooltip","arrow","sx","background","title","stopPropagation","open","onOpen","onClose","disableHoverListener","disableFocusListener","disableTouchListener","placement","enterTouchDelay","leaveTouchDelay","tableInstance","useTable","data","usePagination","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","page","state","pageIndex","pageSize","values","filter","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","getCellProps","CustomModal","isOpen","handleOpen","handleClose","GreyButton","GoldButton","deleteAccountTradeBySelectedIds","selectedListIds","selected","err","AccountTrade","isApiKeyType","setIsApiKeyType","isEmailFocus","setIsEmailFocus","isPasswordFocus","setIsPasswordFocus","isApiKeyFocus","setIsApiKeyFocus","isEmailPasswordDisabled","setIsEmailPasswordDisabled","setPartnerBotDatas","isPasswordShown","setIsPasswordShown","formikEmailPassword","useFormik","initialValues","email","password","validationSchema","Yup","required","max","validateOnChange","onSubmit","async","helpers","userLogin","resetForm","response","errData","Failed","JSON","stringify","formikApiKey","apiKey","apiKeyDto","usertoken","useEffect","href","target","rel","errors","name","handleChange","onBlur","handleBlur","onFocus","touched","handlePasswordShown","handleSubmit","AccountTradeTable","createSvgIcon","d","path","displayName","Component","SvgIcon","_extends","muiName"],"sourceRoot":""}