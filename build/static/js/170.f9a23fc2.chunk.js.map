{"version":3,"file":"static/js/170.f9a23fc2.chunk.js","mappings":"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","sources":["components/SearchInput/index.tsx","pages/BotTradeSetting/BotTradeSettingButton.tsx","components/CustomNumberInput/index.tsx","pages/CopyTradeSetting/CopyTradeSettingFollow.tsx","pages/CopyTradeSetting/index.tsx","pages/CopyTradeZoom/CopyTradeZoomSelectInput.tsx","utils/ConvertToThreeDecimalPlaces.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\ntype SearchInputProps = {\n  inputClassName?: string;\n  inputName: string;\n  searchInput: string;\n  setSearchInput: React.Dispatch<React.SetStateAction<string>>;\n};\n\nconst SearchInput: FC<SearchInputProps> = ({\n  inputClassName,\n  inputName,\n  searchInput,\n  setSearchInput,\n}) => {\n  return (\n    <div>\n      <label\n        htmlFor=\"default-search\"\n        className=\"mb-2 text-sm font-medium sr-only text-ink-100\"\n      >\n        Search\n      </label>\n      <div className=\"relative\">\n        <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n          <svg\n            aria-hidden=\"true\"\n            className=\"w-5 h-5 text-black-opacity-100\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n            ></path>\n          </svg>\n        </div>\n        <input\n          type=\"search\"\n          id={inputName}\n          name={inputName}\n          className={`${inputClassName} block py-3 pl-9 pr-8 text-sm text-black-opacity-40 border border-ink-20 rounded-xl bg-ink-05 focus:ring-blue-500 focus:border-blue-500 placeholder-black-opacity-40 dark:focus:ring-blue-500 dark:focus:border-blue-500`}\n          placeholder=\"Tìm kiếm\"\n          value={searchInput}\n          onChange={(e) => {\n            setSearchInput(e.target.value);\n          }}\n          required\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SearchInput;\n","import React, { FC, useState } from 'react';\n\ninterface BotTradeSettingButtonProps {\n  children: React.ReactNode;\n  className?: string;\n  classNameHover?: string;\n  background?: string;\n  backgroundHover?: string;\n  textClassName?: string;\n  textClassNameHover?: string;\n  textColor?: string;\n  textColorHover?: string;\n  icon?: string;\n  iconHover?: string;\n  type?: 'button' | 'submit' | 'reset' | undefined;\n  onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;\n}\n\nconst BotTradeSettingButton: FC<BotTradeSettingButtonProps> = ({\n  children,\n  className = '',\n  classNameHover = '',\n  background = 'bg-primary-05',\n  backgroundHover = 'bg-primary-100',\n  textClassName = '',\n  textClassNameHover = '',\n  textColor = 'bg-primary-100',\n  textColorHover = 'bg-background-100',\n  icon,\n  iconHover,\n  type = 'button',\n  onClick,\n}) => {\n  console.log(onClick);\n  console.log('CLICKED');\n  const [isButtonHover, setIsButtonHover] = useState(false);\n\n  return (\n    <button\n      className={`flex justify-center items-center gap-x-[0.625rem] px-3 py-[0.625rem] rounded-xl ${\n        isButtonHover ? backgroundHover : background\n      } ${isButtonHover ? classNameHover : className}`}\n      type={type}\n      onClick={onClick}\n      onMouseOver={() => {\n        setIsButtonHover(true);\n      }}\n      onMouseLeave={() => {\n        setIsButtonHover(false);\n      }}\n    >\n      {icon && iconHover && (\n        <img src={isButtonHover ? iconHover : icon} alt=\"BotLambotrade\" />\n      )}\n      <p\n        className={`${isButtonHover ? textClassNameHover : textClassName} ${\n          isButtonHover ? textColorHover : textColor\n        } bg-clip-text text-transparent font-bold`}\n      >\n        {children}\n      </p>\n    </button>\n  );\n};\n\nexport default BotTradeSettingButton;\n","import { FormikBag, FormikProps, FormikValues } from 'formik';\nimport React, { FC, useRef, useState } from 'react';\nimport CurrencyInput from 'react-currency-input-field';\nimport { CurrencyInputOnChangeValues } from 'react-currency-input-field/dist/components/CurrencyInputProps';\nimport convertToThreeDecimalPlaces from 'utils/ConvertToThreeDecimalPlaces';\n\ninterface IInputValues {\n  [key: string]: string | number;\n}\n\ninterface IInput {\n  formik: FormikValues;\n  isInputFocus: boolean;\n  setIsInputFocus: React.Dispatch<React.SetStateAction<boolean>>;\n  inputValue: string | number;\n  inputError: string | number | undefined;\n  id: string;\n  label: string;\n  name: string;\n  inputColor?: string;\n  symbol?: string;\n}\n\nconst CustomNumberInput: FC<IInput> = (props) => {\n  const {\n    formik,\n    isInputFocus,\n    setIsInputFocus,\n    inputValue,\n    inputError,\n    id,\n    label,\n    name,\n    inputColor = 'text-ink-100',\n    symbol = '$',\n  } = props;\n\n  const handleAmount = (\n    value: string | undefined,\n    fieldName: string,\n    values: CurrencyInputOnChangeValues | undefined\n  ): void => {\n    // const valueToSet = value === undefined || +value <= 0 ? 0 : value || ' ';\n    const valueToSet = value === undefined ? '' : value;\n    const convertedValue = convertToThreeDecimalPlaces(+valueToSet);\n    formik.setFieldValue(fieldName, convertedValue);\n  };\n\n  const ref = useRef<HTMLInputElement>(null);\n  return (\n    <div className=\"mb-4 text-ink-100\">\n      <div\n        className={`relative border-primary-input ${\n          isInputFocus && !inputError ? 'border-primary-focus' : ''\n        }`}\n      >\n        <CurrencyInput\n          id={id}\n          name={name}\n          className={`${\n            inputValue === 0 || inputValue || isInputFocus\n              ? 'pt-5 pb-3'\n              : 'py-4'\n          } px-3 w-full bg-ink-10 rounded-2xl ${\n            inputError ? 'border border-red-100' : ''\n          } ${inputColor}`}\n          value={inputValue}\n          onBlur={(e) => {\n            formik.handleBlur(e);\n            setIsInputFocus((prev) => !prev);\n          }}\n          onValueChange={(value, _, values) => {\n            handleAmount(value, name, values);\n          }}\n          onFocus={(e) => {\n            setIsInputFocus((prev) => !prev);\n          }}\n          allowNegativeValue={false}\n          disableAbbreviations={true}\n          decimalsLimit={3}\n          maxLength={13}\n          decimalSeparator=\",\"\n          groupSeparator=\".\"\n          ref={ref}\n        />\n        <label\n          className={`absolute left-0 transition-all ${\n            inputValue === 0 || inputValue || isInputFocus\n              ? 'text-xs px-3 py-[0.375rem]'\n              : 'px-3 py-4'\n          } text-ink-40 cursor-text`}\n          onClick={() => {\n            if (ref.current) {\n              ref.current.focus();\n            }\n          }}\n        >\n          {label}\n        </label>\n        <p className={`absolute right-3 top-[1.25rem] ${inputColor}`}>\n          {symbol}\n        </p>\n      </div>\n      {inputError && (\n        <p className={`px-4 py-2 text-red-100 text-sm`}>{inputError}</p>\n      )}\n    </div>\n  );\n};\n\nexport default CustomNumberInput;\n","import { CloseOutlined } from '@mui/icons-material';\nimport { ClickAwayListener, Tooltip } from '@mui/material';\nimport APIs from 'apis';\nimport images from 'assets';\nimport axios from 'axios';\nimport CustomModal from 'components/CustomModal';\nimport CustomNumberInput from 'components/CustomNumberInput';\nimport CustomSwitch from 'components/CustomSwitch';\nimport CustomValidateModel from 'components/CustomValidateModal';\nimport GoldButton from 'components/GoldButton';\nimport GreyButton from 'components/GreyButton';\nimport TextInput from 'components/TextInput';\nimport { useFormik } from 'formik';\nimport { useEnqueueSnackbar } from 'hooks/useEnqueueSnackbar';\nimport moment from 'moment';\nimport CopyTradeZoomSelectInput from 'pages/CopyTradeZoom/CopyTradeZoomSelectInput';\nimport React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport CurrencyInput from 'react-currency-input-field';\nimport { CurrencyInputOnChangeValues } from 'react-currency-input-field/dist/components/CurrencyInputProps';\nimport { useNavigate } from 'react-router-dom';\nimport ReactSwitch from 'react-switch';\nimport { Column, usePagination, useTable } from 'react-table';\nimport { useAppDispatch, useAppSelector } from 'stores/hooks';\nimport { userActions } from 'stores/userSlice';\nimport { BotAllData } from 'types/BotAllData';\nimport { BotBalance } from 'types/BotBalance';\nimport BotData from 'types/BotData';\nimport BotSetting, { BotSettingResult } from 'types/BotSetting';\nimport BotSettingUpdate from 'types/BotSettingUpdate';\nimport CustomValidateModelProps from 'types/CustomValidateProps';\nimport InputSelectOption from 'types/InputSelectOption';\nimport * as Yup from 'yup';\nimport { BotCopyTrade } from '../../types/BotCopyTrade';\nimport { ActionMeta, SingleValue } from 'react-select';\nimport SelectInput from 'components/SelectInput';\nimport ReactPaginate from 'react-paginate';\nimport convertToThreeDecimalPlaces from 'utils/ConvertToThreeDecimalPlaces';\nimport { useMediaQuery } from 'react-responsive';\nimport { animated, useSpring } from 'react-spring';\nimport BotTradeSettingButton from 'pages/BotTradeSetting/BotTradeSettingButton';\n\ntype CopyTradeFollowProps = {\n  isFollowing?: boolean;\n  setIsFollowing?: React.Dispatch<React.SetStateAction<boolean>>;\n  searchInput: string;\n  setSearchInput: React.Dispatch<React.SetStateAction<string>>;\n};\n\ninterface ListMasterCopyTradeSetting {\n  master?: string | number;\n}\n\ninterface ListFollowerCopyTradeSetting {\n  follower?: string | number;\n}\n\ninterface FormikValueType {\n  master: number;\n  username: string;\n  amountPerOrder: number;\n  multiply: number;\n  aimMin: number;\n  aimMax: number;\n  aiBotTelegramEnabled: boolean;\n  aiBasicEnabled: boolean;\n  copyTradeEnabled: boolean;\n  status: string;\n}\n\ninterface TooltipToggle {\n  [x: string | number]: boolean;\n}\n\ntype SelectedIdsType = {\n  [key: string]: boolean;\n};\n\nconst PAGE_SIZE_OPTIONS: InputSelectOption[] = [\n  { value: 10, label: '10/page' },\n  { value: 20, label: '20/page' },\n  { value: 30, label: '30/page' },\n  { value: 40, label: '40/page' },\n];\n\nconst PLUS_VALUES = [5, 10, 20, 50, 100, 'All'];\nconst MULTIPLY_VALUES = [2, 5, 10, 20, 40, 100];\nconst OPTIONS = [\n  {\n    value: 10,\n    name: 'Ten',\n  },\n  {\n    value: 15,\n    name: 'Fifteen',\n  },\n  {\n    value: 20,\n    name: 'Twenty',\n  },\n  {\n    value: 25,\n    name: 'Twenty-five',\n  },\n];\n\nconst INITIAL_BOT_BALANCE = {\n  balance: 1,\n  demo_balance: 1,\n  usdt_balance: 1,\n};\n\nconst INITIAL_SELECT_OPTIONS: InputSelectOption[] = [\n  {\n    value: '',\n    label: '',\n  },\n];\n\nconst INITIAL_SELECTED_OPTION: InputSelectOption = {\n  value: '',\n  label: '',\n};\n\nconst INITIAL_SELECTED_ACCOUNT_TYPE: InputSelectOption = {\n  value: 'LIVE',\n  label: 'Tài khoản LIVE',\n};\n\nconst INITIAL_FORMIK_VALUES: FormikValueType = {\n  master: 0,\n  username: '',\n  amountPerOrder: 1,\n  multiply: 1,\n  aimMin: 0,\n  aimMax: 0,\n  aiBotTelegramEnabled: true,\n  aiBasicEnabled: true,\n  copyTradeEnabled: true,\n  status: 'inactive',\n};\n\nconst ACCOUNT_TYPES = [\n  {\n    value: 'DEMO',\n    label: 'Tài khoản DEMO',\n  },\n  {\n    value: 'LIVE',\n    label: 'Tài khoản LIVE',\n  },\n];\n\nexport interface ICopyTradeSettingFormik {\n  accountType: string;\n  email: string;\n  balance: number;\n  masterName: string;\n  amountPerOrder: number;\n  multiply: number;\n  takeProfit: number;\n  stopLoss: number;\n}\n\nconst INITIAL_BOT_SETTING_RESULT: BotSettingResult = {\n  id: 0,\n  master: 0,\n  master_name: '',\n  account_type: '',\n  follower: 0,\n  follower_name: '',\n  follower_username: '',\n  o_amount: 0,\n  o_owner: 0,\n  fold_command: 0,\n  status: '',\n  block_status: '',\n  created_at: '',\n  updated_at: '',\n  current_profit: 0,\n  current_date_profit: 0,\n  current_volume: 0,\n  current_date_volume: 0,\n  aim_min: 0,\n  aim_max: 0,\n};\n\nconst options: Intl.NumberFormatOptions = {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 3,\n  style: 'decimal',\n};\n\nconst CopyTradeSettingFollow: FC<CopyTradeFollowProps> = ({\n  isFollowing,\n  setIsFollowing,\n  searchInput,\n  setSearchInput,\n}) => {\n  const [currentTimer, setCurrentTimer] = useState(moment());\n  const [selectedIds, setSelectedIds] = useState<SelectedIdsType>({});\n  const [selectAll, setSelectAll] = useState(0);\n  const [isMasterNameFocus, setIsMasterNameFocus] = useState(false);\n  const [isTakeProfitFocus, setIsTakeProfitFocus] = useState(false);\n  const [isStopLossFocus, setIsStopLossFocus] = useState(false);\n  const [totalRecords, setTotalRecords] = useState(100);\n\n  // BOT\n  const [allBotDatas, setAllBotDatas] = useState<BotAllData[]>([]);\n  const [partnerBotDatas, setPartnerBotDatas] = useState<BotData[]>([]);\n  const [botBalance, setBotBalance] = useState<BotBalance>(INITIAL_BOT_BALANCE);\n  const [selectedAccountType, setSelectedAccountType] =\n    useState<InputSelectOption>(INITIAL_SELECTED_ACCOUNT_TYPE);\n  const [selectedBotAccount, setSelectedBotAccount] =\n    useState<InputSelectOption>(INITIAL_SELECTED_OPTION);\n  const [selectedMasterAccount, setSelectedMasterAccount] =\n    useState<InputSelectOption>(INITIAL_SELECTED_OPTION);\n  const [isMasterAccountValid, setIsMasterAccountValid] = useState(false);\n  const [accountOptions, setAccountOptions] = useState<InputSelectOption[]>([]);\n  const [allBotAccountOptions, setAllBotAccountOptions] = useState<\n    InputSelectOption[]\n  >([]);\n\n  // SETTINGS\n  const [botSettingData, setBotSettingData] = useState<BotSetting>({\n    count: 0,\n    next: null,\n    previous: null,\n    results: [],\n  });\n  const [allBotSettingResults, setAllBotSettingResults] = useState<\n    BotSettingResult[]\n  >([]);\n  const userData = useAppSelector((state) => state.user.user);\n  const [isDeletingByList, setIsDeletingByList] = useState(false);\n\n  // MODAL\n  const [isUpsertModalOpen, setIsUpsertModalOpen] = useState(false);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [isValidAmountPopupOpen, setIsValidAmountPopupOpen] = useState(false);\n\n  // PAGINATION\n  const [selectedPageSizeOption, setSelectedPageSizeOption] =\n    useState<InputSelectOption>(PAGE_SIZE_OPTIONS[0]);\n  const [page, setPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(10);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const [isPrevHover, setIsPrevHover] = useState(false);\n  const [isNextHover, setIsNextHover] = useState(false);\n\n  const [modalAttributes, setModalAttributes] =\n    useState<CustomValidateModelProps>({\n      isOpen: false,\n      icon: '',\n      headingMessage: '',\n      message: '',\n      buttonMessage: '',\n      handleOpen: () => {},\n      handleClose: () => {},\n    });\n  const [isAmountPerOrderAmountFocus, setIsAmountPerOrderAmountFocus] =\n    useState(false);\n  const [isMultiplyAmountFocus, setIsMultiplyAmountFocus] = useState(false);\n\n  // FORMIK RELATED STATES\n  const [formikValues, setFormikValues] = useState<FormikValueType>(\n    INITIAL_FORMIK_VALUES\n  );\n  const [selectedBotSettingResult, setSelectedBotSettingResult] =\n    useState<BotSettingResult>(INITIAL_BOT_SETTING_RESULT);\n  const [isEditing, setIsEditing] = useState(false);\n\n  // INITIAL PARTNER BOT USEFFECT\n  const [isPartnerBotInitialized, setIsPartnerBotInitialized] = useState(false);\n  const animationUpsertModalMobile = useSpring({\n    to: {\n      opacity: isUpsertModalOpen ? 1 : 0,\n      transform: isUpsertModalOpen ? 'translateX(0%)' : 'translateX(-100%)',\n    },\n  });\n\n  // RESPONSIVE\n  const isLargeDesktop = useMediaQuery({\n    query: '(min-width: 1368px)',\n  });\n  const isDesktop = useMediaQuery({\n    query: '(min-width: 1224px)',\n  });\n  const isTablet = useMediaQuery({\n    query: '(min-width: 768px)',\n  });\n  const isMobile = useMediaQuery({\n    query: '(max-width: 767px)',\n  });\n\n  const dispatch = useAppDispatch();\n  const enqueueSnackbar = useEnqueueSnackbar();\n  const navigate = useNavigate();\n  const scrollElement = useRef<HTMLDivElement>(null);\n\n  const data = React.useMemo<BotSettingResult[]>(\n    () => allBotSettingResults,\n    [allBotSettingResults]\n  );\n\n  // Tooltips\n  const [isTooltipOpen, setIsTooltipOpen] = useState<TooltipToggle>({});\n\n  const handleTooltipOpen = useCallback((rowIndex: string | number) => {\n    if (!isTooltipOpen[rowIndex]) {\n      setIsTooltipOpen((prevState) => ({\n        [rowIndex]: true,\n      }));\n    }\n  }, []);\n\n  const handleTooltipClose = (rowIndex: string | number) => {\n    console.log('handleTooltipClose');\n    if (isTooltipOpen[rowIndex]) {\n      setIsTooltipOpen((prevState) => ({\n        [rowIndex]: false,\n      }));\n    }\n  };\n\n  const handleTooltipToggle = (rowIndex: string | number) => {\n    setIsTooltipOpen((prevState) => ({\n      [rowIndex]: !prevState[rowIndex],\n    }));\n  };\n\n  const onSelectedAccountTypeChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => {\n    setSelectedAccountType(option);\n    dispatch(userActions.updateSelectedAccountType(option));\n  };\n\n  const onSelectedBotAccountChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => {\n    setSelectedBotAccount(option);\n    console.log('1')\n    dispatch(userActions.updateSelectedBotAccount(option));\n  };\n\n  const onSelectedMasterChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => {\n    setSelectedMasterAccount(option);\n  };\n\n  // FUNCTIONS FOR MODAL\n  const handleOpenUpsertModal = () => {\n    setIsUpsertModalOpen(true);\n  };\n\n  const handleCloseUpsertModal = () => {\n    setIsUpsertModalOpen(false);\n    formikUpsert.resetForm();\n    setIsMasterAccountValid(false);\n    setFormikValues(INITIAL_FORMIK_VALUES);\n    setSelectedAccountType(INITIAL_SELECTED_ACCOUNT_TYPE);\n    console.log('2')\n    setSelectedBotAccount(INITIAL_SELECTED_OPTION);\n    // setSelectedMasterAccount(INITIAL_SELECTED_OPTION);\n  };\n\n  const handleOpenPopupModal = () => {\n    setIsPopupOpen(true);\n  };\n\n  const handleClosePopupModal = () => {\n    setIsPopupOpen(false);\n  };\n\n  const handleOpenValidAmountPopupModal = () => {\n    setModalAttributes((prev) => ({\n      ...prev,\n      isOpen: false,\n    }));\n  };\n\n  const handleCloseValidAmountPopupModal = () => {\n    setModalAttributes((prev) => ({\n      ...prev,\n      isOpen: false,\n    }));\n    formikUpsert.setFieldValue('amountPerOrder', 1);\n    formikUpsert.setFieldValue('multiply', 1);\n  };\n\n  const handleOpenAccountTradePopupModal = () => {\n    setModalAttributes((prev) => ({\n      ...prev,\n      isOpen: true,\n    }));\n  };\n\n  const handleCloseAccountTradePopupModal = () => {\n    setModalAttributes((prev) => ({\n      ...prev,\n      isOpen: false,\n    }));\n    navigate('/account_trade');\n  };\n\n  // FUNCTIONS FOR INPUT AMOUNT\n  const handleAmount = (\n    value: string | undefined,\n    fieldName: string,\n    values: CurrencyInputOnChangeValues | undefined\n  ): void => {\n    // const valueToSet = value === undefined || +value <= 0 ? 0 : value || ' ';\n    const valueToSet = value === undefined ? '' : value;\n    const convertedValue = convertToThreeDecimalPlaces(valueToSet);\n    formikUpsert.setFieldValue(fieldName, convertedValue);\n  };\n\n  const handleAmountMinusOne = (value: number, fieldName: string) => {\n    if (value - 1 <= 1) return;\n    const convertedValue = convertToThreeDecimalPlaces(+value - 1);\n    formikUpsert.setFieldValue(fieldName, convertedValue);\n  };\n\n  const handleOrderAmountPlusOne = (value: number, fieldName: string) => {\n    const convertedValue = convertToThreeDecimalPlaces(+value + 1);\n    formikUpsert.setFieldValue(fieldName, convertedValue);\n  };\n\n  // FUNCTIONS FOR CHECKBOX\n  const toggleRow = useCallback(\n    (id: string | number) => {\n      const newSelected = { ...selectedIds };\n      newSelected[id] = !newSelected[id];\n      console.log(newSelected);\n      setSelectedIds(newSelected);\n      const totalSelected = Object.entries(newSelected).reduce(\n        (prev, value) => {\n          if (value[1]) return prev + 1;\n          return prev;\n        },\n        0\n      );\n      if (totalSelected >= data.length) {\n        setSelectAll(1);\n      } else {\n        setSelectAll(0);\n      }\n    },\n    [data.length, selectedIds]\n  );\n\n  const toggleAllRow = useCallback(() => {\n    let newSelected: SelectedIdsType = {};\n\n    if (selectAll === 0) {\n      data.forEach((x) => {\n        newSelected[x.id] = true;\n      });\n    }\n    setSelectedIds(newSelected);\n    setSelectAll((prev) => (prev === 0 ? 1 : 0));\n  }, [data, selectAll]);\n\n  // COMMON FUNCTIONS\n  const getAllBotSettings = useCallback(\n    (page: number) => {\n      if (partnerBotDatas.length > 0) {\n        // const data: ListMasterCopyTradeSetting = {\n        //   master: userData.pk,\n        // };\n        const followerIds = partnerBotDatas.map((botData) =>\n          botData.id.toString()\n        );\n        axios\n          .get(\n            `${APIs.listCopyTradeSetting}`,\n            {\n              params: {\n                page,\n                page_size: selectedPageSizeOption,\n              },\n            }\n            // `${APIs.listCopyTradeMasterFollowedByFollowerIds}${followerIds.join(\n            //   ','\n            // )}`\n          )\n          .then((res) => {\n            const data: BotSetting = res.data;\n            setBotSettingData(data);\n            setAllBotSettingResults(data.results);\n            if (data.count != null && selectedPageSizeOption.value != null) {\n              setTotalPages(\n                Math.ceil(data.count / +selectedPageSizeOption.value)\n              );\n            }\n          })\n          .catch(() => {\n            // const notification = {\n            //   id: Math.floor(Math.random() * 101 + 1),\n            //   title: 'Thất bại',\n            //   description: 'Không thể lấy bot settings!',\n            //   backgroundColor: 'text-red-100',\n            //   icon: images.toast.error,\n            // };\n            // dispatch(uiActions.showNotifications(notification));\n            enqueueSnackbar('Không thể lấy bot settings!', {\n              variant: 'error',\n            });\n          });\n      }\n    },\n    [enqueueSnackbar, partnerBotDatas, selectedPageSizeOption]\n  );\n\n  const updateSettingStatus = useCallback(\n    (botSettingResult: BotSettingResult, statusToUpdate: string) => {\n      let data: BotSettingUpdate = {\n        status: statusToUpdate,\n        // block_status: botSetting.block_status,\n        // master: botSetting.master,\n        // master_name: botSetting.master_name,\n        // o_amount: botSetting.o_amount,\n        // fold_command: botSetting.fold_command,\n        // aim_min: botSetting.aim_min,\n        // aim_max: botSetting.aim_max,\n      };\n      if (statusToUpdate === 'inactive') {\n        data = {\n          ...data,\n          current_profit: 0,\n          current_date_profit: 0,\n          current_volume: 0,\n          current_date_volume: 0,\n        };\n      }\n      axios\n        .patch(`${APIs.updateSettingUltimateIds}${botSettingResult.id}/`, data)\n        .then((res) => {\n          getAllBotSettings(page + 1);\n          enqueueSnackbar(\n            `${\n              statusToUpdate === 'active' ? 'Bật' : 'Tắt'\n            } cấu hình thành công!`,\n            {\n              variant: 'success',\n            }\n          );\n        })\n        .catch((err) => {\n          // const notification = {\n          //   id: Math.floor(Math.random() * 101 + 1),\n          //   title: 'Thất bại',\n          //   description: 'Không thể update bot setting status!',\n          //   backgroundColor: 'text-red-100',\n          //   icon: images.toast.error,\n          // };\n          // dispatch(uiActions.showNotifications(notification));\n          enqueueSnackbar(\n            `${statusToUpdate === 'active' ? 'Bật' : 'Tắt'} cấu hình thất bại!`,\n            {\n              variant: 'error',\n            }\n          );\n        });\n    },\n    [enqueueSnackbar, getAllBotSettings, page]\n  );\n\n  const deleteSettingById = () => {\n    axios\n      .delete(`${APIs.deleteSettingById}${selectedBotSettingResult.id}`)\n      .then((res) => {\n        // const notification = {\n        //   id: Math.floor(Math.random() * 101 + 1),\n        //   title: 'Thành công',\n        //   description: 'Xoá cấu hình thành công!',\n        //   backgroundColor: 'text-green-100',\n        //   icon: images.toast.check,\n        // };\n        // dispatch(uiActions.showNotifications(notification));\n        getAllBotSettings(page + 1);\n        enqueueSnackbar('Xoá cấu hình thành công!', { variant: 'success' });\n      })\n      .catch(() => {\n        // const notification = {\n        //   id: Math.floor(Math.random() * 101 + 1),\n        //   title: 'Thất bại',\n        //   description: 'Không thể xoá cấu hình!',\n        //   backgroundColor: 'text-red-100',\n        //   icon: images.toast.error,\n        // };\n        // dispatch(uiActions.showNotifications(notification));\n        enqueueSnackbar('Không thể xoá cấu hình!', { variant: 'error' });\n      });\n  };\n\n  const deleteSettingByListIds = () => {\n    // ENTRY: string: boolean\n    const selectedListIds = Object.entries(selectedIds)\n      .filter((selected) => selected[1])\n      .map((selected) => selected[0]);\n    console.log('selectedListIds:', selectedListIds);\n    axios\n      .delete(`${APIs.deleteSettingById}${selectedListIds}`)\n      .then((res) => {\n        getAllBotSettings(page + 1);\n        enqueueSnackbar('Xoá cấu hình thành công!', { variant: 'success' });\n      })\n      .catch(() => {\n        enqueueSnackbar('Xoá cấu hình thất bại!', { variant: 'error' });\n      });\n  };\n\n  const updateModelData = useCallback(\n    (botSettingResult: BotSettingResult) => {\n      // FIND SELECTED ACCOUNT TYPE\n      // const accountType = {\n      //   value: 'LIVE',\n      //   label: 'Tài khoản LIVE',\n      // };\n      const accountType = ACCOUNT_TYPES.filter(\n        (accountType) => accountType.value === botSettingResult.account_type\n      )[0];\n\n      // FIND SELECTED BOT MASTER ACCOUNT\n      // const masterAccount = {\n      //   value: botSetting.master,\n      //   label: botSetting.master_name,\n      // };\n\n      // FIND SELECTED BOT ACCOUNT\n      const botAccount = accountOptions.filter(\n        (botAccount) => botAccount.value === botSettingResult.follower\n      )[0];\n\n      console.log(botSettingResult);\n      console.log(accountType);\n      console.log(accountOptions);\n      console.log(botAccount);\n\n      // UPDATE FORM MODAL\n      const updatedFormikValues = {\n        master: botSettingResult.master,\n        username: botSettingResult.master_name,\n        amountPerOrder: botSettingResult.o_amount,\n        multiply: botSettingResult.fold_command,\n        aimMin: botSettingResult.aim_min,\n        aimMax: botSettingResult.aim_max,\n        aiBotTelegramEnabled: true,\n        aiBasicEnabled: true,\n        copyTradeEnabled: true,\n        status: botSettingResult.status,\n        block_status: botSettingResult.block_status,\n      };\n\n      setSelectedAccountType(accountType);\n      console.log('3')\n      // setSelectedMasterAccount(masterAccount);\n      setSelectedBotAccount(botAccount);\n      setFormikValues(updatedFormikValues);\n    },\n    [accountOptions]\n  );\n\n  const resetAllCurrent = useCallback(() => {\n    const data: BotSettingUpdate = {\n      current_profit: 0,\n      current_date_profit: 0,\n      current_volume: 0,\n      current_date_volume: 0,\n    };\n    const selectedListIds = Object.entries(selectedIds)\n      .filter((selected) => selected[1])\n      .map((selected) => selected[0]);\n    console.log('selectedListIds:', selectedListIds);\n    axios\n      .patch(`${APIs.updateSettingUltimateIds}${selectedListIds}/`, data)\n      .then((res) => {\n        getAllBotSettings(page + 1);\n        enqueueSnackbar(`Nạp lại cấu hình thành công!`, {\n          variant: 'success',\n        });\n      })\n      .catch((err) => {\n        enqueueSnackbar(`Nạp lại cấu hình thất bại!`, {\n          variant: 'error',\n        });\n      });\n  }, [enqueueSnackbar, getAllBotSettings, page, selectedIds]);\n\n  // PAGINATION FUNCTION\n  const handleSelectPageSize = (\n    option: SingleValue<InputSelectOption>,\n    actionMeta: ActionMeta<InputSelectOption>\n  ) => {\n    if (option != null) {\n      setSelectedPageSizeOption(option);\n      setPage(0);\n      getAllBotSettings(1);\n    }\n  };\n\n  const handlePageChange = useCallback(\n    ({ selected }: { selected: number }) => {\n      console.log(selected);\n      const page = selected + 1;\n      setPage(selected);\n      getAllBotSettings(page);\n    },\n    [getAllBotSettings]\n  );\n\n  // TABLE\n  const columns = React.useMemo<Column<BotSettingResult>[]>(\n    () => [\n      {\n        id: 'checkbox',\n        accessor: 'checkbox',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex justify-center items-center\">\n              <input\n                type=\"checkbox\"\n                className=\"checkbox\"\n                checked={selectedIds[original.id] === true}\n                onChange={(e) => toggleRow(original.id)}\n              />\n            </div>\n          );\n        },\n        Header: () => {\n          return (\n            <div className=\"flex justify-center items-center\">\n              <input\n                type=\"checkbox\"\n                className=\"checkbox text-center\"\n                checked={selectAll === 1}\n                ref={(input) => {\n                  if (input) {\n                    input.indeterminate = selectAll === 2;\n                  }\n                }}\n                onChange={() => toggleAllRow()}\n              />\n            </div>\n          );\n        },\n        sortable: false,\n        width: 45,\n      },\n      {\n        Header: () => {\n          return <div className=\"text-left\">Tên chuyên gia</div>;\n        },\n        accessor: 'master',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          const isBlocked = original.block_status === 'blocked';\n          return (\n            <div className=\"flex items-center gap-x-1\">\n              <p className=\"text-sm text-ink-100\">{original.master_name}</p>\n              {isBlocked && (\n                <p className=\"text-xs text-purple-800\">(Đã bị chặn)</p>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => {\n          return <div className=\"text-center\">Loại tài khoản</div>;\n        },\n        accessor: 'account_type',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          const isDemoAccount = original.account_type === 'DEMO';\n          // const isDemoAccount = false;\n          return (\n            <div className=\"flex justify-center gap-x-1\">\n              {/* <p>{original.account_type}</p> */}\n              <p\n                className={`px-2 ${\n                  isDemoAccount ? 'bg-blue-80' : 'bg-purple-100'\n                } rounded-3xl text-ink-100 text-xs`}\n              >\n                {original.account_type}\n                {/* LIVE */}\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => {\n          return <div className=\"text-left\">Tài khoản giao dịch</div>;\n        },\n        accessor: 'follower_name',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex items-center gap-x-1\">\n              <p className=\"text-sm text-ink-100\">{original.follower_name}</p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => <div className=\"text-end\">Volume Lệnh</div>,\n        accessor: 'o_amount',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"text-end\">\n              <span className=\"rounded-3xl text-teal-100 text-sm font-semibold\">\n                ${original.current_volume?.toLocaleString('en-US', options)}\n              </span>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => <div className=\"text-end\">LN ngày/LN tổng</div>,\n        accessor: 'profitAndTotalProfit',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"text-end text-sm font-semibold\">\n              <span\n                className={`${\n                  original.current_date_profit > 0\n                    ? 'text-green-100'\n                    : original.current_date_profit === 0\n                    ? 'bg-primary-100 bg-clip-text text-transparent'\n                    : 'text-red-100'\n                }`}\n              >\n                {original.current_date_profit >= 0 ? '$' : '-$'}\n                {Math.abs(original.current_date_profit).toLocaleString(\n                  'en-US',\n                  options\n                )}\n              </span>\n              /\n              <span\n                className={`${\n                  original.current_profit > 0\n                    ? 'text-green-100'\n                    : original.current_profit === 0\n                    ? 'bg-primary-100 bg-clip-text text-transparent'\n                    : 'text-red-100'\n                }`}\n              >\n                {original.current_profit >= 0 ? '$' : '-$'}\n                {Math.abs(original.current_profit).toLocaleString(\n                  'en-US',\n                  options\n                )}\n              </span>\n            </div>\n          );\n        },\n      },\n      {\n        Header: 'HS. Gấp lệnh',\n        accessor: 'fold_command',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex justify-center items-center\">\n              <p className=\"px-2 leading-5 bg-orange-100 rounded-3xl text-ink-100 text-xs\">\n                X{original.fold_command?.toLocaleString('en-US', options)}\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: 'Chốt lãi/Cắt lỗ',\n        accessor: 'profitLoss',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex items-center justify-center\">\n              <p className=\"px-2 leading-5 bg-green-100 rounded-3xl text-ink-100 text-xs\">\n                ${original.aim_max?.toLocaleString('en-US', options)}\n              </p>\n              /\n              <p className=\"px-2 leading-5 bg-red-100 rounded-3xl text-ink-100 text-xs\">\n                ${original.aim_min?.toLocaleString('en-US', options)}\n              </p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => <div className=\"text-left\">Cập nhật gần nhất</div>,\n        accessor: 'updated_at',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          // 2023-01-26T10:15:54.834029Z\n          return (\n            <div className=\"flex items-center gap-x-1\">\n              {/* <p>{original.lastUpdated}</p> */}\n              <p>{moment(original.updated_at).format('DD/MM/YYYY HH:mm')}</p>\n            </div>\n          );\n        },\n      },\n      {\n        Header: () => <div className=\"text-center\">Trạng thái</div>,\n        accessor: 'status',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          const status = original.status;\n          const handleClick = () => {\n            console.log(status);\n            if (status === 'active') {\n              updateSettingStatus(original, 'inactive');\n            } else {\n              updateSettingStatus(original, 'active');\n            }\n          };\n          const isCopyTradeEnabled = status === 'active';\n          // const [checkButton, setcheckButton] = useState(\n          //   original.status === 'active'\n          // );\n          // const handleClick = () => {\n          //   setcheckButton((prev) => !prev);\n          // };\n          return (\n            <div className=\"flex items-center justify-center gap-x-1\">\n              <ReactSwitch\n                onChange={handleClick}\n                checkedIcon={\n                  <div className=\"h-full flex justify-center items-center text-xs bg-background-100 bg-clip-text text-transparent font-medium\">\n                    Bật\n                  </div>\n                }\n                uncheckedIcon={\n                  <div className=\"h-full flex justify-center items-center text-xs text-ink-40\">\n                    Tắt\n                  </div>\n                }\n                checked={isCopyTradeEnabled}\n                className=\"react-switch\"\n              />\n            </div>\n          );\n        },\n      },\n      {\n        accessor: 'actions',\n        Cell: (props) => {\n          const original = props.cell.row.original;\n          return (\n            <div className=\"flex justify-center gap-x-1 w-[1.5rem]\">\n              <Tooltip\n                componentsProps={{\n                  tooltip: {\n                    className: '!px-0 !py-3 !bg-dropdown !rounded-xl',\n                  },\n                  arrow: {\n                    className:\n                      '!w-[1rem] !translate-x-[9.6875rem] !before:bg-dropdown',\n                    sx: {\n                      '&::before': {\n                        background: 'var(--bg-dropdown)',\n                      },\n                    },\n                  },\n                }}\n                title={\n                  <div\n                    onClick={(e) => {\n                      handleTooltipClose(original.id);\n                      e.stopPropagation();\n                    }}\n                  >\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={(e) => {\n                        console.log(original);\n                        handleOpenUpsertModal();\n                        setIsEditing(true);\n                        updateModelData(original);\n                        setSelectedBotSettingResult(original);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={images.table.edit}\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">Chỉnh sửa</p>\n                    </div>\n                    <div\n                      className=\"p-3 min-w-[11.25rem] hover:bg-primary-10 flex items-center gap-x-2 cursor-pointer\"\n                      onClick={() => {\n                        handleOpenPopupModal();\n                        setIsDeletingByList(false);\n                        setSelectedBotSettingResult(original);\n                      }}\n                    >\n                      <img\n                        className=\"w-[1.5rem]\"\n                        src={images.table.delete}\n                        alt=\"BotLambotrade\"\n                      />\n                      <p className=\"text-ink-100 text-base\">Xoá cấu hình</p>\n                    </div>\n                  </div>\n                }\n                arrow\n                open={isTooltipOpen[original.id]}\n                onOpen={() => {\n                  handleTooltipOpen(original.id);\n                }}\n                onClose={() => {\n                  handleTooltipClose(original.id);\n                }}\n                disableHoverListener={!isDesktop}\n                disableFocusListener={!isDesktop}\n                disableTouchListener={!isDesktop}\n                placement={`${isDesktop ? 'bottom-end' : 'bottom'}`}\n                enterTouchDelay={0}\n                leaveTouchDelay={20000}\n              >\n                <img\n                  className=\"cursor-pointer\"\n                  src={images.table.actions}\n                  alt=\"BotLambotrade\"\n                  onClick={() => {\n                    handleTooltipToggle(original.id);\n                  }}\n                />\n              </Tooltip>\n            </div>\n          );\n        },\n      },\n    ],\n    [\n      handleTooltipOpen,\n      isDesktop,\n      isTooltipOpen,\n      selectAll,\n      selectedIds,\n      toggleAllRow,\n      toggleRow,\n      updateModelData,\n      updateSettingStatus,\n    ]\n  );\n\n  const tableInstance = useTable({ columns, data }, usePagination);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    tableInstance;\n\n  // FORMIK\n  const formikUpsert = useFormik({\n    initialValues: formikValues,\n    validateOnChange: false,\n    enableReinitialize: true,\n    validationSchema: Yup.object({\n      // accountType: Yup.string().required('Vui lòng nhập loại tài khoản'),\n      // email: Yup.string().required('Vui lòng nhập loại tài khoản'),\n      // balance: Yup.number().min(0).typeError('Số dư không thể âm'),\n      username: Yup.string().required('Vui lòng nhập tên chuyên gia'),\n      // amountPerOrder: Yup.number()\n      //   .min(0, 'Giá trị 1 lệnh không nhỏ hơn 1')\n      //   .typeError('Giá trị 1 lệnh không nhỏ hơn 1')\n      //   .required(\"Cần nhập giá trị 1 lệnh\"),\n      // multiply: Yup.number()\n      //   .min(1, 'Hệ số gấp lệnh không thể nhỏ hơn 1')\n      //   .max(100, 'Hệ số gấp lệnh không thể lớn hơn 100')\n      //   .required(\"Cần nhập hệ số gấp lệnh\"),\n      aimMin: Yup.number().min(0).typeError('Giá trị cắt lỗ không thể âm'),\n      aimMax: Yup.number().min(0).typeError('Giá trị chốt lãi không thể âm'),\n    }),\n    onSubmit: async (values, helpers) => {\n      console.log(values);\n      if (isMasterAccountValid) {\n        if (isEditing) {\n          // UPDATE\n          // copyTradeEnabled = status\n          console.log(selectedBotSettingResult);\n          const masterId = allBotDatas.filter(\n            (botData) => botData.username === values.username\n          )[0].id;\n          console.log('allBotDatas:', allBotDatas);\n          console.log('masterId', masterId);\n          const updateCopyTradeData: BotSettingUpdate = {\n            account_type: selectedAccountType.value,\n            master: masterId,\n            master_name: values.username,\n            o_amount: values.amountPerOrder,\n            fold_command: values.multiply,\n            status: values.status,\n            block_status: selectedBotSettingResult.block_status,\n            current_profit: selectedBotSettingResult.current_profit,\n            aim_min: values.aimMin,\n            aim_max: values.aimMax,\n          };\n          console.log(updateCopyTradeData);\n          axios\n            .patch(\n              `${APIs.updateSettingByIds}${selectedBotSettingResult.id}/`,\n              updateCopyTradeData\n            )\n            .then(() => {\n              getAllBotSettings(page + 1);\n              enqueueSnackbar('Cập nhập cấu hình thành công!', {\n                variant: 'success',\n              });\n              handleCloseUpsertModal();\n            })\n            .catch((err) => {\n              enqueueSnackbar(\n                `${\n                  err.data\n                    ? JSON.stringify(err.data)\n                    : 'Cập nhập cấu hình thất bại!'\n                }`,\n                { variant: 'error' }\n              );\n            });\n        } else {\n          // INSERT\n          // copyTradeEnabled = status\n          const masterId = allBotDatas.filter(\n            (botData) => botData.username === values.username\n          )[0].id;\n          console.log('allBotDatas:', allBotDatas);\n          console.log('masterId', masterId);\n          const createCopyTradeData: BotCopyTrade = {\n            account_type: selectedAccountType.value,\n            master: masterId,\n            // master_name: values.masterName,\n            follower: +selectedBotAccount.value,\n            // follower_name: selectedBotAccount.label.toString(),\n            o_amount: values.amountPerOrder,\n            fold_command: values.multiply,\n            ai_bot_telegram_enabled: values.aiBotTelegramEnabled,\n            ai_basic_enabled: values.aiBasicEnabled,\n            copy_trade_enabled: values.copyTradeEnabled,\n            status: values.status,\n            aim_min: values.aimMin,\n            aim_max: values.aimMax,\n          };\n          console.log('createCopyTradeData:', createCopyTradeData);\n          axios\n            .post(APIs.createCopyTradeSetting, createCopyTradeData)\n            .then(() => {\n              // const notification = {\n              //   id: Math.floor(Math.random() * 101 + 1),\n              //   title: 'Thành công',\n              //   description: 'Tạo cấu hình thành công!',\n              //   backgroundColor: 'text-green-100',\n              //   icon: images.toast.check,\n              // };\n              // dispatch(uiActions.showNotifications(notification));\n              getAllBotSettings(page + 1);\n              enqueueSnackbar('Tạo cấu hình thành công!', {\n                variant: 'success',\n              });\n              handleCloseUpsertModal();\n            })\n            .catch((err) => {\n              // const notification = {\n              //   id: Math.floor(Math.random() * 101 + 1),\n              //   title: 'Thất bại',\n              //   description: `${\n              //     err.data ? JSON.stringify(err.data) : 'Tạo cấu hình thất bại!'\n              //   }`,\n              //   backgroundColor: 'text-red-100',\n              //   icon: images.toast.error,\n              // };\n              // dispatch(uiActions.showNotifications(notification));\n              enqueueSnackbar(\n                `${\n                  err.data ? JSON.stringify(err.data) : 'Tạo cấu hình thất bại!'\n                }`,\n                { variant: 'error' }\n              );\n            });\n        }\n      } else {\n        scrollElement.current?.scrollIntoView();\n      }\n    },\n  });\n\n  console.log(selectedBotAccount, 'selectedBotAccount')\n\n  // BOT SELECT\n  const getAllAccounts = useCallback(() => {\n    axios\n      .get(APIs.allAccounts)\n      .then((res) => {\n        const data = res.data;\n        setAllBotDatas(data);\n      })\n      .catch(() => {\n        // const notification = {\n        //   id: Math.floor(Math.random() * 101 + 1),\n        //   title: 'Thất bại',\n        //   description: 'Không thể lấy tài khoản master',\n        //   backgroundColor: 'text-red-100',\n        //   icon: images.toast.error,\n        // };\n        // dispatch(uiActions.showNotifications(notification));\n        enqueueSnackbar('Không thể lấy tài khoản master', { variant: 'error' });\n      });\n  }, [enqueueSnackbar]);\n\n  const getAllPartnerBots = useCallback(() => {\n    axios\n      .get(APIs.partnerAccount)\n      .then((res) => {\n        const datas: BotData[] = res.data;\n        const partnerBotDatas = datas.filter(\n          (data) => data.status === 'active'\n        );\n        setPartnerBotDatas(partnerBotDatas);\n      })\n      .catch((err) => {\n        // const notification = {\n        //   id: Math.floor(Math.random() * 101 + 1),\n        //   title: 'Thất bại',\n        //   description: 'Không thể lấy bot datas',\n        //   backgroundColor: 'text-red-100',\n        //   icon: images.toast.error,\n        // };\n        // dispatch(uiActions.showNotifications(notification));\n        enqueueSnackbar('Không thể lấy bot datas', { variant: 'error' });\n      });\n  }, [enqueueSnackbar]);\n\n  const getBalance = useCallback(\n    (id: number | string) => {\n      axios\n        .get(`${APIs.balanceById}${id}/`)\n        .then((res) => {\n          const data: BotBalance = res.data;\n          setBotBalance(data);\n        })\n        .catch(() => {\n          // const notification = {\n          //   id: Math.floor(Math.random() * 101 + 1),\n          //   title: 'Thất bại',\n          //   description: 'Không thể lấy được số dư ví',\n          //   backgroundColor: 'text-red-100',\n          //   icon: images.toast.error,\n          // };\n          // dispatch(uiActions.showNotifications(notification));\n          enqueueSnackbar('Không thể lấy được số dư ví', { variant: 'error' });\n        });\n    },\n    [enqueueSnackbar]\n  );\n\n  const reloadDemoBalance = useCallback(\n    (id: number | string) => {\n      axios\n        .get(`${APIs.reloadDemoBalance}${id}/`)\n        .then((res) => {\n          enqueueSnackbar('Đặt lại số dư ví DEMO thành công!', {\n            variant: 'success',\n          });\n          getBalance(selectedBotAccount.value);\n        })\n        .catch(() => {\n          enqueueSnackbar('Đặt lại số dư ví DEMO thất bại!', {\n            variant: 'error',\n          });\n        });\n    },\n    [enqueueSnackbar, getBalance, selectedBotAccount.value]\n  );\n\n  const convertPartnerBotsToPartnerAccountOptions = useCallback(() => {\n    if (partnerBotDatas && partnerBotDatas.length > 0) {\n      const accountOptions = partnerBotDatas.map((botData) => ({\n        value: botData.id,\n        label: botData.botname,\n      }));\n      setAccountOptions(accountOptions);\n    }\n  }, [partnerBotDatas]);\n\n  const convertAllPartnerBotsToPartnerAccountOptions = useCallback(() => {\n    if (allBotDatas && allBotDatas.length > 0) {\n      const allBotAccountOptions = allBotDatas.map((botData) => ({\n        value: botData.id,\n        label: botData.username,\n      }));\n      setAllBotAccountOptions(allBotAccountOptions);\n    }\n  }, [allBotDatas]);\n\n  useEffect(() => {\n    getAllPartnerBots();\n    getAllAccounts();\n  }, [getAllAccounts, getAllPartnerBots]);\n\n  useEffect(() => {\n    console.log('HERE');\n    if (partnerBotDatas && partnerBotDatas.length > 0) {\n      if (selectedAccountType.value === 'LIVE' && !isPartnerBotInitialized) {\n        getBalance(partnerBotDatas[0].id);\n        const firstBotOption = {\n          value: partnerBotDatas[0].id,\n          label: partnerBotDatas[0].botname,\n        };\n        console.log('4')\n        setSelectedBotAccount(firstBotOption);\n        setIsPartnerBotInitialized(true);\n        dispatch(userActions.updateSelectedBotAccount(firstBotOption));\n      } else if (selectedBotAccount.value) {\n        getBalance(selectedBotAccount.value);\n      }\n\n      convertPartnerBotsToPartnerAccountOptions();\n      convertAllPartnerBotsToPartnerAccountOptions();\n    }\n  }, [\n    partnerBotDatas,\n    convertPartnerBotsToPartnerAccountOptions,\n    getBalance,\n    selectedAccountType,\n    selectedBotAccount.value,\n    convertAllPartnerBotsToPartnerAccountOptions,\n    dispatch,\n    isPartnerBotInitialized,\n  ]);\n\n  useEffect(() => {\n    getAllBotSettings(page + 1);\n  }, [getAllBotSettings, page]);\n\n  useEffect(() => {\n    const getData = setTimeout(() => {\n      if (formikUpsert.values.username !== '') {\n        axios\n          .get(`${APIs.partnerSearch}${formikUpsert.values.username}/`)\n          .then((response) => {\n            console.log(response.data, 'eeeee');\n            if (response.data && response.data?.length > 0) {\n              setIsMasterAccountValid(true);\n              formikUpsert.setFieldValue('master', response.data.id);\n              // formikUpsert.setFieldValue('masterName', response.data.id);\n            } else {\n              setIsMasterAccountValid(false);\n            }\n          })\n          .catch((err) => {\n            setIsMasterAccountValid(false);\n          });\n      }\n    }, 500);\n\n    return () => clearTimeout(getData);\n  }, [formikUpsert.values.username]);\n\n  // USE EFFECT SHOW/HIDE VALIDATING AMOUNT PER ORDER MODAL\n  useEffect(() => {\n    if (\n      +formikUpsert.values.amountPerOrder <= 0 &&\n      !isAmountPerOrderAmountFocus\n    ) {\n      setModalAttributes((prev) => ({\n        ...prev,\n        isOpen: true,\n        icon: images.copy.warning,\n        headingMessage: 'Giá trị lệnh không hợp lệ',\n        message: (\n          <>\n            Giá trị lệnh phải lớn hơn <span className=\"font-bold\">0</span>\n          </>\n        ),\n        buttonMessage: 'Xác nhận',\n        handleOpen: handleOpenValidAmountPopupModal,\n        handleClose: handleCloseValidAmountPopupModal,\n      }));\n    }\n  }, [isAmountPerOrderAmountFocus]);\n\n  // USE EFFECT SHOW/HIDE VALIDATING MULTIPLY AMOUNT MODAL\n  useEffect(() => {\n    if (!isMultiplyAmountFocus) {\n      if (+formikUpsert.values.multiply < 1) {\n        setModalAttributes((prev) => ({\n          ...prev,\n          isOpen: true,\n          icon: images.copy.warning,\n          headingMessage: 'Hệ số lệnh không hợp lệ',\n          message: (\n            <>\n              Hệ số lệnh tối thiểu là <span className=\"font-bold\">X1</span>\n            </>\n          ),\n          buttonMessage: 'Xác nhận',\n          handleOpen: handleOpenValidAmountPopupModal,\n          handleClose: handleCloseValidAmountPopupModal,\n        }));\n      } else if (+formikUpsert.values.multiply > 100) {\n        setModalAttributes((prev) => ({\n          ...prev,\n          isOpen: true,\n          icon: images.copy.warning,\n          headingMessage: 'Hệ số lệnh không hợp lệ',\n          message: (\n            <>\n              Hệ số lệnh tối đa là <span className=\"font-bold\">X100</span>\n            </>\n          ),\n          buttonMessage: 'Xác nhận',\n          handleOpen: handleOpenValidAmountPopupModal,\n          handleClose: handleCloseValidAmountPopupModal,\n        }));\n      }\n    }\n  }, [isMultiplyAmountFocus]);\n\n  // USE EFFECT SHOW/HIDE VALIDATING MULTIPLY AMOUNT MODAL\n\n  return (\n    <>\n      <div className=\"h-fit mb-6 bg-background-80 rounded-3xl\">\n        <div className=\"p-6 border-b border-ink-10 flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n          <h1 className=\"text-xl text-ink-100 font-semibold\">\n            Danh sách cấu hình {isMobile && <br />} Copy Trade đã tạo\n          </h1>\n          <button\n            className=\"px-3 py-[0.625rem] w-full md:w-auto rounded-xl flex justify-center items-center gap-[0.625rem] bg-primary-100\"\n            onClick={() => {\n              if (partnerBotDatas.length === 0) {\n                setModalAttributes((prev) => ({\n                  ...prev,\n                  isOpen: true,\n                  icon: images.copy.account_not_integrate,\n                  headingMessage: 'Bạn chưa liên kết tài khoản',\n                  message: (\n                    <>\n                      Liên kết tài khoản ngay để thực hiện giao dịch cùng đội\n                      ngũ chuyên gia của AI BotTrade\n                    </>\n                  ),\n                  buttonMessage: 'Liên kết tài khoản',\n                  handleOpen: handleOpenAccountTradePopupModal,\n                  handleClose: handleCloseAccountTradePopupModal,\n                }));\n                return;\n              }else{\n                const firstBotOption = {\n                  value: partnerBotDatas[0].id,\n                  label: partnerBotDatas[0].botname,\n                };\n                if(!selectedBotAccount.value){\n                  setSelectedBotAccount(firstBotOption)\n                }\n              }\n              handleOpenUpsertModal();\n              setIsEditing(false);\n            }}\n          >\n            <img src={images.copy.plus} alt=\"BotLambotrade\" />\n            <p className=\"bg-background-100 bg-clip-text text-transparent font-semibold\">\n              Thêm mới\n            </p>\n          </button>\n        </div>\n        {allBotSettingResults.length === 0 && (\n          <div className=\"py-[5rem] flex flex-col justify-center items-center gap-y-6\">\n            <img\n              className=\"w-[10.25rem]\"\n              src={images.copy.empty}\n              alt=\"BotLambotrade\"\n            />\n            <p className=\"text-ink-60\">Danh sách cấu hình Copy Trade trống</p>\n          </div>\n        )}\n        {allBotSettingResults.length > 0 && (\n          <div className=\"p-6 flex flex-col gap-y-6\">\n            {/* SEARCH */}\n            <div>\n              <label\n                htmlFor=\"default-search\"\n                className=\"mb-2 text-sm font-medium text-gray-900 sr-only dark:text-ink-100\"\n              >\n                Search\n              </label>\n              <div className=\"relative\">\n                <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n                  <svg\n                    aria-hidden=\"true\"\n                    className=\"w-5 h-5 text-black-opacity-100\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                    ></path>\n                  </svg>\n                </div>\n                <input\n                  type=\"search\"\n                  id=\"default-search\"\n                  className=\"block w-full md:w-[21.375rem] py-3 pl-9 pr-8 text-sm text-black-opacity-40 border border-ink-20 rounded-xl bg-ink-05 focus:ring-blue-500 focus:border-blue-500 placeholder-black-opacity-40 dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n                  placeholder=\"Tìm kiếm\"\n                  value={searchInput}\n                  onChange={(e) => {\n                    setSearchInput(e.target.value);\n                  }}\n                  required\n                />\n              </div>\n            </div>\n\n            {Object.values(selectedIds).filter((value) => value === true)\n              .length > 0 && (\n              <div className=\"px-4 py-3 bg-ink-05 rounded-xl flex flex-col md:flex-row md:justify-between md:items-center gap-4\">\n                <p className=\"text-ink-100 font-semibold\">\n                  {`Đã chọn ${\n                    Object.values(selectedIds).filter((value) => value === true)\n                      .length\n                  }`}\n                </p>\n                <div className=\"grid grid-cols-2 md:flex items-center justify-center gap-4\">\n                  {/* <button\n                    className=\"px-8 py-3 bg-primary-100 rounded-xl\"\n                    onClick={() => {\n                      setIsDeletingByList(true);\n                      // deleteSettingByListIds();\n                      handleOpenPopupModal();\n                    }}\n                  >\n                    <p className=\"bg-background-100 bg-clip-text text-transparent font-semibold\">\n                      Xoá\n                    </p>\n                  </button> */}\n                  <BotTradeSettingButton\n                    icon={images.bot.delete_gold}\n                    iconHover={images.bot.delete}\n                    classNameHover=\"background-animation\"\n                    onClick={() => {\n                      setIsDeletingByList(true);\n                      handleOpenPopupModal();\n                    }}\n                  >\n                    Xoá\n                  </BotTradeSettingButton>\n                  <BotTradeSettingButton\n                    icon={images.bot.reload_gold}\n                    iconHover={images.bot.reload}\n                    classNameHover=\"background-animation\"\n                    onClick={() => {\n                      // showIsDevelopingModal();\n                      resetAllCurrent();\n                    }}\n                  >\n                    Nạp lại\n                  </BotTradeSettingButton>\n                </div>\n              </div>\n            )}\n\n            <div>\n              <div\n                className={`border border-ink-05 rounded-2xl w-full ${\n                  !isLargeDesktop ? 'overflow-x-scroll border-collapse' : ''\n                }`}\n              >\n                <table className=\"w-full\" {...getTableProps()}>\n                  <thead>\n                    {headerGroups.map((headerGroup) => (\n                      <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map((column) => (\n                          <th\n                            className={`p-4 last:w-[1%] whitespace-nowrap 2xl:whitespace-normal last:whitespace-nowrap bg-primary-05 first-of-type:rounded-tl-2xl last-of-type:rounded-tr-2xl text-sm text-ink-100 font-normal`}\n                            {...column.getHeaderProps()}\n                          >\n                            {column.render('Header')}\n                          </th>\n                        ))}\n                      </tr>\n                    ))}\n                  </thead>\n                  <tbody {...getTableBodyProps()}>\n                    {rows.map((row) => {\n                      prepareRow(row);\n                      return (\n                        <tr\n                          className={`border-b border-ink-10 last:border-0 whitespace-nowrap text-ellipsis`}\n                          {...row.getRowProps()}\n                        >\n                          {row.cells.map((cell) => (\n                            <td\n                              className=\"p-4 last:w-[1%] last:whitespace-nowrap\"\n                              {...cell.getCellProps()}\n                            >\n                              {cell.render('Cell')}\n                            </td>\n                          ))}\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </div>\n\n              {/* <div className=\"m-6 flex justify-end gap-x-2\">\n            <div className=\"px-3 py-2 flex justify-center items-center gap-x-1 border border-ink-10 rounded-lg\">\n              <p>\n                {pageSize}/{totalRecords}\n              </p>\n              <KeyboardArrowDown\n                sx={{\n                  fill: 'var(--color-ink-80)',\n                  cursor: 'pointer',\n                }}\n              />\n            </div>\n            <ReactPaginate\n              breakLabel=\"...\"\n              onPageChange={handlePageClick}\n              marginPagesDisplayed={isMobile ? 2 : 3}\n              pageCount={page.length}\n              previousLabel={\n                <div className=\"p-[0.375rem] border border-ink-10 rounded-lg\">\n                  <KeyboardArrowLeft sx={{ fill: 'var(--color-ink-80)' }} />\n                </div>\n              }\n              nextLabel={\n                <div className=\"p-[0.375rem] border border-ink-10 rounded-lg\">\n                  <KeyboardArrowRight sx={{ fill: 'var(--color-ink-80)' }} />\n                </div>\n              }\n              pageClassName=\"py-[0.375rem] px-3 border border-ink-10 rounded-lg\"\n              pageLinkClassName=\"page-link\"\n              previousClassName=\"page-item\"\n              previousLinkClassName=\"page-link\"\n              nextClassName=\"page-item\"\n              nextLinkClassName=\"page-link\"\n              breakClassName=\"page-item\"\n              breakLinkClassName=\"page-link\"\n              containerClassName=\"flex items-center gap-x-2 text-ink-80\"\n              activeClassName=\"active bg-primary-100 bg-clip-text text-transparent border-primary\"\n            />\n          </div> */}\n            </div>\n\n            {/* PAGINATION */}\n            <div\n              className={`flex flex-col justify-center items-end md:flex-row md:justify-end md:items-center gap-2`}\n            >\n              <div>\n                <SelectInput\n                  menuRef={menuRef}\n                  value={selectedPageSizeOption}\n                  onChange={handleSelectPageSize}\n                  inputClassName=\"!py-2 !pr-8 text-sm\"\n                  indicatorContainerClassName=\"!right-3\"\n                  indicatorContainerIconClassName=\"!w-[1rem]\"\n                  menuPortalClassName={`min-w-[10.25rem] ${\n                    isMobile ? 'translate-x-[-3.2rem]' : ''\n                  }`}\n                  name=\"select\"\n                  options={PAGE_SIZE_OPTIONS}\n                />\n              </div>\n\n              <ReactPaginate\n                breakLabel=\"...\"\n                onPageChange={handlePageChange}\n                marginPagesDisplayed={isMobile ? 2 : 3}\n                pageCount={totalPages}\n                previousLabel={\n                  <div\n                    onMouseLeave={() => {\n                      setIsPrevHover(false);\n                    }}\n                    onMouseEnter={() => {\n                      setIsPrevHover(true);\n                    }}\n                    className=\"p-[0.375rem] border-input-ink before:rounded-lg\"\n                  >\n                    {isPrevHover ? (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_left_arrow_gold}\n                        alt=\"BotLambotrade\"\n                      />\n                    ) : (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_left_arrow}\n                        alt=\"BotLambotrade\"\n                      />\n                    )}\n                  </div>\n                }\n                nextLabel={\n                  <div\n                    onMouseLeave={() => {\n                      setIsNextHover(false);\n                    }}\n                    onMouseEnter={() => {\n                      setIsNextHover(true);\n                    }}\n                    className=\"p-[0.375rem] border-input-ink before:rounded-lg\"\n                  >\n                    {isNextHover ? (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_right_arrow_gold}\n                        alt=\"BotLambotrade\"\n                      />\n                    ) : (\n                      <img\n                        className=\"w-[1.25rem]\"\n                        src={images.table.pagination_right_arrow}\n                        alt=\"BotLambotrade\"\n                      />\n                    )}\n                  </div>\n                }\n                forcePage={page}\n                // pageClassName=\"py-[0.3125rem] px-3 border-input-ink before:rounded-lg cursor-pointer\"\n                pageLinkClassName=\"page-link relative z-10 py-[0.3125rem] px-3 border-input-ink before:rounded-lg cursor-pointer\"\n                previousClassName=\"page-item flex\"\n                previousLinkClassName=\"page-link\"\n                nextClassName=\"page-item flex\"\n                nextLinkClassName=\"page-link relative z-10\"\n                breakClassName=\"page-item py-[0.375rem] px-3 border-input-ink before:rounded-lg cursor-pointer\"\n                breakLinkClassName=\"page-link z-10\"\n                containerClassName=\"flex items-center gap-x-2 text-ink-80 text-sm\"\n                activeClassName=\"pagination-active border-primary before:rounded-lg\"\n              />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* UPSERT MODAL MOBILE */}\n      {isMobile && (\n        <CustomModal\n          isOpen={isUpsertModalOpen}\n          handleOpen={handleOpenUpsertModal}\n          handleClose={handleCloseUpsertModal}\n        >\n          <animated.div style={animationUpsertModalMobile}>\n            <form onSubmit={formikUpsert.handleSubmit}>\n              <div className=\"absolute flex flex-col md:left-[50%] md:top-[50%] md:translate-x-[-50%] md:translate-y-[-50%] bg-background-80 h-[100svh] w-full md:w-[45rem] md:h-auto md:rounded-3xl overflow-y-auto\">\n                {/* HEADING */}\n                <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n                  <h1 className=\"text-xl text-ink-100 font-semibold\">\n                    {!isEditing\n                      ? 'Thêm cấu hình Copy Trade'\n                      : 'Chỉnh sửa cấu hình Copy Trade'}\n                  </h1>\n                  <CloseOutlined\n                    className=\"cursor-pointer\"\n                    onClick={handleCloseUpsertModal}\n                  />\n                </div>\n                {/* FORM */}\n                <div className=\"md:max-h-[calc(100vh-19rem)] overflow-y-auto\">\n                  <div\n                    className=\"bg-background-80 rounded-3xl p-6 flex flex-col\"\n                    ref={scrollElement}\n                  >\n                    <div className=\"p-4 mb-6 bg-ink-05 rounded-2xl\">\n                      <CopyTradeZoomSelectInput\n                        containerClassName=\"mb-4\"\n                        inputValue={selectedAccountType}\n                        onSelectChange={onSelectedAccountTypeChange}\n                        options={ACCOUNT_TYPES}\n                        isSearchEnabled={false}\n                        labelName=\"Loại tài khoản\"\n                      />\n                      {partnerBotDatas.length > 0 &&\n                        selectedAccountType.value === 'LIVE' && (\n                          <CopyTradeZoomSelectInput\n                            containerClassName=\"mb-4\"\n                            inputValue={selectedBotAccount}\n                            onSelectChange={onSelectedBotAccountChange}\n                            options={accountOptions}\n                            isSearchEnabled={false}\n                            labelName=\"Tài khoản giao dịch\"\n                          />\n                        )}\n                      {partnerBotDatas.length > 0 && (\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"px-3 flex items-center gap-x-2\">\n                            <p className=\"text-sm text-ink-100\">Số dư ví:</p>\n                            {selectedAccountType.value === 'DEMO' && (\n                              <img\n                                onClick={() => {\n                                  reloadDemoBalance(selectedBotAccount.value);\n                                }}\n                                className=\"w-[1.5rem] cursor-pointer\"\n                                src={images.home.reload}\n                                alt=\"BotLambotrade\"\n                              />\n                            )}\n                          </div>\n                          <p className=\"bg-primary-100 bg-clip-text text-transparent text-xl\">\n                            $\n                            {selectedAccountType.value === 'DEMO'\n                              ? botBalance.demo_balance.toLocaleString(\n                                  'en-US',\n                                  options\n                                )\n                              : selectedAccountType.value === 'LIVE'\n                              ? botBalance.balance.toLocaleString(\n                                  'en-US',\n                                  options\n                                )\n                              : 0}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* <CopyTradeZoomSelectInput\n                  containerClassName=\"mb-4\"\n                  inputValue={selectedMasterAccount}\n                  onSelectChange={onSelectedMasterChange}\n                  options={allBotAccountOptions}\n                  isSearchEnabled={false}\n                  labelName=\"Tên chuyên gia\"\n                /> */}\n\n                    <TextInput\n                      fullWidth={true}\n                      name=\"username\"\n                      id=\"username\"\n                      label=\"Tên chuyên gia\"\n                      type=\"text\"\n                      value={formikUpsert.values.username}\n                      onChange={formikUpsert.handleChange}\n                      resetValue={() => {\n                        formikUpsert.setFieldValue('username', '');\n                      }}\n                      onBlur={formikUpsert.handleBlur}\n                      placeholder=\"Tên chuyên gia\"\n                      error={\n                        (!isMasterAccountValid &&\n                          Boolean(formikUpsert.values.username)) ||\n                        (formikUpsert.touched.username &&\n                          Boolean(formikUpsert.errors.username))\n                      }\n                      helperText={\n                        !isMasterAccountValid &&\n                        Boolean(formikUpsert.values.username)\n                          ? 'Tên chuyên gia không đúng, vui lòng nhập lại'\n                          : formikUpsert.touched.username &&\n                            formikUpsert.errors.username\n                      }\n                      containerClassName=\"mb-6\"\n                      icon={\n                        isMasterAccountValid &&\n                        Boolean(formikUpsert.values.username) &&\n                        images.input.correct\n                      }\n                    />\n\n                    {/* GIÁ TRỊ 1 LỆNH \n                    <div className=\"mb-6\">\n                      <p className=\"mb-4 text-sm text-ink-100\">\n                        GIÁ TRỊ 1 LỆNH\n                      </p>\n                      <div className=\"flex justify-between gap-x-3 mb-4\">\n                        <div\n                          onClick={() => {\n                            handleAmountMinusOne(\n                              formikUpsert.values.amountPerOrder,\n                              'amountPerOrder'\n                            );\n                          }}\n                          className=\"p-4 bg-ink-05 border border-ink-20 hover:bg-ink-20 hover:border-ink-10 rounded-xl text-ink-60 cursor-pointer\"\n                        >\n                          <img\n                            className=\"w-[1.5rem]\"\n                            src={images.copy.minus}\n                            alt=\"BotLambotrade\"\n                          />\n                        </div>\n                        <CurrencyInput\n                          className=\"flex-grow text-center bg-ink-05 border border-ink-10 text-ink-100 font-semibold rounded-xl\"\n                          value={formikUpsert.values.amountPerOrder}\n                          onValueChange={(value, _, values) => {\n                            handleAmount(value, 'amountPerOrder', values);\n                          }}\n                          onFocus={() => {\n                            setIsAmountPerOrderAmountFocus(true);\n                          }}\n                          onBlur={(e) => {\n                            if(Number((e.target.value.replace('$', '').trim() || 0)) <= 0)\n                             setIsAmountPerOrderAmountFocus(false);\n                          }}\n                          placeholder=\"Mời nhập số tiền\"\n                          prefix={'$ '}\n                          step={1}\n                          allowNegativeValue={false}\n                          decimalsLimit={3}\n                        />\n                        <div\n                          onClick={() => {\n                            handleOrderAmountPlusOne(\n                              formikUpsert.values.amountPerOrder,\n                              'amountPerOrder'\n                            );\n                          }}\n                          className=\"p-4 bg-ink-05 border border-ink-20 hover:bg-ink-20 hover:border-ink-10 rounded-xl cursor-pointer\"\n                        >\n                          <img\n                            className=\"w-[1.5rem]\"\n                            src={images.copy.plus_gold}\n                            alt=\"BotLambotrade\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-6 gap-x-2\">\n                        {PLUS_VALUES.map((value, index) => {\n                          let renderText = '+' + value;\n                          if (value === 'All') renderText = 'All';\n                          return (\n                            <div\n                              key={index * Math.random() * 100}\n                              className=\"flex-grow xl:px-3 xl:py-3 px-2 py-2 text-center bg-ink-05 hover:bg-ink-20 text-ink-100 rounded-xl cursor-pointer\"\n                              onClick={() => {\n                                // CHECK IF PARTNER BOT ALREADY ASSOCIATED\n                                const balance =\n                                  selectedAccountType.value === 'DEMO'\n                                    ? botBalance.demo_balance\n                                    : botBalance.balance;\n                                if (typeof value === 'number') {\n                                  const plusAmount =\n                                    formikUpsert.values.amountPerOrder + value;\n                                  if (plusAmount <= balance) {\n                                    formikUpsert.setFieldValue(\n                                      'amountPerOrder',\n                                      plusAmount\n                                    );\n                                  }\n                                } else {\n                                  // ALL\n                                  formikUpsert.setFieldValue(\n                                    'amountPerOrder',\n                                    balance\n                                  );\n                                }\n                              }}\n                            >\n                              {renderText}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                    */}\n                    {/* HỆ SỐ GẤP LỆNH */}\n                    <div className=\"mb-6\">\n                      <p className=\"mb-4 text-sm text-ink-100\">\n                        HỆ SỐ GẤP LỆNH\n                      </p>\n                      <div className=\"flex justify-between gap-x-3 mb-4\">\n                        <div\n                          onClick={() => {\n                            handleAmountMinusOne(\n                              formikUpsert.values.multiply,\n                              'multiply'\n                            );\n                          }}\n                          className=\"p-4 bg-ink-05 border border-ink-20 hover:bg-ink-20 hover:border-ink-10 rounded-xl text-ink-60 cursor-pointer\"\n                        >\n                          <img\n                            className=\"w-[1.5rem]\"\n                            src={images.copy.minus}\n                            alt=\"BotLambotrade\"\n                          />\n                        </div>\n                        <CurrencyInput\n                          className=\"flex-grow text-center bg-ink-05 border border-ink-10 text-ink-100 font-semibold rounded-xl\"\n                          value={formikUpsert.values.multiply}\n                          onValueChange={(value, _, values) => {\n                            console.log(_);\n                            handleAmount(value, 'multiply', values);\n                          }}\n                          onFocus={() => {\n                            setIsMultiplyAmountFocus(true);\n                          }}\n                          onBlur={() => {\n                            setIsMultiplyAmountFocus(false);\n                          }}\n                          placeholder=\"Mời nhập số tiền\"\n                          prefix={'X '}\n                          step={1}\n                          allowNegativeValue={false}\n                          decimalsLimit={3}\n                        />\n                        <div\n                          onClick={() => {\n                            handleOrderAmountPlusOne(\n                              formikUpsert.values.multiply,\n                              'multiply'\n                            );\n                          }}\n                          className=\"p-4 bg-ink-05 border border-ink-20 hover:bg-ink-20 hover:border-ink-10 rounded-xl cursor-pointer\"\n                        >\n                          <img\n                            className=\"w-[1.5rem]\"\n                            src={images.copy.plus_gold}\n                            alt=\"BotLambotrade\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-6 gap-x-2\">\n                        {MULTIPLY_VALUES.map((value, index) => {\n                          let renderText = 'X' + value;\n                          return (\n                            <div\n                              key={index * Math.random() * 100}\n                              className=\"flex-grow xl:px-3 xl:py-3 px-2 py-2 text-center bg-ink-05 hover:bg-ink-20 text-ink-100 rounded-xl cursor-pointer\"\n                              onClick={() => {\n                                formikUpsert.setFieldValue('multiply', value);\n                              }}\n                            >\n                              {renderText}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n\n                    {/* AIM */}\n                    \n                    <div className=\"mb-6 grid grid-cols-2 gap-4\">\n                      <CustomNumberInput\n                        formik={formikUpsert}\n                        isInputFocus={isTakeProfitFocus}\n                        setIsInputFocus={setIsTakeProfitFocus}\n                        inputValue={formikUpsert.values.aimMax}\n                        inputError={formikUpsert.errors.aimMax}\n                        name=\"aimMax\"\n                        id=\"aimMax\"\n                        label=\"Mục tiêu chốt lãi\"\n                        inputColor=\"text-green-100\"\n                        symbol=\"$\"\n                      />\n                      <CustomNumberInput\n                        formik={formikUpsert}\n                        isInputFocus={isStopLossFocus}\n                        setIsInputFocus={setIsStopLossFocus}\n                        inputValue={formikUpsert.values.aimMin}\n                        inputError={formikUpsert.errors.aimMin}\n                        name=\"aimMin\"\n                        id=\"aimMin\"\n                        label=\"Mục tiêu cắt lỗ\"\n                        inputColor=\"text-red-100\"\n                        symbol=\"$\"\n                      />\n                    </div>\n\n                    {/* STATUS */}\n                 \n                    <div className=\"flex flex-col gap-y-4\">\n                      {/*}\n                      <div className=\"flex justify-between\">\n                        <p>Trạng thái Copy AI Bot Telegram</p>\n                        <CustomSwitch\n                          checked={formikUpsert.values.aiBotTelegramEnabled}\n                          onChange={(e) => {\n                            formikUpsert.setFieldValue(\n                              'aiBotTelegramChecked',\n                              !formikUpsert.values.aiBotTelegramEnabled\n                            );\n                          }}\n                        />\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <p>Trạng thái Copy AI Basic</p>\n                        <CustomSwitch\n                          checked={formikUpsert.values.aiBasicEnabled}\n                          onChange={(e) => {\n                            formikUpsert.setFieldValue(\n                              'aiBasicChecked',\n                              !formikUpsert.values.aiBasicEnabled\n                            );\n                          }}\n                        />\n                      </div>\n                        */}\n                      <div className=\"flex justify-between\">\n                        <p>Trạng thái Copy Trade</p>\n                        <CustomSwitch\n                          checked={formikUpsert.values.status === 'active'}\n                          onChange={(e) => {\n                            if (formikUpsert.values.status === 'active') {\n                              formikUpsert.setFieldValue('status', 'inactive');\n                            } else {\n                              formikUpsert.setFieldValue('status', 'active');\n                            }\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                {/* BUTTON */}\n                <div className=\"mt-auto p-6 flex justify-end items-center\">\n                  <GoldButton\n                    type=\"submit\"\n                    buttonClassName=\"flex-grow md:flex-initial\"\n                  >\n                    {!isEditing ? 'Lưu cấu hình' : 'Cập nhật cấu hình'}\n                  </GoldButton>\n                </div>\n              </div>\n            </form>\n          </animated.div>\n        </CustomModal>\n      )}\n\n      {/* UPSERT MODAL DESKTOP */}\n      {!isMobile && (\n        <CustomModal\n          isOpen={isUpsertModalOpen}\n          handleOpen={handleOpenUpsertModal}\n          handleClose={handleCloseUpsertModal}\n        >\n          <form onSubmit={formikUpsert.handleSubmit}>\n            <div className=\"absolute flex flex-col md:left-[50%] md:top-[50%] md:translate-x-[-50%] md:translate-y-[-50%] bg-background-80 h-[100svh] w-full md:w-[45rem] md:h-auto md:rounded-3xl\">\n              {/* HEADING */}\n              <div className=\"p-6 border-b border-ink-10 flex justify-between items-center\">\n                <h1 className=\"text-xl text-ink-100 font-semibold\">\n                  {!isEditing\n                    ? 'Thêm cấu hình Copy Trade'\n                    : 'Chỉnh sửa cấu hình Copy Trade'}\n                </h1>\n                <CloseOutlined\n                  className=\"cursor-pointer\"\n                  onClick={handleCloseUpsertModal}\n                />\n              </div>\n              {/* FORM */}\n              <div className=\"md:max-h-[calc(100vh-19rem)] overflow-y-auto\">\n                <div\n                  className=\"bg-background-80 rounded-3xl p-6 flex flex-col\"\n                  ref={scrollElement}\n                >\n                  <div className=\"p-4 mb-6 bg-ink-05 rounded-2xl\">\n                    <CopyTradeZoomSelectInput\n                      containerClassName=\"mb-4\"\n                      inputValue={selectedAccountType}\n                      onSelectChange={onSelectedAccountTypeChange}\n                      options={ACCOUNT_TYPES}\n                      isSearchEnabled={false}\n                      labelName=\"Loại tài khoản\"\n                    />\n                    {partnerBotDatas.length > 0 &&\n                      selectedAccountType.value === 'LIVE' && (\n                        <CopyTradeZoomSelectInput\n                          containerClassName=\"mb-4\"\n                          inputValue={selectedBotAccount}\n                          onSelectChange={onSelectedBotAccountChange}\n                          options={accountOptions}\n                          isSearchEnabled={false}\n                          labelName=\"Tài khoản giao dịch\"\n                        />\n                      )}\n                    {partnerBotDatas.length > 0 && (\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"px-3 flex items-center gap-x-2\">\n                          <p className=\"text-sm text-ink-100\">Số dư ví:</p>\n                          {selectedAccountType.value === 'DEMO' && (\n                            <img\n                              onClick={() => {\n                                reloadDemoBalance(selectedBotAccount.value);\n                              }}\n                              className=\"w-[1.5rem] cursor-pointer\"\n                              src={images.home.reload}\n                              alt=\"BotLambotrade\"\n                            />\n                          )}\n                        </div>\n                        <p className=\"bg-primary-100 bg-clip-text text-transparent text-xl\">\n                          $\n                          {selectedAccountType.value === 'DEMO'\n                            ? botBalance.demo_balance.toLocaleString(\n                                'en-US',\n                                options\n                              )\n                            : selectedAccountType.value === 'LIVE'\n                            ? botBalance.balance.toLocaleString(\n                                'en-US',\n                                options\n                              )\n                            : 0}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* <CopyTradeZoomSelectInput\n                  containerClassName=\"mb-4\"\n                  inputValue={selectedMasterAccount}\n                  onSelectChange={onSelectedMasterChange}\n                  options={allBotAccountOptions}\n                  isSearchEnabled={false}\n                  labelName=\"Tên chuyên gia\"\n                /> */}\n\n                  <TextInput\n                    fullWidth={true}\n                    name=\"username\"\n                    id=\"username\"\n                    label=\"Tên chuyên gia\"\n                    type=\"text\"\n                    value={formikUpsert.values.username}\n                    onChange={formikUpsert.handleChange}\n                    resetValue={() => {\n                      formikUpsert.setFieldValue('username', '');\n                    }}\n                    onBlur={formikUpsert.handleBlur}\n                    placeholder=\"Tên chuyên gia\"\n                    error={\n                      (!isMasterAccountValid &&\n                        Boolean(formikUpsert.values.username)) ||\n                      (formikUpsert.touched.username &&\n                        Boolean(formikUpsert.errors.username))\n                    }\n                    helperText={\n                      !isMasterAccountValid &&\n                      Boolean(formikUpsert.values.username)\n                        ? 'Tên chuyên gia không đúng, vui lòng nhập lại'\n                        : formikUpsert.touched.username &&\n                          formikUpsert.errors.username\n                    }\n                    containerClassName=\"mb-6\"\n                    icon={\n                      isMasterAccountValid &&\n                      Boolean(formikUpsert.values.username) &&\n                      images.input.correct\n                    }\n                  />\n\n                  {/* GIÁ TRỊ 1 LỆNH \n                  <div className=\"mb-6\">\n                    <p className=\"mb-4 text-sm text-ink-100\">GIÁ TRỊ 1 LỆNH</p>\n                    <div className=\"flex justify-between gap-x-3 mb-4\">\n                      <div\n                        onClick={() => {\n                          handleAmountMinusOne(\n                            formikUpsert.values.amountPerOrder,\n                            'amountPerOrder'\n                          );\n                        }}\n                        className=\"p-4 bg-ink-05 border border-ink-20 hover:bg-ink-20 hover:border-ink-10 rounded-xl text-ink-60 cursor-pointer\"\n                      >\n                        <img\n                          className=\"w-[1.5rem]\"\n                          src={images.copy.minus}\n                          alt=\"BotLambotrade\"\n                        />\n                      </div>\n                      <CurrencyInput\n                        className=\"flex-grow text-center bg-ink-05 border border-ink-10 text-ink-100 font-semibold rounded-xl\"\n                        value={formikUpsert.values.amountPerOrder}\n                        onValueChange={(value, _, values) => {\n                          handleAmount(value, 'amountPerOrder', values);\n                        }}\n                        onFocus={() => {\n                          setIsAmountPerOrderAmountFocus(true);\n                        }}\n                        onBlur={(e) => {\n                          if(Number((e.target.value.replace('$', '').trim() || 0)) <= 0)\n                            setIsAmountPerOrderAmountFocus(false);\n                        }}\n                        placeholder=\"Mời nhập số tiền\"\n                        prefix={'$ '}\n                        step={1}\n                        allowNegativeValue={false}\n                        decimalsLimit={3}\n                      />\n                      <div\n                        onClick={() => {\n                          handleOrderAmountPlusOne(\n                            formikUpsert.values.amountPerOrder,\n                            'amountPerOrder'\n                          );\n                        }}\n                        className=\"p-4 bg-ink-05 border border-ink-20 hover:bg-ink-20 hover:border-ink-10 rounded-xl cursor-pointer\"\n                      >\n                        <img\n                          className=\"w-[1.5rem]\"\n                          src={images.copy.plus_gold}\n                          alt=\"BotLambotrade\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-6 gap-x-2\">\n                      {PLUS_VALUES.map((value, index) => {\n                        let renderText = '+' + value;\n                        if (value === 'All') renderText = 'All';\n                        return (\n                          <div\n                            key={index * Math.random() * 100}\n                            className=\"flex-grow xl:px-3 xl:py-3 px-2 py-2 text-center bg-ink-05 hover:bg-ink-20 text-ink-100 rounded-xl cursor-pointer\"\n                            onClick={() => {\n                              // CHECK IF PARTNER BOT ALREADY ASSOCIATED\n                              const balance =\n                                selectedAccountType.value === 'DEMO'\n                                  ? botBalance.demo_balance\n                                  : botBalance.balance;\n                              if (typeof value === 'number') {\n                                const plusAmount =\n                                  formikUpsert.values.amountPerOrder + value;\n                                if (plusAmount <= balance) {\n                                  formikUpsert.setFieldValue(\n                                    'amountPerOrder',\n                                    plusAmount\n                                  );\n                                }\n                              } else {\n                                // ALL\n                                formikUpsert.setFieldValue(\n                                  'amountPerOrder',\n                                  balance\n                                );\n                              }\n                            }}\n                          >\n                            {renderText}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                  */}    \n                  {/* HỆ SỐ GẤP LỆNH */}\n                  <div className=\"mb-6\">\n                    <p className=\"mb-4 text-sm text-ink-100\">HỆ SỐ GẤP LỆNH</p>\n                    <div className=\"flex justify-between gap-x-3 mb-4\">\n                      <div\n                        onClick={() => {\n                          handleAmountMinusOne(\n                            formikUpsert.values.multiply,\n                            'multiply'\n                          );\n                        }}\n                        className=\"p-4 bg-ink-05 border border-ink-20 hover:bg-ink-20 hover:border-ink-10 rounded-xl text-ink-60 cursor-pointer\"\n                      >\n                        <img\n                          className=\"w-[1.5rem]\"\n                          src={images.copy.minus}\n                          alt=\"BotLambotrade\"\n                        />\n                      </div>\n                      <CurrencyInput\n                        className=\"flex-grow text-center bg-ink-05 border border-ink-10 text-ink-100 font-semibold rounded-xl\"\n                        value={formikUpsert.values.multiply}\n                        onValueChange={(value, _, values) => {\n                          console.log(_);\n                          handleAmount(value, 'multiply', values);\n                        }}\n                        onFocus={() => {\n                          setIsMultiplyAmountFocus(true);\n                        }}\n                        onBlur={() => {\n                          setIsMultiplyAmountFocus(false);\n                        }}\n                        placeholder=\"Mời nhập số tiền\"\n                        prefix={'X '}\n                        step={1}\n                        allowNegativeValue={false}\n                        decimalsLimit={3}\n                      />\n                      <div\n                        onClick={() => {\n                          handleOrderAmountPlusOne(\n                            formikUpsert.values.multiply,\n                            'multiply'\n                          );\n                        }}\n                        className=\"p-4 bg-ink-05 border border-ink-20 hover:bg-ink-20 hover:border-ink-10 rounded-xl cursor-pointer\"\n                      >\n                        <img\n                          className=\"w-[1.5rem]\"\n                          src={images.copy.plus_gold}\n                          alt=\"BotLambotrade\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-6 gap-x-2\">\n                      {MULTIPLY_VALUES.map((value, index) => {\n                        let renderText = 'X' + value;\n                        return (\n                          <div\n                            key={index * Math.random() * 100}\n                            className=\"flex-grow xl:px-3 xl:py-3 px-2 py-2 text-center bg-ink-05 hover:bg-ink-20 text-ink-100 rounded-xl cursor-pointer\"\n                            onClick={() => {\n                              formikUpsert.setFieldValue('multiply', value);\n                            }}\n                          >\n                            {renderText}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* AIM */}\n                  <div className=\"mb-6 grid grid-cols-2 gap-4\">\n                    <CustomNumberInput\n                      formik={formikUpsert}\n                      isInputFocus={isTakeProfitFocus}\n                      setIsInputFocus={setIsTakeProfitFocus}\n                      inputValue={formikUpsert.values.aimMax}\n                      inputError={formikUpsert.errors.aimMax}\n                      name=\"aimMax\"\n                      id=\"aimMax\"\n                      label=\"Mục tiêu chốt lãi\"\n                      inputColor=\"text-green-100\"\n                      symbol=\"$\"\n                    />\n                    <CustomNumberInput\n                      formik={formikUpsert}\n                      isInputFocus={isStopLossFocus}\n                      setIsInputFocus={setIsStopLossFocus}\n                      inputValue={formikUpsert.values.aimMin}\n                      inputError={formikUpsert.errors.aimMin}\n                      name=\"aimMin\"\n                      id=\"aimMin\"\n                      label=\"Mục tiêu cắt lỗ\"\n                      inputColor=\"text-red-100\"\n                      symbol=\"$\"\n                    />\n                  </div>\n\n                  {/* STATUS */}\n                  <div className=\"flex flex-col gap-y-4\">\n                    {/*\n                    <div className=\"flex justify-between\">\n                      <p>Trạng thái Copy AI Bot Telegram</p>\n                      <CustomSwitch\n                        checked={formikUpsert.values.aiBotTelegramEnabled}\n                        onChange={(e) => {\n                          formikUpsert.setFieldValue(\n                            'aiBotTelegramChecked',\n                            !formikUpsert.values.aiBotTelegramEnabled\n                          );\n                        }}\n                      />\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <p>Trạng thái Copy AI Basic</p>\n                      <CustomSwitch\n                        checked={formikUpsert.values.aiBasicEnabled}\n                        onChange={(e) => {\n                          formikUpsert.setFieldValue(\n                            'aiBasicChecked',\n                            !formikUpsert.values.aiBasicEnabled\n                          );\n                        }}\n                      />\n                    </div>\n                    */}\n                    <div className=\"flex justify-between\">\n                      <p>Trạng thái Copy Trade</p>\n                      <CustomSwitch\n                        checked={formikUpsert.values.status === 'active'}\n                        onChange={(e) => {\n                          if (formikUpsert.values.status === 'active') {\n                            formikUpsert.setFieldValue('status', 'inactive');\n                          } else {\n                            formikUpsert.setFieldValue('status', 'active');\n                          }\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/* BUTTON */}\n              <div className=\"mt-auto p-6 flex justify-end items-center\">\n                <GoldButton\n                  type=\"submit\"\n                  buttonClassName=\"flex-grow md:flex-initial\"\n                >\n                  {!isEditing ? 'Lưu cấu hình' : 'Cập nhật cấu hình'}\n                </GoldButton>\n              </div>\n            </div>\n          </form>\n        </CustomModal>\n      )}\n\n      <CustomModal\n        isOpen={isPopupOpen}\n        handleOpen={handleOpenPopupModal}\n        handleClose={handleClosePopupModal}\n      >\n        <div\n          className={`absolute left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] p-6 md:w-[31.25rem] w-[calc(100vw-2rem)] bg-background-80 rounded-3xl text-center`}\n        >\n          <div className=\"flex items-center justify-center\">\n            <img\n              className=\"mb-4 w-[5.5rem]\"\n              src={images.copy.delete}\n              alt=\"BotLambotrade\"\n            />\n          </div>\n          <h3 className=\"mb-2 mx-auto max-w-[18.75rem] text-xl text-ink-100\">\n            Xoá cấu hình copy trade\n          </h3>\n          <p className=\"mb-12 mx-auto max-w-[18.75rem] text-ink-80\">\n            Bạn có chắc chắn muốn xoá cấu hình copy trade không?\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 justify-center items-center gap-4\">\n            <GreyButton onClick={handleClosePopupModal}>Huỷ</GreyButton>\n            <GoldButton\n              onClick={() => {\n                if (isDeletingByList) {\n                  deleteSettingByListIds();\n                } else {\n                  deleteSettingById();\n                }\n                handleClosePopupModal();\n              }}\n            >\n              Xoá\n            </GoldButton>\n          </div>\n        </div>\n      </CustomModal>\n\n      {/* POPUP Validate */}\n      <CustomValidateModel\n        isOpen={modalAttributes.isOpen}\n        icon={modalAttributes.icon}\n        headingMessage={modalAttributes.headingMessage}\n        message={modalAttributes.message}\n        buttonMessage={modalAttributes.buttonMessage}\n        handleOpen={modalAttributes.handleOpen}\n        handleClose={modalAttributes.handleClose}\n      />\n    </>\n  );\n};\n\nexport default CopyTradeSettingFollow;\n","import React, { useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport CopyTradeSettingFollow from './CopyTradeSettingFollow';\n\nconst CopyTradeSetting = () => {\n  const [isFollowing, setIsFollowing] = useState(true);\n  const [searchInput, setSearchInput] = useState('');\n\n  return (\n    <>\n      <Helmet>\n        <title>BotLambotrade | Copy Trade</title>\n      </Helmet>\n\n      <CopyTradeSettingFollow\n        isFollowing={isFollowing}\n        setIsFollowing={setIsFollowing}\n        searchInput={searchInput}\n        setSearchInput={setSearchInput}\n      />\n    </>\n  );\n};\n\nexport default CopyTradeSetting;\n","import images from 'assets';\nimport SearchInputFormik from 'pages/CopyTradeSetting/CopyTradeSettingSearchInput';\nimport React, { FC, useRef, useState } from 'react';\nimport { FormikProps } from 'formik';\nimport SearchInput from 'components/SearchInput';\nimport InputSelectOption from 'types/InputSelectOption';\n\ninterface CopyTradeZoomSelectInputProps {\n  labelName: string;\n  inputValue: InputSelectOption;\n  options: InputSelectOption[];\n  // setInputValue: React.Dispatch<React.SetStateAction<InputSelectOption>>;\n  onSelectChange: (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    option: InputSelectOption\n  ) => void;\n  popupClassName?: string;\n  containerClassName?: string;\n  isSearchEnabled?: boolean;\n}\n\nconst CopyTradeZoomSelectInput: FC<CopyTradeZoomSelectInputProps> = ({\n  labelName,\n  popupClassName = '',\n  containerClassName = '',\n  isSearchEnabled = true,\n  inputValue,\n  // setInputValue,\n  onSelectChange,\n  options,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [searchInput, setSearchInput] = useState('MBot 1.8');\n  const handleOpen = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    setOpen((prev) => !prev);\n  };\n\n  // const handleSelect = (\n  //   e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  //   option: InputSelectOption\n  // ) => {\n  //   setOpen((prev) => !prev);\n  //   setInputValue(option);\n  // };\n\n  return (\n    <>\n      <div\n        className={`relative px-3 py-[0.375rem] border border-ink-10 bg-ink-05 rounded-2xl cursor-pointer ${containerClassName}`}\n      >\n        <div className=\"flex justify-between items-center\" onClick={handleOpen}>\n          <div>\n            <label className=\"pb-1 text-ink-60 text-xs cursor-pointer\">\n              {labelName}\n            </label>\n            <p className=\"text-ink-100\">\n              {inputValue.label ? inputValue.label : '\\u00A0'}\n            </p>\n          </div>\n          <img\n            className=\"w-[1.5rem]\"\n            src={images.home.white_dropdown}\n            alt=\"BotLambotrade\"\n          />\n        </div>\n        {open && (\n          <div\n            className={`z-[10000] top-[calc(100%+0.5rem)] absolute w-full left-0 bg-dropdown rounded-2xl cursor-pointer shadow-popup ${popupClassName}`}\n          >\n            {isSearchEnabled && (\n              <div className=\"p-4\">\n                <SearchInput\n                  inputName=\"search\"\n                  inputClassName=\"w-full\"\n                  searchInput={searchInput}\n                  setSearchInput={setSearchInput}\n                />\n              </div>\n            )}\n            <div className=\"flex flex-col max-h-[39.5rem] overflow-y-auto\">\n              {options.map((option, index) => (\n                <div\n                  className={`border-select-input first:rounded-tl-2xl first:rounded-tr-2xl last:rounded-bl-2xl last:rounded-br-2xl ${\n                    inputValue.value === option.value ? 'bg-primary-05' : 'p-4'\n                  }`}\n                  onClick={(e) => {\n                    // handleSelect(e, option);\n                    onSelectChange(e, option);\n                    setOpen((prev) => !prev);\n                  }}\n                  key={index}\n                >\n                  <p\n                    className={`${\n                      inputValue.value === option.value\n                        ? 'p-4 bg-primary-100 bg-clip-text text-transparent'\n                        : ''\n                    }`}\n                  >\n                    {option.label}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default CopyTradeZoomSelectInput;\n","export default function convertToThreeDecimalPlaces(num: string | number) {\n  const numDecimalPlaces = (num.toString().split('.')[1] || '').length;\n  if (numDecimalPlaces > 3) {\n    return (+num).toFixed(3);\n  } else {\n    return num;\n  }\n}\n"],"names":["_ref","inputClassName","inputName","searchInput","setSearchInput","_jsxs","children","_jsx","htmlFor","className","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","type","id","name","concat","placeholder","value","onChange","e","target","required","classNameHover","background","backgroundHover","textClassName","textClassNameHover","textColor","textColorHover","icon","iconHover","onClick","console","log","isButtonHover","setIsButtonHover","useState","onMouseOver","onMouseLeave","src","alt","props","formik","isInputFocus","setIsInputFocus","inputValue","inputError","label","inputColor","symbol","ref","useRef","CurrencyInput","onBlur","handleBlur","prev","onValueChange","_","values","handleAmount","fieldName","valueToSet","undefined","convertedValue","convertToThreeDecimalPlaces","setFieldValue","onFocus","allowNegativeValue","disableAbbreviations","decimalsLimit","maxLength","decimalSeparator","groupSeparator","current","focus","PAGE_SIZE_OPTIONS","MULTIPLY_VALUES","INITIAL_BOT_BALANCE","balance","demo_balance","usdt_balance","INITIAL_SELECTED_OPTION","INITIAL_SELECTED_ACCOUNT_TYPE","INITIAL_FORMIK_VALUES","master","username","amountPerOrder","multiply","aimMin","aimMax","aiBotTelegramEnabled","aiBasicEnabled","copyTradeEnabled","status","ACCOUNT_TYPES","INITIAL_BOT_SETTING_RESULT","master_name","account_type","follower","follower_name","follower_username","o_amount","o_owner","fold_command","block_status","created_at","updated_at","current_profit","current_date_profit","current_volume","current_date_volume","aim_min","aim_max","options","minimumFractionDigits","maximumFractionDigits","style","isFollowing","setIsFollowing","currentTimer","setCurrentTimer","moment","selectedIds","setSelectedIds","selectAll","setSelectAll","isMasterNameFocus","setIsMasterNameFocus","isTakeProfitFocus","setIsTakeProfitFocus","isStopLossFocus","setIsStopLossFocus","totalRecords","setTotalRecords","allBotDatas","setAllBotDatas","partnerBotDatas","setPartnerBotDatas","botBalance","setBotBalance","selectedAccountType","setSelectedAccountType","selectedBotAccount","setSelectedBotAccount","selectedMasterAccount","setSelectedMasterAccount","isMasterAccountValid","setIsMasterAccountValid","accountOptions","setAccountOptions","allBotAccountOptions","setAllBotAccountOptions","botSettingData","setBotSettingData","count","next","previous","results","allBotSettingResults","setAllBotSettingResults","isDeletingByList","setIsDeletingByList","useAppSelector","state","user","isUpsertModalOpen","setIsUpsertModalOpen","isPopupOpen","setIsPopupOpen","isValidAmountPopupOpen","setIsValidAmountPopupOpen","selectedPageSizeOption","setSelectedPageSizeOption","page","setPage","totalPages","setTotalPages","menuRef","isPrevHover","setIsPrevHover","isNextHover","setIsNextHover","modalAttributes","setModalAttributes","isOpen","headingMessage","message","buttonMessage","handleOpen","handleClose","isAmountPerOrderAmountFocus","setIsAmountPerOrderAmountFocus","isMultiplyAmountFocus","setIsMultiplyAmountFocus","formikValues","setFormikValues","selectedBotSettingResult","setSelectedBotSettingResult","isEditing","setIsEditing","isPartnerBotInitialized","setIsPartnerBotInitialized","animationUpsertModalMobile","useSpring","to","opacity","transform","isLargeDesktop","useMediaQuery","query","isDesktop","isMobile","dispatch","useAppDispatch","enqueueSnackbar","useEnqueueSnackbar","navigate","useNavigate","scrollElement","data","React","isTooltipOpen","setIsTooltipOpen","handleTooltipOpen","useCallback","rowIndex","prevState","handleTooltipClose","onSelectedAccountTypeChange","option","userActions","onSelectedBotAccountChange","handleOpenUpsertModal","handleCloseUpsertModal","formikUpsert","resetForm","handleOpenPopupModal","handleClosePopupModal","handleOpenValidAmountPopupModal","handleCloseValidAmountPopupModal","handleOpenAccountTradePopupModal","handleCloseAccountTradePopupModal","handleAmountMinusOne","handleOrderAmountPlusOne","toggleRow","newSelected","Object","entries","reduce","length","toggleAllRow","forEach","x","getAllBotSettings","map","botData","toString","axios","APIs","params","page_size","then","res","Math","ceil","catch","variant","updateSettingStatus","botSettingResult","statusToUpdate","err","updateModelData","accountType","filter","botAccount","updatedFormikValues","resetAllCurrent","selectedListIds","selected","handlePageChange","_ref2","columns","accessor","Cell","original","cell","row","checked","Header","input","indeterminate","sortable","width","isBlocked","isDemoAccount","_original$current_vol","toLocaleString","abs","_original$fold_comman","_original$aim_max","_original$aim_min","format","isCopyTradeEnabled","ReactSwitch","handleClick","checkedIcon","uncheckedIcon","Tooltip","componentsProps","tooltip","arrow","sx","title","stopPropagation","images","open","onOpen","onClose","disableHoverListener","disableFocusListener","disableTouchListener","placement","enterTouchDelay","leaveTouchDelay","tableInstance","useTable","usePagination","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useFormik","initialValues","validateOnChange","enableReinitialize","validationSchema","Yup","min","typeError","onSubmit","async","helpers","_scrollElement$curren","masterId","updateCopyTradeData","JSON","stringify","createCopyTradeData","ai_bot_telegram_enabled","ai_basic_enabled","copy_trade_enabled","scrollIntoView","getAllAccounts","getAllPartnerBots","getBalance","reloadDemoBalance","convertPartnerBotsToPartnerAccountOptions","botname","convertAllPartnerBotsToPartnerAccountOptions","useEffect","firstBotOption","getData","setTimeout","response","_response$data","clearTimeout","_Fragment","BotTradeSettingButton","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","getCellProps","SelectInput","handleSelectPageSize","actionMeta","indicatorContainerClassName","indicatorContainerIconClassName","menuPortalClassName","ReactPaginate","breakLabel","onPageChange","marginPagesDisplayed","pageCount","previousLabel","onMouseEnter","nextLabel","forcePage","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","containerClassName","activeClassName","CustomModal","animated","handleSubmit","CloseOutlined","CopyTradeZoomSelectInput","onSelectChange","isSearchEnabled","labelName","TextInput","fullWidth","handleChange","resetValue","error","Boolean","touched","errors","helperText","prefix","step","index","renderText","random","CustomNumberInput","CustomSwitch","GoldButton","buttonClassName","GreyButton","deleteSettingByListIds","CustomValidateModel","CopyTradeSetting","Helmet","CopyTradeSettingFollow","popupClassName","setOpen","SearchInput","num","split","toFixed"],"sourceRoot":""}